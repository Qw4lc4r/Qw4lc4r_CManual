using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySqlConnector;

namespace попытка2
{
    public partial class MainForm : Form
    {
        private TeoryPractice form1Instance;
        private Teory form2Instance;
        public static int selectIndex = -1;
        public static int selectCombobox = -1;
        public int i = 0;
        public static int progress = 0;
        private Timer timer;
        private List<Snowflake> snowflakes;
        private static Random rand;
        public MainForm()
        {
            InitializeComponent();
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            AddHandlersToComboBoxes(this);
            form1Instance = new TeoryPractice();
            form2Instance = new Teory();
            guna2CustomGradientPanel1.Visible = false;
            this.FormClosing += new FormClosingEventHandler(Form1_FormClosing);// Инициализация снежинок
            snowflakes = new List<Snowflake>();
            rand = new Random();

            // Таймер для обновления анимации
            timer = new Timer();
            timer.Interval = 50; // Обновление каждый 50 миллисекунд
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // Добавляем новые снежинки с небольшой вероятностью
            if (rand.Next(10) < 2) // 20% шанс, что появится новая снежинка
            {
                snowflakes.Add(new Snowflake(rand.Next(0, guna2CustomGradientPanel1.Width), 0, rand.Next(2, 5)));
            }

            // Обновляем позиции снежинок
            for (int i = 0; i < snowflakes.Count; i++)
            {
                snowflakes[i].Y += snowflakes[i].Speed;
                if (snowflakes[i].Y > guna2CustomGradientPanel1.Height) // Если снежинка вышла за пределы панели, удаляем её
                {
                    snowflakes.RemoveAt(i);
                    i--;
                }
            }
            
            // Перерисовываем панель
            guna2CustomGradientPanel1.Invalidate();
            Invalidate();
        }


        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            // Рисуем снежинки
            foreach (var snowflake in snowflakes)
            {
                e.Graphics.FillEllipse(Brushes.White, snowflake.X, snowflake.Y, snowflake.Size, snowflake.Size);
            }
        }
        private void guna2CustomGradientPanel1_Paint_1(object sender, PaintEventArgs e)
        {
            // Рисуем снежинки на панели
            foreach (var snowflake in snowflakes)
            {
                e.Graphics.FillEllipse(Brushes.White, snowflake.X, snowflake.Y, snowflake.Size, snowflake.Size);
            }
        }
        private bool isClosing = false;
        private void AddHandlersToComboBoxes(Control parent)
        {
            foreach (Control control in parent.Controls)
            {
                if (control is ComboBox comboBox)
                {
                    comboBox.MouseWheel += this.comboBox_MouseWheel;
                    comboBox.KeyDown += (s, e) =>
                    {
                        if (e.KeyCode == Keys.Up
                        || e.KeyCode == Keys.Down
                        || e.KeyCode == Keys.Left
                        || e.KeyCode == Keys.Right)
                        {
                            e.Handled = true;
                        }
                    };
                }

                // Рекурсивно проверяем вложенные элементы управления
                if (control.Controls.Count > 0)
                {
                    AddHandlersToComboBoxes(control);
                }
            }
        }
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

            // Если мы уже закрываем формы, не начинаем повторно.
            if (isClosing) return;

            isClosing = true; // Устанавливаем флаг, чтобы избежать рекурсии

            // Создаем копию коллекции форм, чтобы избежать изменений в процессе перечисления
            var formsToClose = Application.OpenForms.Cast<Form>().ToList();

            // Закрываем все формы
            foreach (Form openForm in formsToClose)
            {
                // Пропускаем текущую форму (это важно, чтобы избежать её закрытия)
                if (openForm != this)
                {
                    openForm.Close(); // Закрываем другие формы
                }
            }

            // Разрешаем закрытие текущей формы
            isClosing = false;
        }

        private async Task<bool> UpdateProgressIfNewSelection(string login, int selectedIndex, int selectedCombobox)
        {
            using (MySqlConnection conn = new MySqlConnection(UserAuthenticator.connectionString))
            {
                // Пытаемся открыть соединение несколько раз (например, до 10 попыток)
                int attempts = 0;
                while (conn.State != ConnectionState.Open && attempts < 10)
                {
                    attempts++;
                    try
                    {
                        // Ожидаем 1 секунду перед следующей попыткой
                        await Task.Delay(1000);
                        await conn.OpenAsync();
                    }
                    catch
                    {
                        // Если не удается подключиться, пробуем снова
                        if (attempts == 10)
                        {
                            MessageBox.Show("Не удалось подключиться к базе данных после нескольких попыток.");
                        }
                    }
                }

                string checkQuery = "SELECT login FROM user_selections WHERE login = @login AND selected_index = @selectedIndex AND selected_combobox = @selectedCombobox";
                MySqlCommand checkCmd = new MySqlCommand(checkQuery, conn);
                checkCmd.Parameters.AddWithValue("@login", login);
                checkCmd.Parameters.AddWithValue("@selectedIndex", selectedIndex);
                checkCmd.Parameters.AddWithValue("@selectedCombobox", selectedCombobox);

                using (MySqlDataReader reader = (MySqlDataReader)await checkCmd.ExecuteReaderAsync())
                {
                    if (reader.HasRows)
                    {
                        // Если запись уже существует, возвращаем false
                        return true;
                    }
                }

                // Если записи нет, добавляем +1 к progress для пользователя с указанным логином
                string updateProgressQuery = "UPDATE users SET progress = progress + 1 WHERE login = @login";
                MySqlCommand updateProgressCmd = new MySqlCommand(updateProgressQuery, conn);
                updateProgressCmd.Parameters.AddWithValue("@login", login);
                await updateProgressCmd.ExecuteNonQueryAsync();

                // Сохраняем выбор пользователя
                string insertSelectionQuery = "INSERT INTO user_selections (login, selected_index, selected_combobox) VALUES (@login, @selectedIndex, @selectedCombobox)";
                MySqlCommand insertCmd = new MySqlCommand(insertSelectionQuery, conn);
                insertCmd.Parameters.AddWithValue("@login", login);
                insertCmd.Parameters.AddWithValue("@selectedIndex", selectedIndex);
                insertCmd.Parameters.AddWithValue("@selectedCombobox", selectedCombobox);
                await insertCmd.ExecuteNonQueryAsync();

                return true;
            }
        }


        private async void MainForm_Load(object sender, EventArgs e)
        {
            label20.Text = "Версия приложения: " + Program.versionPath;
            
                
            if (i < 1)
            {

                label4.Text = "Имя пользователя: " + UserAuthenticator.UserName;
                using (var connection = new MySqlConnection(UserAuthenticator.connectionString))
                {
                    // Пытаемся открыть соединение несколько раз (например, до 10 попыток)
                    int attempts = 0;
                    while (connection.State != ConnectionState.Open && attempts < 10)
                    {
                        attempts++;
                        try
                        {
                            // Ожидаем 1 секунду перед следующей попыткой
                            await Task.Delay(1000);
                            await connection.OpenAsync();
                        }
                        catch
                        {
                            // Если не удается подключиться, пробуем снова
                            if (attempts == 10)
                            {
                                MessageBox.Show("Не удалось подключиться к базе данных после нескольких попыток.");
                                return;
                            }
                        }
                    }
                    Image userPhoto = await GetImageFromDatabaseAsync(); // Асинхронный вызов
                    if (userPhoto != null)
                    {
                        pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
                        pictureBox1.Image = userPhoto; // Установите изображение в PictureBox
                    }
                    else
                    {
                        string imagePath = Path.Combine(Application.StartupPath, "png", "10938.png");

                        if (File.Exists(imagePath))
                        {
                            // Загружаем изображение из файла
                            Image userPhotos = Image.FromFile(imagePath);

                            // Отображаем изображение в PictureBox
                            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
                            pictureBox1.Image = userPhotos;
                        }
                    }

                    // Проверка, был ли уже выбран этот элемент (по логину и выбранному индексу)
                    string checkQuery = "SELECT login FROM user_selections WHERE login = @login";
                    MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);
                    checkCmd.Parameters.AddWithValue("@login", UserAuthenticator.Login);

                    // Выполняем запрос и подсчитываем количество строк
                    int rowCount = 0;
                    using (MySqlDataReader reader = checkCmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            rowCount++;

                        }
                        label6.Text = "Пройдено тем: " + rowCount.ToString() + " / " + "112";

                    }
                    // Проверка, был ли уже выбран этот элемент (по логину и выбранному индексу)
                    string checkQuery2 = "SELECT login FROM user_practice WHERE login = @logina";
                    MySqlCommand checkCmd2 = new MySqlCommand(checkQuery2, connection);
                    checkCmd2.Parameters.AddWithValue("@logina", UserAuthenticator.Login);

                    // Выполняем запрос и подсчитываем количество строк
                    int rowCount2 = 0;
                    using (MySqlDataReader reader2 = checkCmd2.ExecuteReader())
                    {
                        while (reader2.Read())
                        {
                            rowCount2++;

                        }
                        label7.Text = "Пройденно заданий: " + rowCount2.ToString() + " / " + "112";

                    }

                    int rowMax = rowCount + rowCount2;
                    int progressPercentage = (int)((double)rowMax / 224 * 100); // Рассчитываем процент
                    guna2ProgressBar1.Value = progressPercentage > 100 ? 100 : progressPercentage; // Ограничиваем максимум 100
                }

            }
            i += 1;


        }
        public async Task<Image> GetImageFromDatabaseAsync()
        {
            using (var connection = new MySqlConnection(UserAuthenticator.connectionString))
            {
                try
                {
                    await connection.OpenAsync(); // Асинхронное подключение

                    using (var command = new MySqlCommand("SELECT Photo FROM users WHERE login = @login", connection))
                    {
                        command.Parameters.AddWithValue("@login", UserAuthenticator.Login);


                        // Выполнение запроса и получение результата
                        using (var reader = await command.ExecuteReaderAsync()) // Асинхронное выполнение запроса
                        {
                            if (reader.HasRows)
                            {
                                while (await reader.ReadAsync()) // Асинхронное чтение данных
                                {
                                    int photoIndex = reader.GetOrdinal("Photo");

                                    if (!reader.IsDBNull(photoIndex))
                                    {
                                        var photoBytes = (byte[])reader["Photo"];
                                        using (var memoryStream = new MemoryStream(photoBytes))
                                        {
                                            return Image.FromStream(memoryStream);
                                        }
                                    }
                                    else
                                    {
                                        //MessageBox.Show("Фото не найдено.");
                                    }
                                }
                            }
                            else
                            {
                                //MessageBox.Show("Пользователь не найден.");
                            }
                        }
                    }
                }
                catch (MySqlException ex)
                {
                    MessageBox.Show($"Ошибка базы данных: {ex.Message}");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Общая ошибка: {ex.Message}");
                }
            }
            return null;
        }





        private void comboBox_MouseWheel(object sender, MouseEventArgs e)
        {
            HandledMouseEventArgs ev = e as HandledMouseEventArgs;
            if (ev != null)
            {
                ev.Handled = true;
            }
        }
        private async void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (comboBox1.SelectedIndex == 0)
            {
                if (form2Instance != null)
                {
                    string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                    selectIndex = comboBox1.SelectedIndex;
                    selectCombobox = 1;
                    if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                    {
                        string htmlContent = @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC"">      <h1>Введение в C#</h1><h2>Язык C# и платформа .NET</h2>  	<p>На сегодняшний момент язык программирования C# один из самых мощных, быстро развивающихся и востребованных языков в ИТ-отрасли. В настоящий момент на нем пишутся самые различные приложения: от небольших десктопных программок до крупных веб-порталов и веб-сервисов, обслуживающих ежедневно миллионы пользователей.</p> <p>C# уже не молодой язык и как и вся платформа .NET уже прошел большой путь. Первая версия языка вышла вместе с релизом Microsoft Visual Studio .NET в феврале 2002 года. Текущей версией языка является версия C# 12, которая вышла 14 ноября 2023 года вместе с релизом .NET 8.</p> <p>C# является языком с Си-подобным синтаксисом и близок в этом отношении к C++ и Java. Поэтому, если вы знакомы с одним из этих языков, то овладеть C# будет легче.</p> <p>C# является объектно-ориентированным и в этом плане много перенял у Java и С++. Например, C# поддерживает полиморфизм, наследование, перегрузку операторов, статическую типизацию. Объектно-ориентированный подход позволяет решить задачи по построению крупных, но в тоже время гибких, масштабируемых и расширяемых приложений. И C# продолжает активно развиваться, и с каждой новой версией появляется все больше интересных функциональностей.</p> <h3>Роль платформы .NET</h3> <p>Когда говорят C#, нередко имеют в виду технологии платформы .NET (Windows Forms, WPF, ASP.NET, .NET MAUI). И, наоборот, когда говорят .NET, нередко имеют в виду C#. Однако, хотя эти понятия связаны, отождествлять их неверно. Язык C# был создан специально для работы с фреймворком .NET, однако само понятие .NET несколько шире.</p> <p>Как-то Билл Гейтс сказал, что платформа .NET - это лучшее, что создала компания Microsoft. Возможно, он был прав. Фреймворк .NET представляет мощную платформу для создания приложений. Можно выделить следующие ее основные черты:</p> <ul> <li><p><span class=""b"">Поддержка нескольких языков</span>.  Основой платформы является общеязыковая среда исполнения Common Language Runtime (CLR), благодаря чему .NET поддерживает несколько языков: наряду с C# это также VB.NET, C++, F#, а также различные диалекты других языков, привязанные к .NET, например, Delphi.NET. При компиляции код на любом из этих языков компилируется в сборку на общем языке CIL (Common Intermediate Language) - своего рода ассемблер платформы .NET. Поэтому при определенных условиях мы можем сделать отдельные модули одного приложения на отдельных языках.</p></li> <li><p><span class=""b"">Кроссплатформенность</span>. .NET является переносимой платформой (с некоторыми ограничениями). Например,  последняя версия платформы на данный момент - .NET 8 поддерживается на  большинстве современных ОС Windows, MacOS, Linux. Используя различные технологии на платформе .NET, можно разрабатывать приложения на языке C# для самых разных платформ - Windows,  MacOS, Linux, Android, iOS, Tizen.</p></li> <li><p><span class=""b"">Мощная библиотека классов</span>. .NET представляет единую для всех поддерживаемых языков библиотеку классов. И какое бы приложение мы не собирались писать на C# - текстовый редактор, чат или сложный веб-сайт - так или иначе мы задействуем библиотеку классов .NET.</p></li> <li><p><span class=""b"">Разнообразие технологий</span>. Общеязыковая среда исполнения CLR и базовая библиотека классов являются основой для целого стека технологий, которые разработчики могут задействовать при построении тех или иных приложений. Например, для работы с базами данных в этом стеке технологий предназначена технология ADO.NET и Entity Framework Core. Для построения графических приложений с богатым насыщенным интерфейсом - технология WPF и WinUI, для создания более простых графических приложений - Windows Forms. Для разработки кроссплатформенных мобильных и десктопных приложений - Xamarin/MAUI. Для создания веб-сайтов и веб-приложений - ASP.NET и т.д.</p> <p>К этому стоит добавить активной развивающийся и набирающий популяность Blazor - фреймворк, который работает поверх .NET и который позволяет создавать веб-приложения как на стороне сервера, так и на стороне клиента. А в будущем будет поддерживать создание мобильных приложений и, возможно, десктоп-приложений.</p></li> <li><p><span class=""b"">Производительность</span>. Согласно ряду тестов веб-приложения на .NET в ряде категорий сильно опережают веб-приложения, построенные с помощью других технологий. Приложения на .NET в принципе отличаются высокой производительностью.</p></li>  </ul> <p>Также еще следует отметить такую особенность языка C# и фреймворка .NET, как автоматическая сборка мусора. А это значит, что нам в большинстве случаев не придется, в отличие от С++, заботиться об освобождении памяти. Вышеупомянутая общеязыковая среда CLR сама вызовет сборщик мусора и очистит память.</p> <h3>.NET Framework и .NET 8</h3> <p>Стоит отметить, что .NET долгое время развивался премущественно как платформа для Windows под названием .NET Framework. В 2019 вышла последняя версия этой платформы - .NET Framework 4.8. Она больше не развивается</p> <p>С 2014 Microsoft стал развивать альтернативную платформу - .NET Core, которая уже предназначалась для разных платформ и должна была вобрать в себя все возможности устаревшего .NET Framework и добавить новую функциональность. Затем Microsoft последовательно выпустил ряд версий этой платформы: .NET Core 1, .NET Core 2, .NET Core 3, .NET 5. И текущей версией является расматриваемая в этом руководстве платформа .NET 8. Поэтому следует различать .NET Framework, который предназначен преимущественно для Windows, и кросплатформенный .NET 8. В данном руководстве речь будет идти о C# 12 в связке с .NET 8, поскольку это актуальная платформа.</p>  <h3>Управляемый и неуправляемый код</h3> <p>Нередко приложение, созданное на C#, называют <span class=""b"">управляемым кодом</span> (managed code). Что это значит? А это значит, что данное приложение создано на основе платформы .NET и поэтому управляется общеязыковой средой CLR, которая загружает приложение и при необходимости очищает память. Но есть также приложения, например, созданные на языке С++, которые компилируются не в общий язык CIL, как C#, VB.NET или F#, а в обычный машинный код. В этом случае .NET не управляет приложением.</p> <p>В то же время платформа .NET предоставляет возможности для взаимодействия с неуправляемым кодом..</p> <h3>JIT-компиляция</h3> <p>Как выше писалось, код на C# компилируется в приложения или сборки с расширениями exe или dll на языке CIL. Далее при запуске на выполнение подобного приложения происходит JIT-компиляция (Just-In-Time) в машинный код, который затем выполняется. При этом, поскольку наше приложение может быть большим и содержать кучу инструкций, в текущий момент времени будет компилироваться лишь та часть приложения, к которой непосредственно идет обращение. Если мы обратимся к другой части кода, то она будет скомпилирована из CIL в машинный код. При том уже скомпилированная часть приложения сохраняется до завершения работы программы. В итоге это повышает производительность.</p> <p>По сути это все, что вкратце надо знать о платформе .NET и языке C#. А теперь создадим первое приложение.</p>      </div>";
                        form2Instance.LoadHtmlContent(htmlContent);
                        form2Instance.Show();
                        this.Hide();
                    }
                }
            }

        }

        private async void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }     .consoletext {             white-space: pre;             color: #00ff00;         }     .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Структура программы</h2>   <h3>Выполнение программы</h3> <p>Весь код программы на языке C# помещается в файлы с расширением <span class=""b"">.cs</span>. По умолчанию в проекте, который создается в  Visual Studio (а также при использовании .NET CLI) уже есть один файл с кодом C# - файл <span class=""b"">Program.cs</span> со следующим содержимым:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_961348""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// See <a href=""https://aka.ms/new-console-template"">https://aka.ms/new-console-template</a> for more information</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello, World!""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <img alt=""Выполнение программы на языке программирования C#"" src=""./pics/2.14.png""/> <p>Именно код файла <span class=""b"">Program.cs</span> выполняется по умолчанию, если мы запустим проект на выполнение. Но при  необходимости мы также можем добавлять другие файлы с кодом C#.</p> <h3>Инструкции</h3> <p>Базовым строительным блоком программы являются <span class=""b"">инструкции</span> (statement). Инструкция представляет некоторое  действие, например, арифметическую операцию, вызов метода, объявление переменной и присвоение ей значения. В конце каждой инструкции  в C# ставится точка с запятой (;). Данный знак указывает компилятору на конец инструкции. Например, в проекте консольного приложения, который создается по умолчанию, есть такая строка:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_994712""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello, World!""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Данная строка представляет вызов метода <code>Console.WriteLine</code>, который выводит на консоль строку. В данном случае вызов метода является  инструкцией и поэтому завершается точкой с запятой.</p> <p>Набор инструкций может объединяться в блок кода. Блок кода заключается в фигурные скобки, а инструкции помещаются между открывающей и  закрывающей фигурными скобками. Например, изменим код файла <span class=""b"">Program.cs</span> на следующий:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_304221""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">{</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Привет""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Добро пожаловать в C#""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""Блок кода на языке программирования C#"" src=""./pics/2.15.png""/> <p>Здесь блок кода содержит две инструкции. И при выполении этого кода, консоль выведет две строки</p> <div class=""console""><pre class=""consoletext"">Привет Добро пожаловать в C# </pre></div> <p>В данном блоке кода две инструкции, которые выводят на консоль определенную строку.</p> <p>Одни блоки кода могут содержать другие блоки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_524887""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">{</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Первый блок""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Второй блок""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Регистрозависимость</h3> <p>C# является регистрозависимым языком. Это значит, что в зависимости от регистра символов какие-то определенные названия могут представлять разные  классы, методы, переменные и т.д. Например, для вывода на консоль используется метод <span class=""b"">WriteLine</span> - его имя начинается именно с  большой буквы: ""WriteLine"". Если мы вместо ""Console.WriteLine"" напишем ""Console.writeline"", то программа  не скомпилируется, так как данный метод обязательно должен называться ""WriteLine"", а не ""writeline"" или ""WRITELINE"" или как-то иначе.</p> <h3>Комментарии</h3> <p>Важной частью программного кода являются комментарии. Они не являются собственно частью программы, при компиляции они игнорируются.  Тем не менее комментарии делают код программы более понятным, помогая понять те или иные его части.</p> <p> есть два типа комментариев: однострочный и многострочный. Однострочный комментарий размещается на одной строке после двойного слеша  //. А многострочный комментарий заключается между символами /* текст комментария */. Он может размещаться на нескольких строках.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_472794""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">/*</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">       </code><code class=""c# comments"">первая программа на C#,</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">       </code><code class=""c# comments"">которая выводит приветствие на консоль</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">*/</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Привет""</code><code class=""c# plain"">);                </code><code class=""c# comments"">// Выводим строку ""Привет""</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Добро пожаловать в C#""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Выводим строку ""Добро пожаловать в C#""</code></div></div></td></tr></tbody></table></div></div> <h3>Файл проекта</h3> <p>В каждом проекте проекте C# есть файл, который отвечает за общую конфгурацию проекта. По умолчанию этот файл называется <span class=""b"">Название_проекта.csproj</span>.  Итак, откроем данный файл. Для этого либо двойным кликом левой кнопкой мыши нажмем на название проекта, либо нажмем на название проекта правой кнопкой мыши и в появившемся меню выберем пункт  <span class=""b"">Edit Project File</span></p> <img alt=""Файл проекта в C# в Visual Studio"" src=""./pics/2.18.png""/> <p>После этого Visual Studio откроет нам файл проекта, который будет выглядеть следующим образом:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_333674""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Project</code> <code class=""xml color1"">Sdk</code><code class=""xml plain"">=</code><code class=""xml string"">""Microsoft.NET.Sdk""</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;Exe&lt;/</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;</code></div><div class=""line number5 index4 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;net6.0&lt;/</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;</code></div><div class=""line number6 index5 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div><div class=""line number7 index6 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">Project</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Этот файл в виде кода xml определяет конфгурацию проекта и он может содержать множество элементов. Остановлюсь только на двух основных:</p> <ul> <li><p><span class=""b"">OutputType</span>: определяет выходной тип проекта. Это может быть выполняемое приложение в виде файла с расширением  <span class=""b"">exe</span>, которое запускается по нажатию. И также это может быть файл с расширением <span class=""b"">.dll</span> - некоторый набор функциональностей,  который используется другими проектами. По умолчанию здесь установлено значение ""Exe"", что значит, что мы создаем исполняемое приложение.</p></li> <li><p><span class=""b"">TargetFramework</span>: определяет применяемую для компиляции версию фреймворка .NET.  В данном случае это значение ""net6.0"", то есть применяется .NET 6.0.</p></li> </ul> <p>На самых ранних этапах этот файл может не понадобиться, однако впоследствии может потребоваться внести некоторые изменения в конфигурацию, и  тогда может возникнуть потребность в обращении к этому файлу.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Переменные и константы</h2>   <p>Для хранения данных в программе применяются <span class=""b"">переменные</span>. Переменная представляет именнованную область памяти,  в которой хранится значение определенного типа. Переменная имеет тип, имя и значение. Тип определяет, какого рода информацию может хранить переменная.</p> <p>Перед использованием любую переменную надо определить. Синтаксис определения переменной выглядит следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_725822""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">тип имя_переменной;</code></div></div></td></tr></tbody></table></div></div> <p>Вначале идет тип переменной, потом ее имя. В качестве имени переменной может выступать любое произвольное название, которое удовлетворяет следующим требованиям:</p> <ul> <li><p>имя может содержать любые цифры, буквы и символ подчеркивания, при этом первый символ в имени должен быть буквой или символом подчеркивания</p></li> <li><p>в имени не должно быть знаков пунктуации и пробелов</p></li> <li><p>имя не может быть ключевым словом языка C#. Таких слов не так много, и при работе в Visual Studio среда разработки подсвечивает ключевые слова синим цветом.</p></li> </ul> <p>Хотя имя переменой может быть любым, но следует давать переменным описательные имена, которые будут говорить об их предназначении.</p> <p>Например, определим простейшую переменную:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_574446""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае определена переменная name, которая имеет тип <span class=""b"">string</span>. то есть переменная представляет строку. Поскольку определение переменной представляет  собой инструкцию, то после него ставится точка с запятой.</p> <p>При этом следует учитывать, что C# является регистрозависимым языком, поэтому следующие два определения переменных будут представлять две разные переменные:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_393890""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">Name;</code></div></div></td></tr></tbody></table></div></div> <p>После определения переменной можно присвоить некоторое значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_421259""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Так как переменная name представляет тип string, то есть строку, то мы можем присвоить ей строку в двойных кавычках. Причем переменной можно присвоить только то значение,  которое соответствует ее типу.</p> <p>В дальнейшем с помощью имени переменной мы сможем обращаться к той области памяти, в которой хранится ее значение.</p> <p>Также мы можем сразу при определении присвоить переменной значение. Данный прием называется инициализацией:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_614202""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Отличительной чертой переменных является то, что в программе можно многократно менять их значение. Например, создадим небольшую программу,  в которой определим переменную, поменяем ее значение и выведем его на консоль:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_542841""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;  </code><code class=""c# comments"">// определяем переменную и инициализируем ее</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces""> </code> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces""> </code> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">name = </code><code class=""c#string"">""Bob""</code><code class=""c# plain"">;       </code><code class=""c# comments"">// меняем значение переменной</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// Bob</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">Tom Bob </pre> </div> <h3>Константы</h3> <p>Отличительной особенностью переменных является то, что мы можем изменить их значение в процессе работы программы. Но, кроме того, в  C# есть константы. <span class=""b"">Константа</span> должна быть обязательно инициализирована при определении, и после определения значение константы не может быть изменено</p> <p>Константы предназначены для описания таких значений, которые не должны изменяться в программе. Для определения констант используется  ключевое слово <span class=""b"">const</span>, которое указывается перед типом константы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_500948""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">NAME = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;  </code><code class=""c# comments"">// определяем константу</code></div></div></td></tr></tbody></table></div></div> <p>Так, в данном случае определена константа <code>NAME</code>, которая хранит строку ""Tom"". Нередко для название констант используется верхний регистр, но это не более чем условность.</p> <p>При использовании констант надо помнить, что объявить мы их можем только один раз и что к моменту компиляции они должны быть определены. Так, в следующем случае мы получим ошибку, так как  константе не присвоено начальное значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_440432""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">NAME;  </code><code class=""c# comments"">// ! Ошибка - константа NAME не инициализирована</code></div></div></td></tr></tbody></table></div></div> <p>Кроме того, мы ее не сможем изменить в процессе работы программы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_454367""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">NAME = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;  </code><code class=""c# comments"">// определяем константу</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">NAME = </code><code class=""c#string"">""Bob""</code><code class=""c# plain"">;   </code><code class=""c# comments"">// !Ошибка - у констаты нельзя изменить значение</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, если нам надо хранить в программе некоторые данные, но их не следует изменить, они определяются в виде констант. Если же их можно изменять, то они определяются в виде переменных.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Литералы</h2>   <p>Литералы представляют неизменяемые значения (иногда их еще называют константами). Литералы можно передавать переменным в качестве значения.  Литералы бывают логическими, целочисленными, вещественными, символьными и строчными. И отдельный литерал представляет ключевое слово <code>null</code>.</p> <h3>Логические литералы</h3> <p>Есть две логических константы - <span class=""b"">true</span> (истина) и <span class=""b"">false</span> (ложь):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_956105""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# keyword"">true</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# keyword"">false</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h3>Целочисленные литералы</h3> <p>Целочисленные литералы представляют положительные и отрицательные целые числа, например, 1, 2, 3, 4, -7, -109.  Целочисленные литералы могут быть выражены в десятичной, шестнадцатеричной и двоичной форме.</p> <p>С целыми числами в десятичной форме все должно быть понятно, так как они используются в повседневной жизни:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_223384""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(-11);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(5);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(505);</code></div></div></td></tr></tbody></table></div></div> <p>Числа в двоичной форме предваряются символами 0b, после которых идет набор из нулей и единиц:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_284314""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(0b11);        </code><code class=""c# comments"">// 3</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(0b1011);      </code><code class=""c# comments"">// 11</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(0b100001);    </code><code class=""c# comments"">// 33</code></div></div></td></tr></tbody></table></div></div> <p>Для записи числа в шестнадцатеричной форме применяются символы 0x, после которых идет набор символов от 0 до 9 и от A до F, которые собственно представляют число:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_160903""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(0x0A);    </code><code class=""c# comments"">// 10</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(0xFF);    </code><code class=""c# comments"">// 255</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(0xA1);    </code><code class=""c# comments"">// 161</code></div></div></td></tr></tbody></table></div></div> <h3>Вещественные литералы</h3> <p>Вещественные литералы представляют дробные числа. Этот тип литералов имеет две формы. Первая форма - вещественные числа с  фиксированной запятой, при которой дробную часть отделяется от целой части точкой. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_525752""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">3.14</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">100.001</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">-0.38</code></div></div></td></tr></tbody></table></div></div> <p>Также вещественные литералы могут определяться в экспоненциальной форме MEp, где M — мантисса, E - экспонента, которая фактически означает ""*10^"" (умножить на десять в степени),  а p — порядок. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_387422""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(3.2e3);   </code><code class=""c# comments"">// по сути равно 3.2 * 10&lt;sup&gt;3&lt;/sup&gt; = 3200</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(1.2E-1);  </code><code class=""c# comments"">// равно 1.2 * 10&lt;sup&gt;-1&lt;/sup&gt; = 0.12</code></div></div></td></tr></tbody></table></div></div> <h3>Символьные литералы</h3> <p>Символьные литералы представляют одиночные символы. Символы заключаются в одинарные кавычки.</p><p> </p><p>Символьные литералы бывают нескольких видов. Прежде всего это обычные символы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_758167""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c#string"">'2'</code></div><div class=""line number2 index1 alt1""><code class=""c#string"">'A'</code></div><div class=""line number3 index2 alt2""><code class=""c#string"">'T'</code></div></div></td></tr></tbody></table></div></div> <p>Также мы можем передать их вывести на консоль с помощью <code>Console.WriteLine</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_707491""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'2'</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'A'</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'T'</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Специальную группу представляют <span class=""b"">управляющие последовательности</span> Управляющая последовательность представляет символ, перед которым ставится слеш. И данная последовательность интерпретируется определенным образом. Наиболее часто используемые последовательности:</p> <ul> <li><p><code>'\n'</code> - перевод строки</p></li> <li><p><code>'\t'</code> - табуляция</p></li> <li><p><code>'\\'</code> - слеш</p></li> </ul> <p>И если компилятор встретит в тексте последовательность \t, то он будет воспринимать эту последовательность не как слеш и букву t, а как табуляцию - то есть длинный отступ.</p> <p>Также символы могут определяться в виде шестнадцатеричных кодов, также заключенный в одинарные кавычки.</p> <p>Еще один способ определения символов представляет использования шестнадцатеричных кодов ASCII. Для этого в одинарных кавычках указываются символы '\x', после которых  идет шестнадцатеричный код символа из таблицы ASCII. Коды символов из таблицы ASCII можно посмотреть <a href=""http://www.asciitable.com/"" rel=""nofollow"">здесь</a>.</p> <p>Например, литерал '\x78' представляет символ ""x"":</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_917653""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'\x78'</code><code class=""c# plain"">);    </code><code class=""c# comments"">// x</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'\x5A'</code><code class=""c# plain"">);    </code><code class=""c# comments"">// Z</code></div></div></td></tr></tbody></table></div></div> <p>И последний способ определения символьных литералов представляет применение кодов из таблицы символов <a href=""https://unicode-table.com/ru/"" rel=""nofollow"">Unicode</a>.  Для этого в одинарных кавычках указываются символы '\u', после которых идет шестнадцатеричный код Unicode. Например, код  '\u0411' представляет кириллический символ 'Б':</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_15745""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'\u0420'</code><code class=""c# plain"">);    </code><code class=""c# comments"">// Р</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">'\u0421'</code><code class=""c# plain"">);    </code><code class=""c# comments"">// С</code></div></div></td></tr></tbody></table></div></div> <h3>Строковые литералы</h3> <p>Строковые литералы представляют строки. Строки заключаются в двойные кавычки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_598834""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""hello""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""фыва""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""hello word""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Если внутри строки необходимо вывести двойную кавычку, то такая внутренняя кавычка предваряется обратным слешем:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_190067""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Компания \""Рога и копыта\""""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Также в строках можно использовать управляющие последовательности. Например, последовательность '\n' осуществляет перевод на новую строку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_582601""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Привет \nмир""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>При выводе на консоль слово ""мир"" будет перенесено на новую строку:</p> <div class=""console""> <pre class=""consoletext"">Привет мир </pre> </div> <h3>null</h3> <p><span class=""b"">null</span> представляет ссылку, которая не указывает ни на какой объект. То есть по сути отсутствие значения.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Типы данных</h2>   <p>Как и во многих языках программирования, в C# есть своя система типов данных, которая используется для создания переменных.  Тип данных определяет внутреннее представление данных, множество значений, которые может принимать объект, а также допустимые действия, которые можно применять над объектом.</p> <p>В языке C# есть следующие базовые типы данных:</p> <ul> <li> <p><span class=""b"">bool</span>: хранит значение <code>true</code> или <code>false</code> (логические литералы). Представлен системным типом <code>System.Boolean</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_769586""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">alive = </code><code class=""c# keyword"">true</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">isDead = </code><code class=""c# keyword"">false</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">byte</span>: хранит целое число от <code>0</code> до <code>255</code> и занимает 1 байт. Представлен системным типом  <code>System.Byte</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_9142""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">bit1 = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">byte</code> <code class=""c# plain"">bit2 = 102;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">sbyte</span>: хранит целое число от <code>-128</code> до <code>127</code> и занимает 1 байт. Представлен системным типом  <code>System.SByte</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_180272""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">sbyte</code> <code class=""c# plain"">bit1 = -101;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">sbyte</code> <code class=""c# plain"">bit2 = 102;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">short</span>: хранит целое число от <code>-32768</code> до <code>32767</code> и занимает 2 байта. Представлен системным типом  <code>System.Int16</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_191394""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">short</code> <code class=""c# plain"">n1 = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">short</code> <code class=""c# plain"">n2 = 102;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">ushort</span>: хранит целое число от <code>0</code> до <code>65535</code> и занимает 2 байта. Представлен системным типом  <code>System.UInt16</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_425414""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">ushort</code> <code class=""c# plain"">n1 = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ushort</code> <code class=""c# plain"">n2 = 102;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">int</span>: хранит целое число от <code>-2147483648</code> до <code>2147483647</code> и занимает 4 байта. Представлен системным типом  <code>System.Int32</code>. Все целочисленные литералы по умолчанию представляют значения типа int:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_623752""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 0b101;  </code><code class=""c# comments"">// бинарная форма b =5</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">c = 0xFF;   </code><code class=""c# comments"">// шестнадцатеричная форма c = 255</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">uint</span>: хранит целое число от <code>0</code> до <code>4294967295</code> и занимает 4 байта. Представлен системным типом  <code>System.UInt32</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_60612""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">uint</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">uint</code> <code class=""c# plain"">b = 0b101;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">uint</code> <code class=""c# plain"">c = 0xFF;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">long</span>: хранит целое число от <code>–9 223 372 036 854 775 808</code> до <code>9 223 372 036 854 775 807</code> и занимает 8 байт. Представлен системным типом  <code>System.Int64</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_187566""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code> <code class=""c# plain"">a = -10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">long</code> <code class=""c# plain"">b = 0b101;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">long</code> <code class=""c# plain"">c = 0xFF;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">ulong</span>: хранит целое число от <code>0</code> до <code>18 446 744 073 709 551 615</code> и занимает 8 байт. Представлен системным типом  <code>System.UInt64</code></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_191427""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">ulong</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ulong</code> <code class=""c# plain"">b = 0b101;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">ulong</code> <code class=""c# plain"">c = 0xFF;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">float</span>: хранит число с плавающей точкой от <code>-3.4*10<sup>38</sup></code> до <code>3.4*10<sup>38</sup></code> и  занимает 4 байта. Представлен системным типом <code>System.Single</code></p></li> <li><p><span class=""b"">double</span>: хранит число с плавающей точкой от <code>±5.0*10<sup>-324</sup></code> до <code>±1.7*10<sup>308</sup></code> и  занимает 8 байта. Представлен системным типом <code>System.Double</code></p></li> <li><p><span class=""b"">decimal</span>: хранит десятичное дробное число. Если употребляется без десятичной запятой, имеет значение от ±1.0*10<sup>-28</sup> до ±7.9228*10<sup>28</sup>,  может хранить 28 знаков после запятой и занимает 16 байт. Представлен системным типом <code>System.Decimal</code></p></li> <li><p><span class=""b"">char</span>: хранит одиночный символ в кодировке Unicode и занимает 2 байта. Представлен системным типом  <code>System.Char</code>. Этому типу соответствуют символьные литералы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_979647""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">char</code> <code class=""c# plain"">a = </code><code class=""c#string"">'A'</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">char</code> <code class=""c# plain"">b = </code><code class=""c#string"">'\x5A'</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">char</code> <code class=""c# plain"">c = </code><code class=""c#string"">'\u0420'</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">string</span>: хранит набор символов Unicode. Представлен системным типом <code>System.String</code>. Этому типу соответствуют строковые литералы.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_868357""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">hello = </code><code class=""c#string"">""Hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">word = </code><code class=""c#string"">""world""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">object</span>: может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе. Представлен системным типом  <code>System.Object</code>, который является базовым для всех других типов и классов .NET.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_142528""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">object</code> <code class=""c# plain"">a = 22;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">object</code> <code class=""c# plain"">b = 3.14;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">object</code> <code class=""c# plain"">c = </code><code class=""c#string"">""hello code""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> </li> </ul> <p>Например, определим несколько переменных разных типов и выведем их значения на консоль:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_769042""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 33;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">isEmployed = </code><code class=""c# keyword"">false</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">weight = 78.65;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Вес: {weight}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Работает: {isEmployed}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Для вывода данных на консоль здесь применяется интерполяция: перед строкой ставится знак $ и после этого мы можем вводить в строку в фигурных скобках значения переменных.  Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">Имя: Tom Возраст: 33 Вес: 78,65 Работает: False </pre> </div> <h3>Использование суффиксов</h3> <p>При присвоении значений надо иметь в виду следующую тонкость: все вещественные литералы (дробные числа) рассматриваются как значения типа  <span class=""b"">double</span>. И чтобы указать, что дробное число представляет тип <span class=""b"">float</span> или тип <span class=""b"">decimal</span>,  необходимо к литералу добавлять суффикс: F/f - для float и M/m - для decimal.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_686840""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">float</code> <code class=""c# plain"">a = 3.14F;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">float</code> <code class=""c# plain"">b = 30.6f;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">c = 1005.8M;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">d = 334.8m;</code></div></div></td></tr></tbody></table></div></div> <p>Подобным образом все целочисленные литералы рассматриваются как значения типа <span class=""b"">int</span>. Чтобы явным образом указать, что целочисленный литерал представляет значение  типа uint, надо использовать суффикс <span class=""b"">U/u</span>, для типа <span class=""b"">long</span> - суффикс <span class=""b"">L/l</span>, а для типа  <span class=""b"">ulong</span> - суффикс <span class=""b"">UL/ul</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_285144""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">uint</code> <code class=""c# plain"">a = 10U;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">long</code> <code class=""c# plain"">b = 20L;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">ulong</code> <code class=""c# plain"">c = 30UL;</code></div></div></td></tr></tbody></table></div></div> <h3>Использование системных типов</h3> <p>Выше при перечислении всех базовых типов данных для каждого упоминался системный тип. Потому что название встроенного типа по сути представляет собой сокращенное обозначение системного типа. Например, следующие переменные будут эквивалентны по типу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_937844""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">System.Int32 b = 4;</code></div></div></td></tr></tbody></table></div></div> <h3>Неявная типизация</h3> <p>Ранее мы явным образом указывали тип переменных, например, <code>int x;</code>. И компилятор при запуске уже знал, что x хранит целочисленное значение.</p> <p>Однако мы можем использовать и модель неявной типизации:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_107717""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var hello = </code><code class=""c#string"">""Hell to World""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var c = 20;</code></div></div></td></tr></tbody></table></div></div> <p>Для неявной типизации вместо названия типа данных используется ключевое слово <code>var</code>. Затем уже при компиляции компилятор сам выводит  тип данных исходя из присвоенного значения. Так как по умолчанию все целочисленные значения рассматриваются как значения типа  <code>int</code>, то поэтому в итоге переменная c будет иметь тип <code>int</code>. Аналогично переменной <code>hello</code> присваивается строка, поэтому эта переменная будет иметь тип <code>string</code></p> <p>Эти переменные подобны обычным, однако они имеют некоторые ограничения.</p> <p>Во-первых, мы не можем сначала объявить неявно типизируемую переменную, а затем инициализировать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_84021""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// этот код работает</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">a;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">a = 20;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# comments"">// этот код не работает</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">var c;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">c= 20;</code></div></div></td></tr></tbody></table></div></div> <p>Во-вторых, мы не можем указать в качестве значения неявно типизируемой переменной <code>null</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_206466""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// этот код не работает</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var c=</code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Так как значение null, то компилятор не сможет вывести тип данных.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.10.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Консольный ввод-вывод</h2>   <h3>Консольный вывод</h3> <p>Для вывода информации на консоль мы уже использовали встроенный метод <span class=""b"">Console.WriteLine</span>.  То есть, если мы хотим вывести некоторую информацию на консоль, то нам надо передать ее в метод Console.WriteLine:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_558751""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">hello = </code><code class=""c#string"">""Привет мир""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(hello);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Добро пожаловать в C#!""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Пока мир...""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(24.5);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Привет мир! Добро пожаловать в C#! Пока мир... 24,5 </pre> </div> <p>Нередко возникает необходимость вывести на консоль в одной строке значения сразу нескольких переменных. В этом случае мы можем использовать прием, который  называется интерполяцией:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_7222""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 34;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">height = 1.7;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Имя: {name}  Возраст: {age}  Рост: {height}м""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Для встраивания отдельных значений в выводимую на консоль строку используются фигурные скобки, в которые заключается встраиваемое значение.  Это можем значение переменной (<code>{name}</code>) или более сложное выражение (например, операция сложения <code>{4 + 7}</code>). А перед всей строкой ставится знак доллара $.</p> <p>При выводе на консоль вместо помещенных в фигурные скобки выражений будут выводиться их значения:</p> <div class=""console""> <pre class=""consoletext"">Имя: Tom  Возраст: 34  Рост: 1,7м </pre> </div> <p>Есть другой способ вывода на консоль сразу нескольких значений:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_175894""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 34;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">height = 1.7;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Имя: {0}  Возраст: {2}  Рост: {1}м""</code><code class=""c# plain"">, name, height, age);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь мы видим, что строка в <code>Console.WriteLine</code> содержит некие числа в фигурных скобках: {0}, {1}, {2}. Это плейсхолдеры, вместо которых при выводе строки на консоль  будут подставляться некоторые значения. Подставляемые значения указываются после строки через запятую.</p> <p>При этом важен порядок подобных плейсхолдеров. Например, в данном случае после строки первой указана переменная name, потом height и потом age. Поэтому значение переменной name будет вставляться вместо  первого плейсхолдера - {0} (нумерация начинается с нуля), height - вместо {1}, а age - вместо {2}. Поэтому в итоге пи выводе на консоль строка</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_892585""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c#string"">""Имя: {0}  Возраст: {2}  Рост: {1}м""</code></div></div></td></tr></tbody></table></div></div> <p>будет заменена на</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_395594""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c#string"">""Имя: Tom  Возраст: 34  Рост: 1,7м""</code></div></div></td></tr></tbody></table></div></div> <h4>Console.Write</h4> <p>Кроме <code>Console.WriteLine()</code> можно также использовать метод <span class=""b"">Console.Write()</span>, он работает точно так же за тем исключением,  что не добавляет переход на следующую строку, то есть последующий консольный вывод будет выводиться на той же строке.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_928702""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 34;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">height = 1.7;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""Имя: {name}  Возраст: {age}  Рост: {height}м""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h3>Консольный ввод</h3> <p>Кроме вывода информации на консоль мы можем получать информацию с консоли. Для этого предназначен метод <span class=""b"">Console.ReadLine()</span>. Он позволяет получить введенную строку.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_7721""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.Write(</code><code class=""c#string"">""Введите свое имя: ""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = Console.ReadLine();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Привет {name}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае все, что вводит пользователь, с помощью метода Console.ReadLine() передается в переменную name.</p>Пример работы программы:<p></p> <div class=""console""> <pre class=""consoletext"">Введите свое имя: Том Привет Том </pre> </div> <p>Особенностью метода <code>Console.ReadLine()</code> является то, что он может считать информацию с консоли только в виде строки. Кроме того, возможная ситуация, когда для метода  Console.ReadLine не окажется доступных для считывания строк, то есть когда ему нечего считывать, он возвращаает значение <span class=""b"">null</span>, то есть, грубо говоря, фактически отсутствие значения.  И чтобы отразить эту ситуацию мы определяем переменную <code>name</code>, в которую получаем ввод с консоли, как переменную типа <span class=""b"">string?</span>. Здесь <code>string</code> указывает,  что переменная может хранить значения типа string, то есть строки. А знак вопроса <span class=""b"">?</span> указывает, что переменная также может хранить значение <span class=""b"">null</span>, то есть по сути не иметь никакого значения. Далее мы более подробно разберем  <code>null</code> и как с ним работать.</p> <p>Однако, может возникнуть вопрос, как нам быть, если, допустим, мы хотим ввести возраст в переменную типа int или другую информацию  в переменные типа double или decimal? По умолчанию платформа .NET предоставляет ряд методов, которые позволяют преобразовать различные значения к типам int, double и т.д. Некоторые из этих методов:</p> <ul> <li><p><span class=""b"">Convert.ToInt32()</span> (преобразует к типу int)</p></li> <li><p><span class=""b"">Convert.ToDouble()</span> (преобразует к типу double)</p></li> <li><p><span class=""b"">Convert.ToDecimal()</span> (преобразует к типу decimal)</p></li> </ul> <p>Пример ввода значений:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_213663""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.Write(</code><code class=""c#string"">""Введите имя: ""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = Console.ReadLine();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.Write(</code><code class=""c#string"">""Введите возраст: ""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = Convert.ToInt32(Console.ReadLine());</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.Write(</code><code class=""c#string"">""Введите рост: ""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">height = Convert.ToDouble(Console.ReadLine());</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.Write(</code><code class=""c#string"">""Введите размер зарплаты: ""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">salary = Convert.ToDecimal(Console.ReadLine());</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Имя: {name}  Возраст: {age}  Рост: {height}м  Зарплата: {salary}$""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>При вводе важно учитывать текущую операционную систему. В одних культурах разделителем между целой и дробной частью является точка (США, Великобритания...),  в других - запятая (Россия, Германия...). Например, если текущая ОС - русскоязычная, значит, надо вводить дробные числа с разделителем запятой.  Если локализация англоязычная, значит, разделителем целой и дробной части при вводе будет точка.</p> <p>Пример работы программы:</p> <div class=""console""> <pre class=""consoletext"">Введите имя: Том Введите возраст: 25 Введите рост: 1,75 Введите размер зарплаты: 300,67 Имя: Том  Возраст: 25  Рост: 1,75м  Зарплата: 300,67$ </pre> </div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Арифметические операции языка C#</h2>   <p>В C# используется большинство операций, которые применяются и в других языках программирования. Операции представляют определенные действия над операндами -  участниками операции. В качестве операнда может выступать переменной или какое-либо значение (например, число).  Операции бывают унарными (выполняются над одним операндом), бинарными - над двумя операндами и тернарными - выполняются над тремя операндами. Рассмотрим все виды операций.</p> <p>Бинарные арифметические операции:</p> <ul> <li><p><span class=""b"">+</span></p><p>Операция сложения двух чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_158299""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = x + 12; </code><code class=""c# comments"">// 22</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">-</span></p><p>Операция вычитания двух чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_328339""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = x - 6; </code><code class=""c# comments"">// 4</code></div></div></td></tr></tbody></table></div></div></li> <li><p><span class=""b"">*</span></p><p>Операция умножения двух чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_672235""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = x * 5; </code><code class=""c# comments"">// 50</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">/</span></p><p>операция деления двух чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_276877""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = x / 5; </code><code class=""c# comments"">// 2</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">b = 3;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">c = a / b; </code><code class=""c# comments"">// 3.33333333</code></div></div></td></tr></tbody></table></div></div> <p>При делении стоит учитывать, что если оба операнда представляют целые числа, то результат также будет округляться до целого числа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_294737""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">z = 10 /  4; </code><code class=""c# comments"">//результат равен 2</code></div></div></td></tr></tbody></table></div></div> <p>Несмотря на то, что результат операции в итоге помещается в переменную типа double, которая позволяет сохранить дробную часть, но в самой операции участвуют два литерала,  которые по умолчанию рассматриваются как объекты int, то есть целые числа, и результат то же будет целочисленный.</p> <p>Для выхода из этой ситуации необходимо определять литералы или переменные, участвующие в операции, именно как типы double или float:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_712744""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">z = 10.0 /  4.0; </code><code class=""c# comments"">//результат равен 2.5</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">%</span></p><p>Операция получение остатка от целочисленного деления двух чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_878328""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">x = 10.0;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">z = x % 4.0; </code><code class=""c# comments"">//результат равен 2</code></div></div></td></tr></tbody></table></div></div> </li> </ul> <p>Также есть ряд унарных операций, в которых принимает участие один операнд:</p> <ul> <li><p><span class=""b"">++</span></p> <p>Операция инкремента</p> <p>Инкремент бывает префиксным: <code>++x</code> - сначала значение переменной x увеличивается на 1,  а потом ее значение возвращается в качестве результата операции.</p></li> <p>И также существует постфиксный инкремент: <code>x++</code> - сначала значение переменной x возвращается в качестве результата операции,  а затем к нему прибавляется 1.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_65554""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x1 = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z1 = ++x1; </code><code class=""c# comments"">// z1=6; x1=6</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{x1} - {z1}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x2 = 5;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z2 = x2++; </code><code class=""c# comments"">// z2=5; x2=6</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{x2} - {z2}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <li><p><span class=""b"">--</span></p> <p>Операция декремента или уменьшения значения на единицу. Также существует префиксная форма декремента (<code>--x</code>) и  постфиксная (<code>x--</code>).</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_54653""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x1 = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z1 = --x1; </code><code class=""c# comments"">// z1=4; x1=4</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{x1} - {z1}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x2 = 5;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z2 = x2--; </code><code class=""c# comments"">// z2=5; x2=4</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{x2} - {z2}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> </li> </ul> <p>При выполнении сразу нескольких арифметических операций следует учитывать порядок их выполнения. Приоритет операций от наивысшего к низшему:</p> <ol> <li><p>Инкремент, декремент</p></li> <li><p>Умножение, деление, получение остатка</p></li> <li><p>Сложение, вычитание</p></li> </ol> <p>Для изменения порядка следования операций применяются скобки.</p> <p>Рассмотрим набор операций:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_335047""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 3;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 5;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">c = 40;</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">d = c---b*a;    </code><code class=""c# comments"">// a=3  b=5  c=39  d=25</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""a={a}  b={b}  c={c}  d={d}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь мы имеем дело с тремя операциями: декремент, вычитание и умножение. Сначала выполняется декремент переменной c, затем умножение b*a, и в конце вычитание. То есть фактически набор операций выглядел так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_957399""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">d = (c--)-(b*a);</code></div></div></td></tr></tbody></table></div></div> <p>Но с помощью скобок мы могли бы изменить порядок операций, например, следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_720775""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 3;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 5;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">c = 40;</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">d = (c-(--b))*a;    </code><code class=""c# comments"">// a=3  b=4  c=40  d=108</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""a={a}  b={b}  c={c}  d={d}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h3>Ассоциативность операторов</h3> <p>Как выше было отмечено, операции умножения и деления имеют один и тот же приоритет, но какой тогда результат будет в выражении:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_939560""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 10 / 5 * 2;</code></div></div></td></tr></tbody></table></div></div> <p>Стоит нам трактовать это выражение как <code>(10 / 5) * 2</code> или как <code>10 / (5 * 2)</code>? Ведь в зависимости от трактовки  мы получим разные результаты.</p> <p>Когда операции имеют один и тот же приоритет, порядок вычисления определяется ассоциативностью операторов. В зависимости от ассоциативности  есть два типа операторов:</p> <ul> <li><p>Левоассоциативные операторы, которые выполняются слева направо</p></li> <li><p>Правоассоциативные операторы, которые выполняются справа налево</p></li> </ul> <p>Все арифметические операторы являются левоассоциативными, то есть выполняются слева направо. Поэтому выражение <code>10 / 5 * 2</code>  необходимо трактовать как <code>(10 / 5) * 2</code>, то есть результатом будет 4.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }  </style> </head> <body><div class=""item center menC""> <h2>Поразрядные операции</h2>   <p>Особый класс операций представляют поразрядные операции. Они выполняются над отдельными разрядами числа. В этом плане числа рассматриваются в двоичном  представлении, например, 2 в двоичном представлении 10 и имеет два разряда, число 7 - 111 и имеет три разряда.</p> <h3>Логические операции</h3> <ul> <li><p><span class=""b"">&amp;</span>(логическое умножение)</p><p>Умножение производится поразрядно, и если у обоих операндов значения разрядов равно 1,  то операция возвращает 1, иначе возвращается число 0. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_286217""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x1 = 2; </code><code class=""c# comments"">//010</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces""> </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y1 = 5;</code><code class=""c# comments"">//101</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces""> </code><code class=""c# plain"">Console.WriteLine(x1&amp;y1); </code><code class=""c# comments"">// выведет 0</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">            </code> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x2 = 4; </code><code class=""c# comments"">//100</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y2 = 5; </code><code class=""c# comments"">//101</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(x2 &amp; y2); </code><code class=""c# comments"">// выведет 4</code></div></div></td></tr></tbody></table></div></div> <p>В первом случае у нас два числа 2 и 5. 2 в двоичном виде представляет число 010, а 5 - 101. Поразрядно умножим числа (0*1, 1*0, 0*1) и в итоге получим 000.</p> <p>Во втором случае у нас вместо двойки число 4, у которого в первом разряде 1, так же как и у числа 5, поэтому в итоге получим  (1*1, 0*0, 0 *1) = 100, то есть число 4 в десятичном формате.</p></li> <li><p><span class=""b"">|</span> (логическое сложение)</p><p>Похоже на логическое умножение, операция также производится по двоичным разрядам, но теперь возвращается единица,  если хотя бы у одного числа в данном разряде имеется единица. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_589872""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x1 = 2; </code><code class=""c# comments"">//010</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y1 = 5;</code><code class=""c# comments"">//101</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(x1|y1); </code><code class=""c# comments"">// выведет 7 - 111</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">x2 = 4; </code><code class=""c# comments"">//100</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">y2 = 5;</code><code class=""c# comments"">//101</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(x2 | y2); </code><code class=""c# comments"">// выведет 5 - 101</code></div></div></td></tr></tbody></table></div></div></li> <li><p><span class=""b"">^</span> (логическое исключающее ИЛИ)</p><p>Также эту операцию называют XOR, нередко ее применяют для простого шифрования:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_334450""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 45; </code><code class=""c# comments"">// Значение, которое надо зашифровать - в двоичной форме 101101</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">key = 102; </code><code class=""c# comments"">//Пусть это будет ключ - в двоичной форме 1100110</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">encrypt = x ^ key; </code><code class=""c# comments"">//Результатом будет число 1001011 или 75</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Зашифрованное число: {encrypt}""</code><code class=""c# plain"">) ;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">decrypt = encrypt ^ key; </code><code class=""c# comments"">// Результатом будет исходное число 45</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Расшифрованное число: {decrypt}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь опять же производятся поразрядные операции. Если у нас значения текущего разряда у обоих чисел разные, то возвращается 1, иначе возвращается 0:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_353752""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">45 ^ 102 = </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">0101101</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">^</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">1100110</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">=</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">1001011</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">= 75</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, мы получаем из 45 ^ 102 в качестве результата число 75. И  чтобы расшифровать число, мы применяем ту же операцию к результату.</p> <p>Подобным образом можно обменять два положительных числа без использования дополнительной переменной:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_561820""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 9;  </code><code class=""c# comments"">// 1001 </code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 5;  </code><code class=""c# comments"">// 0101</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces""> </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">a = a ^ b;  </code><code class=""c# comments"">// a = 1001 ^ 0101 = 1100 = 12</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">b = a ^ b;  </code><code class=""c# comments"">// b = 12 ^ 5 = 1100 ^ 0101 = 1001 = 9</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">a = a ^ b;  </code><code class=""c# comments"">// a = 12 ^ 9 = 1100 ^ 1001 = 0101 = 5</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""a: {a}""</code><code class=""c# plain"">) ;  </code><code class=""c# comments"">// 5</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""b: {b}""</code><code class=""c# plain"">) ;  </code><code class=""c# comments"">// 9</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">~</span> (логическое отрицание или инверсия)</p><p>Еще одна поразрядная операция, которая инвертирует все разряды: если значение разряда равно 1,  то оно становится равным нулю, и наоборот.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_333968""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 12;                 </code><code class=""c# comments"">// 00001100</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(~x);      </code><code class=""c# comments"">// 11110011   или -13</code></div></div></td></tr></tbody></table></div></div></li> </ul> <h3>Представление отрицательных чисел</h3> <p>Для записи чисел со знаком в C# применяется <span class=""b"">дополнительный код</span> (two’s complement), при котором  старший разряд является знаковым. Если его значение равно 0, то число положительное, и его двоичное представление не отличается  от представления беззнакового числа. Например, 0000 0001 в десятичной системе 1.</p> <p>Если старший разряд равен 1, то мы имеем дело с отрицательным числом. Например, 1111 1111 в десятичной системе представляет -1.  Соответственно, 1111 0011 представляет -13.</p> <p>Чтобы получить из положительного числа отрицательное, его нужно инвертировать и прибавить единицу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_773155""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 12;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = ~x;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">y += 1;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(y);   </code><code class=""c# comments"">// -12</code></div></div></td></tr></tbody></table></div></div> <img alt=""Two complement in C#"" src=""./pics/twoscomplement.png""/> <h3>Операции сдвига</h3> <p>Операции сдвига также производятся над разрядами чисел. Сдвиг может происходить вправо и влево.</p> <ul> <li><p><code>x&lt;&lt;y</code> - сдвигает число x влево на y разрядов. Например, <code>4&lt;&lt;1</code> сдвигает число 4 (которое в двоичном  представлении 100) на один разряд влево, то есть в итоге получается 1000 или число 8 в десятичном представлении.</p></li> <li><p><code>x&gt;&gt;y</code> - сдвигает число x вправо на y разрядов. Например, <code>16&gt;&gt;1</code> сдвигает число 16  (которое в двоичном представлении 10000) на один разряд вправо, то есть в итоге получается 1000 или число 8 в десятичном представлении.</p></li> </ul> <p>Таким образом, если исходное число, которое надо сдвинуть в ту или другую строну, делится на два, то фактически получается умножение или деление на два.  Поэтому подобную операцию можно использовать вместо непосредственного умножения или деления на два. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_582694""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 16; </code><code class=""c# comments"">// в двоичной форме 10000</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 2; </code><code class=""c# comments"">// в двоичной форме</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">c = a &lt;&lt; b; </code><code class=""c# comments"">// Сдвиг числа 10000 влево на 2 разряда, равно 1000000 или 64 в десятичной системе</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Зашифрованное число: {c}""</code><code class=""c# plain"">) ;    </code><code class=""c# comments"">// 64</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">d = a &gt;&gt; b; </code><code class=""c# comments"">// Сдвиг числа 10000 вправо на 2 разряда, равно 100 или 4 в десятичной системе</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Зашифрованное число: {d}""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// 4</code></div></div></td></tr></tbody></table></div></div> <p>При этом числа, которые участвую в операциях, необязательно должны быть кратны 2:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_421666""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 22; </code><code class=""c# comments"">// в двоичной форме 10110</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 2; </code><code class=""c# comments"">// в двоичной форме</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">c = a &lt;&lt; b; </code><code class=""c# comments"">// Сдвиг числа 10110 влево на 2 разряда, равно 1011000 или 88 в десятичной системе</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Зашифрованное число: {c}""</code><code class=""c# plain"">) ;    </code><code class=""c# comments"">// 88</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">d = a &gt;&gt; b; </code><code class=""c# comments"">// Сдвиг числа 10110 вправо на 2 разряда, равно 101 или 5 в десятичной системе</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Зашифрованное число: {d}""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// 5</code></div></div></td></tr></tbody></table></div></div> <h3>Пример практического применения операций</h3> <p>Многие недооценивают поразрядные операции, не понимают, для чего они нужны. Тем не менее они могут помочь в решении ряда задач. Прежде всего они позволяют нам манипулировать  данными на уровне отдельных битов. Один из примеров. У нас есть три числа, которые находятся в диапазоне от 0 до 3:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_315407""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">value1 = 3;  </code><code class=""c# comments"">// 0b0000_0011</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">value2 = 2;  </code><code class=""c# comments"">// 0b0000_0010</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">value3 = 1;  </code><code class=""c# comments"">// 0b0000_0001</code></div></div></td></tr></tbody></table></div></div> <p>Мы знаем, что значения этих чисел не будут больше 3, и нам нужно эти данные максимально сжать. Мы можем три числа сохранить в одно число. И в этом нам помогут поразрядные операции.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_92330""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">value1 = 3;  </code><code class=""c# comments"">// 0b0000_0011</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">value2 = 2;  </code><code class=""c# comments"">// 0b0000_0010</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">value3 = 1;  </code><code class=""c# comments"">// 0b0000_0001</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0b0000_0000;</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// сохраняем в result значения из value1</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">result = result | value1; </code><code class=""c# comments"">// 0b0000_0011</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// сдвигаем разряды в result на 2 разряда влево</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">result = result &lt;&lt; 2;   </code><code class=""c# comments"">// 0b0000_1100</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// сохраняем в result значения из value2</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">result = result | value2;  </code><code class=""c# comments"">// 0b0000_1110</code></div><div class=""line number11 index10 alt2""><code class=""c# comments"">// сдвигаем разряды в result на 2 разряда влево</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">result = result &lt;&lt; 2;   </code><code class=""c# comments"">// 0b0011_1000</code></div><div class=""line number13 index12 alt2""><code class=""c# comments"">// сохраняем в result значения из value3</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">result = result | value3;  </code><code class=""c# comments"">// 0b0011_1001</code></div><div class=""line number15 index14 alt2""> </div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine(result);  </code><code class=""c# comments"">// 57</code></div></div></td></tr></tbody></table></div></div> <p>Разберем этот код. Сначала определяем все сохраняемые числа value1, value2, value3. Для хранения результата определена переменная result, которая по умолчанию равна 0. Для большей наглядности  ей присвоено значение в бинарном формате:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_705388""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0b0000_0000;</code></div></div></td></tr></tbody></table></div></div> <p>Сохраняем первое число в result:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_619550""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">result = result | value1; </code><code class=""c# comments"">// 0b0000_0011</code></div></div></td></tr></tbody></table></div></div> <p>Здесь мы имеем дело с логической операцией поразрядного сложения - если один из соответствующих разрядов равен 1, то результирующий разряд тоже будет равен 1. То есть фактически</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_918352""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">0b0000_0000</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">+</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">0b0000_0011</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">=</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">0b0000_0011</code></div></div></td></tr></tbody></table></div></div> <p>Итак, первое число сохранили в result. Мы будем сохранять числа по порядку. То есть сначала в result будет идти первое число, затем второе и далее третье. Поэтому сдвигаем число result на два разряда влево (наши числа занимают в памяти не более двух разрядов):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_514522""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">result = result &lt;&lt; 2;   </code><code class=""c# comments"">// 0b0000_1100</code></div></div></td></tr></tbody></table></div></div> <p>То есть фактически</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_805179""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">0b0000_0011 &lt;&lt; 2 =</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">0b0000_1100</code></div></div></td></tr></tbody></table></div></div> <p>Далее повторяем логическую операцию сложения, сохраняем второе число:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_303743""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">result = result | value2;  </code><code class=""c# comments"">// 0b0000_1110</code></div></div></td></tr></tbody></table></div></div> <p>что эквивалентно</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_800070""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">0b0000_1100</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">+</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">0b0000_0010</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">=</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">0b0000_1110</code></div></div></td></tr></tbody></table></div></div> <p>Далее повторяем сдвиг на два разряда влево и сохраняем третье число. В итоге мы получим в двоичном представлении число <code>0b0011_1001</code>. В десятично системе это число равно 57.  Но это не имеет значения, потому что нам важны конкретные биты числа. Стоит отметить, что мы сохранили в одно число три числа, и в переменной result еще есть сводобное место.  Причем в реальности не важно, сколько именно битов надо сохранить. В данном случае для примера сохраняем лишь два бита.</p> <p>Для восстановления данных прибегнем к обратному порядку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_649635""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">result = 0b0011_1001</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// обратное получение данных</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">newValue3 = result &amp; 0b000_0011;</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// сдвигаем данные на 2 разряда вправо</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">result = result &gt;&gt; 2;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">newValue2 = result &amp; 0b000_0011;</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// сдвигаем данные на 2 разряда вправо</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">result = result &gt;&gt; 2;</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">newValue1 = result &amp; 0b000_0011;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(newValue1);    </code><code class=""c# comments"">// 3</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine(newValue2);   </code><code class=""c# comments"">// 2</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(newValue3);   </code><code class=""c# comments"">// 1</code></div></div></td></tr></tbody></table></div></div> <p>Получаем числа в порядке, обратном тому, в котором они были сохранены. Поскольку мы знаем, что каждое сохраненное число занимает лишь два разряда, то по сути нам надо получить  лишь последние два бита. Для этого применяем битовую маску <code>0b000_0011</code> и операцию логического умножения, которая возвращает 1, если каждый из двух соответствующих разрядов равен 1.  То есть операция </p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_707794""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">newValue3 = result &amp; 0b000_0011;</code></div></div></td></tr></tbody></table></div></div> <p>эквивалентна</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_662272""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">0b0011_1001</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">*</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">0b0000_0011</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">=</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">0b0000_0001</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, последнее число равно 0b0000_0001 или 1 в десятичной системе</p> <p>Стоит отметить, что если мы точно знаем структуру данных, то мы легко можем составить битовую маску, чтобы получить нужно число:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_232615""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">result = 0b0011_1001;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">recreatedValue1 = (result &amp; 0b0011_0000) &gt;&gt; 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(recreatedValue1);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь получаем первое число, которое, как мы знаем, занимает в числе биты 4 и 5. Для этого применяем умножение на битовую маску 0b0011_0000. И затем сдвигаем число на 4 разряда вправо.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_73330""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">0b0011_1001</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">*</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">0b0011_0000</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">=</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">0b0011_0000</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">&gt;&gt; 4</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">=</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">0b0000_0011</code></div></div></td></tr></tbody></table></div></div> <p>Аналогично, если мы точно знаем структуру, по которой сохраняются данные, то мы могли бы сохранить данные сразу в нужное место в числе result:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_636956""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">value1 = 3;  </code><code class=""c# comments"">// 0b0000_0011</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">value2 = 2;  </code><code class=""c# comments"">// 0b0000_0010</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">value3 = 1;  </code><code class=""c# comments"">// 0b0000_0001</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0b0000_0000;</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// сохраняем в result значения из value1</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">result = result | (value1 &lt;&lt; 4);</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// сохраняем в result значения из value2</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">result = result | (value2 &lt;&lt; 2);</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// сохраняем в result значения из value3</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">result = result | value3;  </code><code class=""c# comments"">// 0b0011_1001</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(result);  </code><code class=""c# comments"">// 57</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Операции присваивания</h2>   <p>Операции присвоения устанавливают значение. В операциях присвоения участвуют два операнда, причем левый операнд может представлять только модифицируемое именованное выражение, например, переменную</p> <p>Как и во многих других языках программирования, в C# имеется базовая операция присваивания <span class=""b"">=</span>, которая присвоивает  значение правого операнда левому операнду:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_35808""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 23;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменной number присваивается число 23. Переменная number представляет левый операнд, которому присваивается значение правого операнда, то есть числа 23.</p> <p>Также можно выполнять множественно присвоение сразу нескольких переменным одновременно:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_88579""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a, b, c;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">a = b = c = 34;</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что операции присвоения имеют низкий приоритет. И вначале будет вычисляться значение правого операнда и только потом будет идти присвоение этого значения левому операнду.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_21427""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a, b, c;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">a = b = c = 34 * 2 / 4; </code><code class=""c# comments"">// 17</code></div></div></td></tr></tbody></table></div></div> <p>Сначала будет вычисляться выражение <code>34 * 2 / 4</code>, затем полученное значение будет присвоено переменным.</p> <p>Кроме базовой операции присвоения в C# есть еще ряд операций:</p> <ul> <li><p><span class=""b"">+=</span>: присваивание после сложения. Присваивает левому операнду сумму левого и правого операндов: выражение  <span class=""b"">A += B</span> равнозначно выражению <span class=""b"">A = A + B</span></p></li> <li><p><span class=""b"">-=</span>: присваивание после вычитания. Присваивает левому операнду разность левого и правого операндов:  <span class=""b"">A -= B</span> эквивалентно <span class=""b"">A = A - B</span></p></li> <li><p><span class=""b"">*=</span>: присваивание после умножения. Присваивает левому операнду произведение левого и правого операндов:  <span class=""b"">A *= B</span> эквивалентно <span class=""b"">A = A * B</span></p></li> <li><p><span class=""b"">/=</span>: присваивание после деления. Присваивает левому операнду частное левого и правого операндов:  <span class=""b"">A /= B</span> эквивалентно <span class=""b"">A = A / B</span></p></li> <li><p><span class=""b"">%=</span>: присваивание после деления по модулю. Присваивает левому операнду остаток от целочисленного деления левого операнда на правый:  <span class=""b"">A %= B</span> эквивалентно <span class=""b"">A = A % B</span></p></li> <li><p><span class=""b"">&amp;=</span>: присваивание после поразрядной конъюнкции. Присваивает левому операнду результат поразрядной конъюнкции его  битового представления с битовым представлением правого операнда: <span class=""b"">A &amp;= B</span> эквивалентно <span class=""b"">A = A &amp; B</span></p></li> <li><p><span class=""b"">|=</span>: присваивание после поразрядной дизъюнкции. Присваивает левому операнду результат поразрядной дизъюнкции его  битового представления с битовым представлением правого операнда: <span class=""b"">A |= B</span> эквивалентно <span class=""b"">A = A | B</span></p></li> <li><p><span class=""b"">^=</span>: присваивание после операции исключающего ИЛИ. Присваивает левому операнду результат операции исключающего ИЛИ его  битового представления с битовым представлением правого операнда: <span class=""b"">A ^= B</span> эквивалентно <span class=""b"">A = A ^ B</span></p></li> <li><p><span class=""b"">&lt;&lt;=</span>: присваивание после сдвига разрядов влево. Присваивает левому операнду результат сдвига его битового представления влево на определенное количество разрядов, равное значению  правого операнда: <span class=""b"">A &lt;&lt;= B</span> эквивалентно <span class=""b"">A = A &lt;&lt; B</span></p></li> <li><p><span class=""b"">&gt;&gt;=</span>: присваивание после сдвига разрядов вправо. Присваивает левому операнду результат сдвига его битового представления вправо на определенное количество разрядов, равное значению  правого операнда: <span class=""b"">A &gt;&gt;= B</span> эквивалентно <span class=""b"">A = A &gt;&gt; B</span></p></li> </ul> <p>Применение операций присвоения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_520598""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">a += 10;        </code><code class=""c# comments"">// 20</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">a -= 4;         </code><code class=""c# comments"">// 16</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">a *= 2;         </code><code class=""c# comments"">// 32</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">a /= 8;         </code><code class=""c# comments"">// 4</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">a &lt;&lt;= 4;      </code><code class=""c# comments"">// 64</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">a &gt;&gt;= 2;      </code><code class=""c# comments"">// 16</code></div></div></td></tr></tbody></table></div></div> <p>Операции присвоения являются правоассоциативными, то есть выполняются справа налево. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_689799""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">c = a += b -= 5;    </code><code class=""c# comments"">// 9</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае выполнение выражения будет идти следующим образом:</p> <ol> <li><p>b -= 5 (6-5=1)</p></li> <li><p>a += (b-=5) (8+1 = 9)</p></li> <li><p>c = (a += (b-=5)) (c = 9)</p></li> </ol>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Преобразования базовых типов данных</h2>   <p>При рассмотрении типов данных указывалось, какие значения может иметь тот или иной тип и сколько байт памяти он может занимать. В прошлой теме  были расмотрены арифметические операции. Теперь применим операцию сложения к данным разных типов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_938040""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">a = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = a + 70;</code></div></div></td></tr></tbody></table></div></div> <p>Результатом операции вполне справедливо является число 74, как и ожидается.</p> <p>Но теперь попробуем применить сложение к двум объектам типа <span class=""b"">byte</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_883560""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">a = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">byte</code> <code class=""c# plain"">b = a + 70;  </code><code class=""c# comments"">// ошибка</code></div></div></td></tr></tbody></table></div></div> <p>Здесь поменялся только тип переменной, которая получает результат сложения - с int на byte. Однако при попытке скомпилировать программу мы получим ошибку на этапе компиляции.  И если мы работаем в Visual Studio, среда подчеркнет вторую строку красной волнистой линией, указывая, что в ней ошибка.</p> <p>При операциях мы должны учитывать диапазон значений, которые может хранить тот или иной тип. Но в данном случае число 74, которое мы ожидаем получить, вполне укладывается  в диапазон значений типа byte, тем не менее мы получаем ошибку.</p> <p>Дело в том, что операция сложения (да и вычитания) возвращает значение типа int, если в операции участвуют целочисленные типы данных с разрядностью меньше  или равно int (то есть типы byte, short, int). Поэтому результатом операции <code>a + 70</code> будет объект, который имеет длину в памяти 4 байта.  Затем этот объект мы пытаемся присвоить переменной b, которая имеет тип byte и в памяти занимает 1 байт.</p> <p>И чтобы выйти из этой ситуации, необходимо применить операцию преобразования типов. <span class=""b"">Операция преобразования</span> типов предполагает указание в скобках того типа, к которому надо преобразовать значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_108297""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">(тип_данных_в_который_надо_преобразовать)значение_для_преобразования;</code></div></div></td></tr></tbody></table></div></div> <p>Так, изменим предыдущий пример, применив операцию преобразования типов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_454583""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">a = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">byte</code> <code class=""c# plain"">b = (</code><code class=""c# keyword"">byte</code><code class=""c# plain"">)(a + 70);</code></div></div></td></tr></tbody></table></div></div> <h3>Сужающие и расширяющие преобразования</h3> <p>Преобразования могут быть сужающие (narrowing) и расширяющие (widening). Расширяющие преобразования расширяют размер объекта в памяти. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_848968""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">a = 4;             </code><code class=""c# comments"">// 0000100</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ushort</code> <code class=""c# plain"">b = a;   </code><code class=""c# comments"">// 000000000000100</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае переменной типа ushort присваивается значение типа byte. Тип byte занимает 1 байт (8 бит),  и значение переменной a в двоичном виде можно представить как:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_524292""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">00000100</code></div></div></td></tr></tbody></table></div></div> <p>Значение типа ushort занимает 2 байта (16 бит). И при присвоении переменной b значение переменной a расширяется до 2 байт</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_174634""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">0000000000000100</code></div></div></td></tr></tbody></table></div></div> <p>То есть значение, которое занимает 8 бит, <span class=""b"">расширяется</span> до 16 бит.</p> <p>Сужающие преобразования, наоборот, сужают значение до типа меньшей разядности. Во втором листинге статьи мы как раз имели дело с сужающими преобразованиями:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_376554""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">ushort</code> <code class=""c# plain"">a = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">byte</code> <code class=""c# plain"">b = (</code><code class=""c# keyword"">byte</code><code class=""c# plain"">) a;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменной b, которая занимает 8 бит, присваивается значение ushort, которое занимает 16 бит. То есть из <code>0000000000000100</code>  получаем <code>00000100</code>. Таким образом, значение сужается с 16 бит (2 байт) до 8 бит (1 байт).</p> <h3>Явные и неявные преобразования</h3> <h4>Неявные преобразования</h4> <p>В случае с расширяющими преобразованиями компилятор за нас выполнял все преобразования данных, то есть преобразования были неявными  (<span class=""b"">implicit conversion</span>). Такие преобразования не вызывают каких-то затруднений. Тем не менее стоит сказать пару слов об общей механике подобных преобразований.</p> <p>Если производится преобразование от безнакового типа меньшей разрядности к безнаковому типу большой разрядности,  то добавляются дополнительные биты, которые имеют значени 0. Это называется <span class=""b"">дополнение нулями</span> или zero extension.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_351262""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">a = 4;             </code><code class=""c# comments"">// 0000100</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ushort</code> <code class=""c# plain"">b = a;   </code><code class=""c# comments"">// 000000000000100</code></div></div></td></tr></tbody></table></div></div> <p>Если производится преобразование к знаковому типу, то битовое представление дополняется нулями, если число положительное,  и единицами, если число отрицательное. Последний разряд числа содержит знаковый бит - 0 для положительных и 1 для  отрицательных чисел. При расширении в добавленные разряды компируется знаковый бит.</p> <p>Рассмотрим преобразование положительного числа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_930689""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">sbyte</code> <code class=""c# plain"">a = 4;            </code><code class=""c# comments"">// 0000100</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">short</code> <code class=""c# plain"">b = a;    </code><code class=""c# comments"">// 000000000000100</code></div></div></td></tr></tbody></table></div></div> <img alt=""Sing bit in conversions in c#"" src=""./pics/2.7.png""/> <p>Преобразование отрицательного числа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_474923""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">sbyte</code> <code class=""c# plain"">a = -4;           </code><code class=""c# comments"">// 1111100</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">short</code> <code class=""c# plain"">b = a;    </code><code class=""c# comments"">// 111111111111100</code></div></div></td></tr></tbody></table></div></div> <img alt=""Sing bit  negative number in conversions in c#"" src=""./pics/2.8.png""/> <h4>Явные преобразования</h4> <p>При явных преобразованиях (<span class=""b"">explicit conversion</span>) мы сами должны применить операцию преобразования (операция <code>()</code>).  Суть операции преобразования типов состоит в том, что перед значением указывается в скобках тип, к которому надо привести данное значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_319307""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">c = (</code><code class=""c# keyword"">byte</code><code class=""c# plain"">)(a+b);</code></div></div></td></tr></tbody></table></div></div> <p>Расширяющие преобразования от типа с меньшей разрядностью к типу с большей разрядностью компилятор проводит неявно. Это могут быть следующие цепочки преобразований:</p> <p><span class=""b"">byte</span> -&gt; <span class=""b"">short</span> -&gt; <span class=""b"">int</span> -&gt; <span class=""b"">long</span> -&gt; <span class=""b"">decimal</span></p> <p><span class=""b"">int</span> -&gt; <span class=""b"">double</span></p> <p><span class=""b"">short</span> -&gt; <span class=""b"">float</span> -&gt; <span class=""b"">double</span></p> <p><span class=""b"">char</span> -&gt; <span class=""b"">int</span></p> <p>Все безопасные автоматические преобразования можно описать следующей таблицей:</p> <table class=""tab""> <tbody><tr class=""tabhead""><td><p>Тип</p></td><td><p>В какие типы безопасно преобразуется</p></td></tr> <tr><td><p>byte</p></td><td><p>short, ushort, int, uint, long, ulong, float, double, decimal</p></td></tr> <tr><td><p>sbyte</p></td><td><p>short, int, long, float, double, decimal</p></td></tr> <tr><td><p>short</p></td><td><p>int, long, float, double, decimal</p></td></tr> <tr><td><p>ushort</p></td><td><p>int, uint, long, ulong, float, double, decimal</p></td></tr> <tr><td><p>int</p></td><td><p>long, float, double, decimal</p></td></tr> <tr><td><p>uint</p></td><td><p>long, ulong, float, double, decimal</p></td></tr> <tr><td><p>long</p></td><td><p>float, double, decimal</p></td></tr> <tr><td><p>ulong</p></td><td><p>float, double, decimal</p></td></tr> <tr><td><p>float</p></td><td><p>double</p></td></tr> <tr><td><p>char</p></td><td><p>ushort, int, uint, long, ulong, float, double, decimal</p></td></tr> </tbody></table> <img alt=""Преобразования типов в c#"" src=""./pics/2.9.png""/> <p>В остальных случаях следует использовать явные преобразования типов.</p> <p>Также следует отметить, что несмотря на то, что и double, и decimal могут хранить дробные данные, а decimal имеет большую разрядность, чем double, но все равно  значение double нужно явно приводить к типу decimal:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_968662""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">a = 4.0;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">b = (</code><code class=""c# keyword"">decimal</code><code class=""c# plain"">)a;</code></div></div></td></tr></tbody></table></div></div> <h3>Потеря точности данных</h3> <p>Рассмотрим другую ситуацию, что будет, например, в следующем случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_282036""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 33;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 600;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">byte</code> <code class=""c# plain"">c = (</code><code class=""c# keyword"">byte</code><code class=""c# plain"">)(a+b);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(c);   </code><code class=""c# comments"">// 121</code></div></div></td></tr></tbody></table></div></div> <p>Результатом будет число 121, так число 633 не попадает в допустимый диапазон для типа byte, и старшие биты будут усекаться. В итоге получится число 121.  Поэтому при преобразованиях надо это учитывать. И мы в данном случае можем либо взять такие числа a и b, которые в сумме дадут число не больше 255,  либо мы можем выбрать вместо byte другой тип данных, например, int.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.2.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Условные выражения</h2>   <p>Отдельный набор операций представляет условные выражения. Такие операции возвращают логическое значение, то есть значение типа <span class=""b"">bool</span>:  <span class=""b"">true</span>, если выражение истинно, и <span class=""b"">false</span>, если выражение ложно. К подобным операциям относятся операции сравнения и логические операции.</p> <h3>Операции сравнения</h3> <p>В операциях сравнения сравниваются два операнда и возвращается значение типа <span class=""b"">bool</span> - <span class=""b"">true</span>, если выражение верно,  и <span class=""b"">false</span>, если выражение неверно.</p> <ul> <li><p><span class=""b"">==</span></p><p>Сравнивает два операнда на равенство. Если они равны, то операция возвращает <span class=""b"">true</span>,  если не равны, то возвращается <span class=""b"">false</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_662531""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">c = a == b; </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div></li> <li><p><span class=""b"">!=</span></p><p>Сравнивает два операнда и возвращает true, если операнды не равны, и false, если они равны.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_279479""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">c = a != b;    </code><code class=""c# comments"">// true</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">d = a!=10;     </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">&lt;</span></p> <p>Операция ""меньше чем"". Возвращает true, если первый операнд меньше второго, и false, если первый операнд больше второго:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_503644""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">c = a &lt; b; </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">&gt;</span></p> <p>Операция ""больше чем"". Сравнивает два операнда и возвращает true, если первый операнд больше второго, иначе возвращает false:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_427419""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">c = a &gt; b;     </code><code class=""c# comments"">// true</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">d = a &gt; 25;    </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">&lt;=</span></p> <p>Операция ""меньше или равно"". Сравнивает два операнда и возвращает true, если первый операнд меньше или равен второму. Иначе возвращает false.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_947044""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">c = a &lt;= b;     </code><code class=""c# comments"">// false</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">d = a &lt;= 25;    </code><code class=""c# comments"">// true</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">&gt;=</span></p> <p>Операция ""больше или равно"". Сравнивает два операнда и возвращает true, если первый операнд больше или равен второму, иначе возвращается false:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_263855""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">c = a &gt;= b;     </code><code class=""c# comments"">// true</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">d = a &gt;= 25;    </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> </li> </ul> <p>Операции &lt;, &gt; &lt;=, &gt;= имеют больший приоритет, чем == и !=.</p> <h3>Логические операции</h3> <p>Также в C# определены логические операторы, которые также возвращают значение типа <span class=""b"">bool</span>. В качестве операндов они принимают значения типа <span class=""b"">bool</span>. Как правило, применяются к отношениям и объединяют несколько операций сравнения.</p> <ul> <li><p><span class=""b"">|</span></p> <p>Операция логического сложения или логическое ИЛИ. Возвращает true, если хотя бы один из операндов возвращает true.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_566650""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x1 = (5 &gt; 6) | (4 &lt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &lt; 6 - true, поэтому возвращается true</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x2 = (5 &gt; 6) | (4 &gt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &gt; 6 - false, поэтому возвращается false</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">&amp;</span></p> <p>Операция логического умножения или логическое И. Возвращает true, если оба операнда одновременно равны true.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_289914""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x1 = (5 &gt; 6) &amp; (4 &lt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &lt; 6 - true, поэтому возвращается false</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x2 = (5 &lt; 6) &amp; (4 &lt; 6); </code><code class=""c# comments"">// 5 &lt; 6 - true, 4 &lt; 6 - true, поэтому возвращается true</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">||</span></p> <p>Операция логического сложения. Возвращает true, если хотя бы один из операндов возвращает true.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_442197""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x1 = (5 &gt; 6) || (4 &lt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &lt; 6 - true, поэтому возвращается true</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x2 = (5 &gt; 6) || (4 &gt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &gt; 6 - false, поэтому возвращается false</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">&amp;&amp;</span></p> <p>Операция логического умножения. Возвращает true, если оба операнда одновременно равны true.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_840827""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x1 = (5 &gt; 6) &amp;&amp; (4 &lt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &lt; 6 - true, поэтому возвращается false</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x2 = (5 &lt; 6) &amp;&amp; (4 &lt; 6); </code><code class=""c# comments"">// 5 &lt; 6 - true, 4 &lt; 6 - true, поэтому возвращается true</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">!</span></p> <p>Операция логического отрицания. Производится над одним операндом и возвращает true, если операнд равен false. Если операнд равен true, то операция возвращает false:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_787631""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">a = </code><code class=""c# keyword"">true</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">b = !a;    </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> </li> <li><p><span class=""b"">^</span></p> <p>Операция исключающего ИЛИ. Возвращает true, если либо первый, либо второй операнд (но не одновременно) равны true, иначе возвращает false</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_507865""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x5 = (5 &gt; 6) ^ (4 &lt; 6); </code><code class=""c# comments"">// 5 &gt; 6 - false, 4 &lt; 6 - true, поэтому возвращается true</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">x6 = (50 &gt; 6) ^ (4 / 2 &lt; 3); </code><code class=""c# comments"">// 50 &gt; 6 - true, 4/2 &lt; 3 - true, поэтому возвращается false</code></div></div></td></tr></tbody></table></div></div> </li> </ul> <p>Здесь у нас две пары операций <code>|</code> и <code>||</code> (а также <code>&amp;</code> и <code>&amp;&amp;</code>) выполняют  похожие действия, однако же они не равнозначны.</p> <p>В выражении <code>z=x|y;</code> будут вычисляться оба значения - x и y.</p><p>В выражении же <code>z=x||y;</code> сначала будет вычисляться значение x,  и если оно равно <code>true</code>, то вычисление значения y уже смысла не имеет, так как у нас в любом случае уже z будет равно <code>true</code>. Значение  y будет вычисляться только в том случае, если x равно <code>false</code></p> <p>То же самое касается пары операций <code>&amp;/&amp;&amp;</code>. В выражении <code>z=x&amp;y;</code> будут вычисляться оба значения - x и y.</p> <p>В выражении же <code>z=x&amp;&amp;y;</code> сначала будет вычисляться значение x,  и если оно равно <code>false</code>, то вычисление значения y уже смысла не имеет, так как у нас в любом случае уже z будет равно <code>false</code>.  Значение y будет вычисляться только в том случае, если x равно <code>true</code></p> <p>Поэтому операции <code>||</code> и <code>&amp;&amp;</code> более удобны в вычислениях, так как позволяют сократить время на вычисление значения выражения, и тем самым повышают  производительность. А операции <code>|</code> и <code>&amp;</code> больше подходят для выполнения поразрядных операций над числами.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Конструкция if..else и тернарная операция</h2>   <p>Условные конструкции - один из базовых компонентов многих языков программирования, которые направляют работу программы по одному из путей  в зависимости от определенных условий. Одной из таких конструкций в языке программирования C# является конструкция <code>if..else</code></p> <p>Конструкция if/else проверяет истинность некоторого условия и в зависимости от результатов проверки выполняет определенный код.</p> <p>Ее простейшая форма состоит из блока <span class=""b"">if</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_603165""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(условие)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">выполняемые инструкции</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После ключевого слова <code>if</code> ставится условие. Условие должно представлять значение типа <span class=""b"">bool</span>.  Это может быть непосредственно значение типа bool или результат условного выражения или другого выражения, которое возвращает значение типа <code>bool</code>.  И если это условие истинно (равно <code>true</code>), то срабатывает код, который помещен далее после условия внутри фигурных скобок.</p> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_744797""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">num1 = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">num2 = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(num1 &gt; num2)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае у нас первое число больше второго, поэтому выражение <code>num1 &gt; num2</code> истинно и возвращает  <code>true</code>, следовательно, управление переходит к строке <code>Console.WriteLine(""Число {num1} больше числа {num2}"");</code></p> <p>Если блок if содержит одну инструкцию, то мы можем его сократить, убрав фигурные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_104176""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">num1 = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">num2 = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(num1 &gt; num2)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// или так</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(num1 &gt; num2) Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Также мы можем соединить сразу несколько условий, используя логические операторы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_970636""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">num1 = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">num2 = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(num1 &gt; num2 &amp;&amp; num1==8)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае блок if будет выполняться, если <code>num1 &gt; num2</code> равно <code>true</code> и <code>num1==8</code> равно <code>true</code>.</p> <h4>Выражение else</h4> <p>Но что, если мы захотим, чтобы при несоблюдении условия также выполнялись какие-либо действия? В этом случае мы можем добавить блок <code>else</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_721754""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">num1 = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">num2 = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(num1 &gt; num2)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">else</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} меньше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Блок <code>else</code> выполняется, если условие после if ложно, то есть равно <code>false</code>. Если блок else содержит толко одну  инструкцию, то оять же мы можем его сократить, убрав фигурные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_647359""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">num1 = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">num2 = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(num1 &gt; num2)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">else</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} меньше числа {num2}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h4>else if</h4> <p>Но в примере выше при сравнении чисел мы можем насчитать три состояния: первое число больше второго, первое число меньше второго и числа равны.  Используя конструкцию <code>else if</code>, мы можем обрабатывать дополнительные условия:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_61392""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">num1 = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">num2 = 6;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(num1 &gt; num2)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} больше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(num1 &lt; num2)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число {num1} меньше числа {num2}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">else</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Число num1 равно числу num2""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При необходимости можно добавить несколько выражений <code>else if</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_657031""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Alex""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(name == </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Вас зовут Tomas""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(name == </code><code class=""c#string"">""Bob""</code><code class=""c# plain"">)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Вас зовут Robert""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(name == </code><code class=""c#string"">""Mike""</code><code class=""c# plain"">)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Вас зовут Michael""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">else</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Неизвестное имя""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h3>Тернарная операция</h3> <p>Тернарную операция также позволяет проверить некоторое условие и в зависимости от его истинности выполнить некоторые действия. Она имеет следующий синтаксис:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_310236""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">[первый операнд - условие] ? [второй операнд] : [третий операнд]</code></div></div></td></tr></tbody></table></div></div> <p>Здесь сразу три операнда. В зависимости от условия тернарная операция возвращает второй или третий операнд: если условие равно <code>true</code>, то  возвращается второй операнд; если условие равно <code>false</code>, то третий. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_216388""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x=3;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y=2;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = x &lt; y ? (x+y) : (x-y);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(z);   </code><code class=""c# comments"">// 1</code></div></div></td></tr></tbody></table></div></div> <p>Здесь первый операнд (то есть условие) представляет выражение <code>x &lt; y</code>. Если оно равно <code>true</code>, то возвращается  второй операнд - <code>(x+y)</code>, то есть результат операции сложения. Если условие равно <code>false</code>, то возвращается  третий операнд - <code>(x-y)</code>.</p> <p>Результат тернарной операции (то есть второй или третий операнд в зависимости от условия) присваивается переменной z.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../practice/1.1.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Циклы</h2>   <p>Циклы являются управляющими конструкциями, позволяя в зависимости от определенных условий выполнять некоторое действие множество раз. В  C# имеются следующие виды циклов:</p> <ul> <li><p>for</p></li> <li><p>foreach</p></li> <li><p>while</p></li> <li><p>do...while</p></li> </ul> <h3>Цикл for</h3> <p>Цикл for имеет следующее формальное определение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_938528""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">([действия_до_выполнения_цикла]; [условие]; [действия_после_выполнения])</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// действия</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Объявление цикла <span class=""b"">for</span> состоит из трех частей. Первая часть объявления цикла - некоторые действия, которые выполняются один раз  до выполнения цикла. Обычно здесь определяются переменные, которые будут использоваться в цикле.</p> <p>Вторая часть - условие, при котором будет выполняться цикл. Пока условие равно <code>true</code>, будет выполняться цикл.</p> <p>И третья часть - некоторые действия, которые выполняются после завершения блока цикла. Эти действия выполняются каждый раз при завершении блока цикла.</p> <p>После объявления цикла в фигурных скобках помещаются сами действия цикла.</p> <p>Рассмотрим стандартный цикл for:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_241630""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1; i &lt; 4; i++)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь первая часть объявления цикла - <code>int i = 1</code> - создает и инициализирует переменную i.</p> <p>Вторая часть - условие <code>i &lt; 4</code>. То есть пока переменная <code>i</code> меньше 4, будет выполняться цикл.</p> <p>И третья часть - действия, выполняемые после завершения действий из блока цикла - увеличение переменной <code>i</code> на единицу.</p> <p>Весь процесс цикла можно представить следующим образом:</p> <ol> <li><p>Определяется переменная <code>int i = 1</code></p></li> <li><p>Проверяется условие <code>i &lt; 4</code>. Оно истинно (так как 1 меньше 4), поэтому выполняется блок цикла, а именно инструкция  <code>Console.WriteLine(i)</code>, которая выводит на консоль значение переменной <code>i</code></p></li> <li><p>Блок цикла закончил выполнение, поэтому выполняется треться часть объявления цикла - <code>i++</code>. После этого переменная <code>i</code> будет равна 2.</p></li> <li><p>Снова проверяется условие <code>i &lt; 4</code>. Оно истинно (так как 2 меньше 4), поэтому опять выполняется блок цикла -  <code>Console.WriteLine(i)</code></p></li> <li><p>Блок цикла закончил выполнение, поэтому снова выполняется выражение <code>i++</code>. После этого переменная <code>i</code> будет равна 3.</p></li> <li><p>Снова проверяется условие <code>i &lt; 4</code>. Оно истинно (так как 3 меньше 4), поэтому опять выполняется блок цикла -  <code>Console.WriteLine(i)</code></p></li> <li><p>Блок цикла закончил выполнение, поэтому снова выполняется выражение <code>i++</code>. После этого переменная <code>i</code> будет равна 4.</p></li> <li><p>Снова проверяется условие <code>i &lt; 4</code>. Теперь оно возвражает <code>false</code>, так как значение переменной i НЕ меньше 4,  поэтому цикл завершает выполнение. Далее уже выполняется остальная часть программы, которая идет после цикла</p></li></ol> <p>В итоге блок цикла сработает 3 раза, пока значение i не станет равным 4. И каждый раз это значение будет увеличиваться на 1. Однократное выполнение блока цикла  называется <span class=""b"">итерацией</span>. Таким образом, здесь цикл выполнит три итерации. Результат работы программы:</p> <div class=""console""><pre class=""consoletext"">1 2 3 </pre></div> <p>Если блок цикла <code>for</code> содержит одну инструкцию, то мы можем его сократить, убрав фигурные свобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_452409""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1; i &lt; 4; i++)</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// или так</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1; i &lt; 4; i++) Console.WriteLine(i);</code></div></div></td></tr></tbody></table></div></div> <p>При этом необязательно именно в первой части цикла объявлять переменную, а в третий части изменять ее значение - это могут быть любые действия. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_496856""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var i = 1;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(Console.WriteLine(</code><code class=""c#string"">""Начало выполнения цикла""</code><code class=""c# plain"">); i &lt; 4; Console.WriteLine($</code><code class=""c#string"">""i = {i}""</code><code class=""c# plain"">))</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">i++;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь опять же цикл срабатывает, пока переменная i меньше 4, только приращение переменной i происходит в блоке цикла. Консольный вывод данной программы:</p> <div class=""console""><pre class=""consoletext"">Начало выполнения цикла i = 2 i = 3 i = 4 </pre></div> <p>Нам необязательно указывать все условия при объявлении цикла. Например, мы можем написать так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_340853""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(; ;)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""i = {i}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">i++;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Формально определение цикла осталось тем же, только теперь блоки в определении у нас пустые: <code>for (; ;)</code>. У нас нет  инициализированной переменной, нет условия, поэтому цикл будет работать вечно - бесконечный цикл.</p> <p>Мы также можем опустить ряд блоков:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_422040""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(; i&lt;4;)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""i = {i}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">i++;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Этот пример по сути эквивалентен первому примеру: у нас также есть переменная-счетчик, только определена она вне цикла. У нас есть условие выполнения цикла.  И есть приращение переменной уже в самом блоке for.</p> <p>Также стоит отметить, что можно определять несколько переменных в объявлении цикла:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_818028""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1, j = 1; i &lt; 10; i++, j++)</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{i * j}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в первой части объявления цикла определяются две переменных: i и j. Цикл выполняется, пока i не будет равна 10. После каждой итерации  переменые i и j увеличиваются на единицу. Консольный вывод программы:</p> <div class=""console""><pre class=""consoletext"">1 4 9 16 25 36 49 64 81 </pre></div> <h3>Цикл do..while</h3> <p>В цикле do сначала выполняется код цикла, а потом происходит проверка условия в инструкции while. И пока это условие истинно,  цикл повторяется.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_180089""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">do</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">действия цикла</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">while</code> <code class=""c# plain"">(условие)</code></div></div></td></tr></tbody></table></div></div> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_723290""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 6;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">do</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">i--;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">while</code> <code class=""c# plain"">(i &gt; 0);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь код цикла сработает 6 раз, пока i не станет равным нулю. Но важно отметить, что цикл do гарантирует хотя бы единократное выполнение действий,  даже если условие в инструкции while не будет истинно. То есть мы можем написать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_194570""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = -1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">do</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">i--;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">while</code> <code class=""c# plain"">(i &gt; 0);</code></div></div></td></tr></tbody></table></div></div> <p>Хотя у нас переменная i меньше 0, цикл все равно один раз выполнится.</p> <h3>Цикл while</h3> <p>В отличие от цикла do цикл <span class=""b"">while</span> сразу проверяет истинность некоторого условия, и если условие истинно, то код цикла выполняется:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_388885""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">while</code> <code class=""c# plain"">(условие)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">действия цикла</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_950125""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 6;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">while</code> <code class=""c# plain"">(i &gt; 0)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">i--;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Цикл foreach</h3> <p>Цикл foreach предназначен для перебора набора или коллекции элементов. Его общее определение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_911168""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(тип_данных переменная </code><code class=""c# keyword"">in</code> <code class=""c# plain"">коллекция)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// действия цикла</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После оператора <code>foreach</code> в скобках сначала идет определение переменной. Затем ключевое слово <span class=""b"">in</span> и далее коллекция,  элементы которой надо перебрать.</p> <p>При выполнении цикл последовательно перебирает элементы коллекции и помещает их в переменную, и таким образом в блоке цикла мы можем выполнить с ними некоторые действия.</p> <p>Например, возьмем строку. Строка по сути - это коллекция символов. И .NET позволяет перебрать все элементы строки - ее символы с помощью цикла <span class=""b"">foreach</span>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_646091""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">char</code> <code class=""c# plain"">c </code><code class=""c# keyword"">in</code> <code class=""c#string"">""Tom""</code><code class=""c# plain"">)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(c);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь цикл foreach пробегается по всем символам строки ""Tom"" и каждый символ помещает в символьную переменную <code>c</code>. В блоке цикла  значение переменной <code>c</code> выводится на консоль. Поскольку в строке ""Tom"" три символа, то цикл выполнится три раза. Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">T o m</pre> </div> <p>Стоит отметить, что переменная, которая определяется в объявлении цикла, должна по типу соответствовать типу элементов перебираемой коллекции. Так, элементы строки - значения типа  <code>char</code> - символы. Поэтому переменная <code>c</code> имеет тип <code>char</code>. Однако в реальности не всегда бывает очевидно, какой тип представляют  элементы коллекции. В этом случае мы можем определить переменную с помощью оператора <span class=""b"">var</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_689834""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var c </code><code class=""c# keyword"">in</code> <code class=""c#string"">""Tom""</code><code class=""c# plain"">)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(c);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В дальнейшем мы подробнее рассмотрим, что представляют собой коллекции в .NET и какие именно коллекции можно перебирать с помощью цикла <code>foreach</code>.</p> <h3>Операторы continue и break</h3> <p>Иногда возникает ситуация, когда требуется выйти из цикла, не дожидаясь его завершения. В этом случае мы можем воспользоваться оператором  <span class=""b"">break</span>.</p> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_139534""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; 9; i++)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(i == 5)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Хотя в условии цикла сказано, что цикл будет выполняться, пока счетчик i не достигнет значения 9, в реальности цикл сработает 5 раз.  Так как при достижении счетчиком i значения 5, сработает оператор break, и цикл завершится.</p> <div class=""console""> <pre class=""consoletext"">0 1 2 3 4 </pre> </div> <p>Теперь поставим себе другую задачу. А что если мы хотим, чтобы при проверке цикл не завершался, а просто пропускал текущую итерацию.  Для этого мы можем воспользоваться оператором <span class=""b"">continue</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_531152""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; 9; i++)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(i == 5)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">continue</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае цикл, когда дойдет до числа 5, которое не удовлетворяет условию проверки, просто пропустит это число и перейдет к следующей итерации:</p> <div class=""console""> <pre class=""consoletext"">0 1 2 3 4 6 7 8 </pre> </div> <p>Стоит отметить, что операторы <code>break</code> и <code>continue</code> можно применять в любом типе циклов.</p> <h3>Вложенные циклы</h3> <p>Одни циклы могут быть вложенными в другие. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_663150""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 1; i &lt; 10; i++)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">j = 1; j &lt; 10; j++)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""{i * j} \t""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае цикл <code>for (int i = 1; i &lt; 10; i++)</code> выполняется 9 раз, то есть имеет 9 итераций. Но в рамках каждой итерации  выполняется девять раз вложенный цикл <code>for (int j = 1; j &lt; 10; j++)</code>. В итоге данная программа выведет таблицу умножения.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.3.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> <li><a href=""../practice/1.2.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Массивы</h2>   <p>Массив представляет набор однотипных данных. Объявление массива похоже на объявление переменной за тем исключением, что после указания типа ставятся квадратные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_256181""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">тип_переменной[] название_массива;</code></div></div></td></tr></tbody></table></div></div> <p>Например, определим массив целых чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_342244""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers;</code></div></div></td></tr></tbody></table></div></div> <p>После определения переменной массива мы можем присвоить ей определенное значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_332945""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[4];</code></div></div></td></tr></tbody></table></div></div> <p>Здесь вначале мы объявили массив nums, который будет хранить данные типа <code>int</code>. Далее используя операцию <code>new</code>,  мы выделили память для 4 элементов массива: <code>new int[4]</code>. Число 4 еще называется <span class=""b"">длиной массива</span>.  При таком определении все элементы получают значение по умолчанию, которое предусмотренно для их типа. Для типа int значение по умолчанию - 0.</p> <p>Также мы сразу можем указать значения для этих элементов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_828127""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums2 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[4] { 1, 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums3 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2, 3, 5 };</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums4 = </code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3, 5 };</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums5 = { 1, 2, 3, 5 };</code></div></div></td></tr></tbody></table></div></div> <p>Все перечисленные выше способы будут равноценны.</p> <p>Подобным образом можно определять массивы и других типов, например, массив значений типа <code>string</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_477483""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c#string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c#string"">""Bob""</code> <code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Начиная с версии <span class=""b"">C# 12</span> для определения массивов можно использовать <span class=""b"">выражения коллекций</span>, которые предполагают  заключение элементов массива в квадратные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_701121""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums1 = [ 1, 2, 3, 5 ];</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums2 = [];   </code><code class=""c# comments"">// пустой массив</code></div></div></td></tr></tbody></table></div></div> <h3>Индексы и получение элементов массива</h3> <p>Для обращения к элементам массива используются <span class=""b"">индексы</span>. Индекс представляет номер элемента в массиве, при этом нумерация начинается с  нуля, поэтому индекс первого элемента будет равен 0, индекс четвертого элемента - 3.</p> <p>Используя индексы, мы можем получить элементы массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_764111""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// получение элемента массива</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(numbers[3]);  </code><code class=""c# comments"">// 5</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// получение элемента массива в переменную</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">var n = numbers[1];     </code><code class=""c# comments"">// 2</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(n);  </code><code class=""c# comments"">// 2</code></div></div></td></tr></tbody></table></div></div> <p>Также мы можем изменить элемент массива по индексу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_633920""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// изменим второй элемент массива</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">numbers[1] = 505;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(numbers[1]);  </code><code class=""c# comments"">// 505</code></div></div></td></tr></tbody></table></div></div> <p>И так как у нас массив определен только для 4 элементов, то мы не можем обратиться, например, к шестому элементу.  Если мы так попытаемся сделать, то мы получим ошибку во время выполнения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_21739""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(numbers[6]);  </code><code class=""c# comments"">// ! Ошибка - в массиве только 4 элемента</code></div></div></td></tr></tbody></table></div></div> <h3>Свойство Length и длина массива</h3> <p>каждый массив имеет свойство <span class=""b"">Length</span>, которое хранит длину массива. Например, получим длину выше созданного массива numbers:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_633442""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(numbers.Length);  </code><code class=""c# comments"">// 4</code></div></div></td></tr></tbody></table></div></div> <p>Для получения длины массива после названия массива через точку указывается свойство <code>Length</code>: <code>numbers.Length</code>.</p> <h3>Получение элементов с конца массива</h3> <p>Благодаря наличию свойства <code>Length</code>, мы можем вычислить индекс последнего элемента массива - это длина массива - 1. Например, если длина массива - 4 (то есть  массив имеет 4 элемента), то индекс последнего элемента будет равен 3. И, используя свойство <code>Length</code>, мы можем легко получить элементы с конца массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_383005""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 5};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(numbers[numbers.Length - 1]);  </code><code class=""c# comments"">// 5 - первый с конца или последний элемент</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(numbers[numbers.Length - 2]);  </code><code class=""c# comments"">// 3 - второй с конца или предпоследний элемент</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(numbers[numbers.Length - 3]);  </code><code class=""c# comments"">// 2 - третий элемент с конца</code></div></div></td></tr></tbody></table></div></div> <p>Однако при подобном подходе выражения типа <code>numbers.Length - 1</code>, смысл которых состоит в том, чтобы получить какой-то определенный элемент с конца массива,  утяжеляют код. И, начиная, с версии C# 8.0 в язык был добавлен специальный оператор <span class=""b"">^</span>,  с помощью которого можно задать индекс относительно конца коллекции.</p> <p>Перепишем предыдущий пример, применяя оператор <span class=""b"">^</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_496488""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 5};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(numbers[^1]);  </code><code class=""c# comments"">// 5 - первый с конца или последний элемент</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(numbers[^2]);  </code><code class=""c# comments"">// 3 - второй с конца или предпоследний элемент</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(numbers[^3]);  </code><code class=""c# comments"">// 2 - третий элемент с конца</code></div></div></td></tr></tbody></table></div></div> <h3>Перебор массивов</h3> <p>Для перебора массивов мы можем использовать различные типы циклов. Например, цикл <span class=""b"">foreach</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_575925""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(i);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в качестве контейнера выступает массив данных типа <code>int</code>. Поэтому мы объявляем переменную с типом <code>int</code></p> <p>Подобные действия мы можем сделать и с помощью цикл for:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_45397""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; numbers.Length; i++)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(numbers[i]);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В то же время цикл <span class=""b"">for</span> более гибкий по сравнению с <span class=""b"">foreach</span>. Если <span class=""b"">foreach</span> последовательно извлекает элементы контейнера и только для чтения,  то в цикле for мы можем перескакивать на несколько элементов вперед в зависимости от приращения счетчика, а также можем изменять элементы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_773431""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; numbers.Length; i++)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">numbers[i] = numbers[i] * 2;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(numbers[i]);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также можно использовать и другие виды циклов, например, <code>while</code>:</p> <div><div class=""syntaxhighlighter c"" id=""highlighter_579465""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c color1 bold"">int</code><code class=""c plain"">[] numbers = { 1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c color1 bold"">int</code> <code class=""c plain"">i = 0;</code></div><div class=""line number3 index2 alt2""><code class=""c keyword bold"">while</code><code class=""c plain"">(i &lt; numbers.Length)</code></div><div class=""line number4 index3 alt1""><code class=""c plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c spaces"">    </code><code class=""c plain"">Console.WriteLine(numbers[i]);</code></div><div class=""line number6 index5 alt1""><code class=""c spaces"">    </code><code class=""c plain"">i++;</code></div><div class=""line number7 index6 alt2""><code class=""c plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Многомерные массивы</h3> <p>Массивы характеризуются таким понятием как <span class=""b"">ранг</span> или количество измерений. Выше мы рассматривали  массивы, которые имеют одно измерение (то есть их ранг равен 1) - такие массивы можно представлять в виде ряда (строки или столбца) элемента.  Но массивы также бывают многомерными. У таких массивов количество измерений (то есть ранг) больше 1.</p> <p>Массивы которые имеют два измерения (ранг равен 2) называют двухмерными. Например, создадим одномерный и двухмерный массивы, которые имеют одинаковые элементы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_277929""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums1 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 0, 1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums2 = { { 0, 1, 2 }, { 3, 4, 5 } };</code></div></div></td></tr></tbody></table></div></div> <p>Визуально оба массива можно представить следующим образом:</p> <h5>Одномерный массив nums1</h5> <table border=""1"" cellpadding=""4""><tbody><tr><td><p>0</p></td><td><p>1</p></td><td><p>2</p></td><td><p>3</p></td><td><p>4</p></td><td><p>5</p></td></tr></tbody></table> <h5>Двухмерный массив nums2</h5> <table border=""1"" cellpadding=""4""><tbody><tr><td><p>0</p></td><td><p>1</p></td><td><p>2</p></td></tr> <tr><td><p>3</p></td><td><p>4</p></td><td><p>5</p></td></tr></tbody></table> <p>Поскольку массив nums2 двухмерный, он представляет собой простую таблицу. Все возможные способы определения двухмерных массивов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_532044""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums2 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[2, 3];</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums3 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[2, 3] { { 0, 1, 2 }, { 3, 4, 5 } };</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums4 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[,] { { 0, 1, 2 }, { 3, 4, 5 } };</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums5 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">[,]{ { 0, 1, 2 }, { 3, 4, 5 } };</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] nums6 = { { 0, 1, 2 }, { 3, 4, 5 } };</code></div></div></td></tr></tbody></table></div></div> <p>Массивы могут иметь и большее количество измерений. Объявление трехмерного массива могло бы выглядеть так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_95494""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,,] nums3 = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[2, 3, 4];</code></div></div></td></tr></tbody></table></div></div> <p>Соответственно могут быть и четырехмерные массивы и массивы с большим количеством измерений. Но на практике  обычно используются одномерные и двухмерные массивы.</p> <p>Определенную сложность может представлять перебор многомерного массива. Прежде всего надо учитывать, что длина такого массива - это совокупное количество элементов.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_140356""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] numbers = { { 1, 2, 3 }, { 4, 5, 6 }};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""{i} ""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае длина массива numbers равна 6. И цикл foreach выводит все элементы массива в строку:</p> <div class=""console""><pre class=""consoletext"">1 2 3 4 5 6</pre></div> <p>Но что если мы хотим отдельно пробежаться по каждой строке в таблице? В этом случае надо получить количество элементов в размерности.  В частности, у каждого массива есть метод <span class=""b"">GetUpperBound(номер_размерности)</span>, который возвращает индекс последнего  элемента в определенной размерности. И если мы говорим непосредственно о двухмерном массиве, то первая размерность (с индексом 0)  по сути это и есть таблица. И с помощью выражения</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_110014""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">numbers.GetUpperBound(0) + 1</code></div></div></td></tr></tbody></table></div></div> <p>можно получить количество строк таблицы, представленной двухмерным массивом. А через</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_965363""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">numbers.Length / количество_строк</code></div></div></td></tr></tbody></table></div></div> <p>можно получить количество элементов в каждой строке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_113174""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] numbers = { { 1, 2, 3 }, { 4, 5, 6 }};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">rows = numbers.GetUpperBound(0) + 1;    </code><code class=""c# comments"">// количество строк</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">columns = numbers.Length / rows;        </code><code class=""c# comments"">// количество столбцов</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// или так</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// int columns = numbers.GetUpperBound(1) + 1;</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; rows; i++)</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">j = 0; j &lt; columns; j++)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""{numbers[i, j]} \t""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine();</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <div class=""console""> <pre class=""consoletext"">1	2	3 4	5	6 </pre> </div> <h3>Массив массивов</h3> <p>От многомерных массивов надо отличать <span class=""b"">массив массивов</span> или так называемый ""зубчатый массив"":</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_884368""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[][] nums = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[3][];</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">nums[0] = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[2] { 1, 2 };          </code><code class=""c# comments"">// выделяем память для первого подмассива</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">nums[1] = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[3] { 1, 2, 3 };       </code><code class=""c# comments"">// выделяем память для второго подмассива</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">nums[2] = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[5] { 1, 2, 3, 4, 5 }; </code><code class=""c# comments"">// выделяем память для третьего подмассива</code></div></div></td></tr></tbody></table></div></div> <p>Здесь две группы квадратных скобок указывают, что это <span class=""b"">массив массивов</span>, то есть такой массив, который в свою очередь содержит в себе  другие массивы. Причем длина массива указывается только в первых квадратных скобках, все последующие квадратные скобки должны быть пусты:  <code>new int[3][]</code>. В данном случае у нас массив nums содержит три массива. Причем размерность каждого из этих массивов может не совпадать.</p> <p>Альтернативное определение массива массивов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_792038""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[][] numbers = { </code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2 }, </code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2, 3 }, </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2, 3, 4, 5 } </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <h5>Зубчатый массив nums</h5> <table border=""1"" cellpadding=""4""><tbody> <tr><td><p>1</p></td><td><p>2</p></td></tr> <tr><td><p>1</p></td><td><p>2</p></td><td><p>3</p></td></tr> <tr><td><p>1</p></td><td><p>2</p></td><td><p>3</p></td><td><p>4</p></td><td><p>5</p></td></tr> </tbody></table> <p>Используя вложенные циклы, можно перебирать зубчатые массивы. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_569344""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[][] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[3][];</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">numbers[0] = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2 };</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">numbers[1] = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2, 3 };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">numbers[2] = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2, 3, 4, 5 };</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] row </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">row)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""{number} \t""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine();</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# comments"">// перебор с помощью цикла for</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i&lt;numbers.Length;i++)</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">j =0; j&lt;numbers[i].Length; j++)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""{numbers[i][j]} \t""</code><code class=""c# plain"">);</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine();</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Основные понятия массивов</h3> <p>Суммируем основные понятия массивов:</p> <ul> <li><p><span class=""b"">Ранг</span> (rank): количество измерений массива</p></li> <li><p><span class=""b"">Длина измерения</span> (dimension length): длина отдельного измерения массива</p></li> <li><p><span class=""b"">Длина массива</span> (array length): количество всех элементов массива</p></li> </ul> <p>Например, возьмем массив</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_423493""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[,] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[3, 4];</code></div></div></td></tr></tbody></table></div></div> <p>Массив numbers двухмерный, то есть он имеет два измерения, поэтому его ранг равен 2. Длина первого измерения - 3, длина второго измерения - 4. Длина массива (то есть общее количество элементов) - 12.</p> <p>Примеры массивов:</p> <img alt=""Массивы в языке C#"" src=""./pics/array.png""/> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.8.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> <li><a href=""../practice/1.3.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Задачи с массивами</h2>   <p>Познакомившись с циклами, переменными, условными конструкциями и массивами, рассмотрим несколько задач для работы с массивами.</p> <h3>Количество положительных чисел</h3> <p>Найдем количество положительных чисел в массиве:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_231400""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { -4, -3, -2, -1, 0, 1, 2, 3, 4 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code><code class=""c# plain"">(number &gt; 0)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">result++;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число элементов больше нуля: {result}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь создаем вспомогательную переменную <code>result</code>, которая будет содержать количество положительных чисел. В цикле прохожим по массиву и, если его элемент больше нуля,  добавляем к переменной <code>result</code> единицу.</p> <h3>Инверсия массива</h3> <p>Вторая задача - инверсия массива, то есть переворот его в обратном порядке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_627392""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { -4, -3, -2, -1,0, 1, 2, 3, 4 };</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">            </code> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">n = numbers.Length; </code><code class=""c# comments"">// длина массива</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">k = n / 2;          </code><code class=""c# comments"">// середина массива</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">temp;               </code><code class=""c# comments"">// вспомогательный элемент для обмена значениями</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">for</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i=0; i &lt; k; i++)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">temp = numbers[i];</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">numbers[i] = numbers[n - i - 1];</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">numbers[n - i - 1] = temp;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c#string"">""{i} \t""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку нам надо изменять элементы массива, то для этого используется цикл for. Алгоритм решения задачи подразумевает перебор элементов до середины массива,  которая в программе представлена переменной k, и обмен значений элемента, который имеет индекс i, и элемента с индексом n-i-1.</p> <h3>Программа сортировки массива</h3> <p>Теперь возьмем задачу посложнее - простейшую сортировку массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_788633""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums = { 54, 7, -41, 2, 4, 2, 89, 33, -5, 12 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// сортировка</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">temp;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; nums.Length - 1; i++)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">j = i + 1; j &lt; nums.Length; j++)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(nums[i] &gt; nums[j])</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">temp = nums[i];</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">nums[i] = nums[j];</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">nums[j] = temp;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""> </div><div class=""line number18 index17 alt1""><code class=""c# comments"">// вывод</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Вывод отсортированного массива""</code><code class=""c# plain"">);</code></div><div class=""line number20 index19 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; nums.Length; i++)</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(nums[i]);</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для сортировки массива выполняем проходы по массиву и сравниваем элементы. Поскольку нам надо последовательно сравнивать каждый элемент массива с каждым (за исключением сравния с самим собой),  то здесь применятся вложенный цикл.</p> <p>Во внешнем цикле мы берем элемент, который будем сравнивать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_636656""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; nums.Length - 1; i++)</code></div></div></td></tr></tbody></table></div></div> <p>Далее запускаем вложенный цикл, который начинается, со следующего элемента, и из которого извлекаем элементы, с которыми будем сравнивать тот элемент, которые берется из массива во внешнем цикле:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_146275""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">j = i + 1; j &lt; nums.Length; j++)</code></div></div></td></tr></tbody></table></div></div> <p>Если элемент с меньшим индексом больше элемента с большим индексом, то меняем элементы местами.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_138224""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(nums[i] &gt; nums[j])</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">temp = nums[i];</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">nums[i] = nums[j];</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">nums[j] = temp;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В конце выводим все элементы.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Методы</h2>   <p>Если переменные хранят некоторые значения, то методы содержат собой набор инструкций, которые выполняют определенные действия.  По сути метод - это именованный блок кода, который выполняет некоторые действия.</p> <p>Общее определение методов выглядит следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_728261""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">[модификаторы] тип_возвращаемого_значения название_метода ([параметры])</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// тело метода</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Модификаторы и параметры необязательны.</p> <p>Ранее мы уже использовали как минимум один метод - <span class=""b"">Console.WriteLine()</span>, который выводит информацию на консоль.  Теперь рассмотрим, как мы можем создавать свои методы.</p> <h3>Определение метода</h3> <p>Определим один метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_848710""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определен метод <code>SayHello</code>, который выводит некоторое сообщение. К названиям методов предъявляются в принципе те же требования, что и к названиям переменных. Однако, как правило,  названия методов начинаются с большой буквы.</p> <p>Перед названием метода идет возвращаемый тип данных. Здесь это тип <span class=""b"">void</span>, который указыает,  что фактически ничего не возвращает, он просто производит некоторые действия.</p> <p>После названия метода в скобках идет перечисление параметров. Но в данном случае скобки пустые, что означает, что метод не принимает никаких параметров.</p> <p>После списка параметров в круглых скобках идет блок кода, который представляет набор выполняемых методом инструкций. В данном случае блок метода SayHello  содержит только одну инструкцию, которая выводит строку на консоль:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_860596""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Но если мы запустим данный проект, то мы не увидим никакой строки, которую должен выводить метод SayHello. Потому что после определения  метод еще надо вызвать, чтобы он выполнил свою работу.</p> <h3>Вызов методов</h3> <p>Чтобы использовать метод SayHello, нам надо его вызвать. Для вызова метода указывается его имя, после которого в скобках идут значения для его параметров (если метод принимает параметры).</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_391618""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">название_метода (значения_для_параметров_метода);</code></div></div></td></tr></tbody></table></div></div> <p>Например, вызов метода SayHello будет выглядеть следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_520306""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SayHello();</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку метод не принимает никаких параметров, то после названия метода идут пустые скобки.</p> <p>Объединим определение и вызов метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_25908""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">SayHello(); </code><code class=""c# comments"">// Hello</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">SayHello(); </code><code class=""c# comments"">// Hello</code></div></div></td></tr></tbody></table></div></div> <img alt=""методы в C# и .NET"" src=""./pics/2.13.png""/> <p>Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">Hello Hello </pre> </div> <p>Преимуществом методов является то, что их можно повторно и многократно вызывать в различных частях программы. Например, в примере  выше два раза вызывается метод SayHello.</p> <p>При этом в данном случае нет разницы, сначала определяется метод, а потом вызывается или наоборот. Например, мы могли бы написать и так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_259556""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SayHello(); </code><code class=""c# comments"">// Hello</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">SayHello(); </code><code class=""c# comments"">// Hello</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello()</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Определим и вызовем еще несколько методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_55915""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHelloRu()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Привет""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHelloEn()</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHelloFr()</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Salut""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">language = </code><code class=""c#string"">""en""</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# keyword"">switch</code> <code class=""c# plain"">(language)</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""en""</code><code class=""c# plain"">: </code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">SayHelloEn();</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""ru""</code><code class=""c# plain"">:</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">SayHelloRu();</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""fr""</code><code class=""c# plain"">:</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">SayHelloFr();</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number28 index27 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определены три метода <code>SayHelloRu()</code>, <code>SayHelloEn()</code> и <code>SayHelloFr()</code>, которые также имеют  тип <code>void</code>, не принимают никаких параметров и также выводит некоторую строку на консоль. Условно говоря, они выводят приветствие на  определенном языке.</p> <p>В конструкции <code>switch</code> проверяется значение переменной <code>language</code>, которая условно хранит код языка,  и в зависимости от ее значения вызывается определенный метод. Так, в данном случае на консоль будет выведено</p> <div class=""console""><pre class=""consoletext"">Hello</pre></div> <h3>Сокращенная запись методов</h3> <p>Если метод в качестве тела определяет только одну инструкцию, то мы можем сократить определение метода. Например, допустим у нас есть метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_270599""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Мы можем его сократить следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_90135""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello() =&gt; Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>То есть после списка параметров ставится оператор <span class=""b"">=&gt;</span>, после которого идет выполняемая инструкция.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Параметры методов</h2>   <p>В прошлой теме был определен метод <code>SayHello</code>, который выводит на консоль некоторое сообщение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_160171""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">SayHello(); </code><code class=""c# comments"">// Hello</code></div></div></td></tr></tbody></table></div></div> <p>Но минусом подобного метода является то, что он выводит одно и то же сообщение. И было бы неплохо, если бы мы могли бы динамически определять,  какое сообщение будет выводить метод на экран, то есть передать из вне в метод это сообщение. Для этого в языке C# мы можем использовать параметры.</p> <p><span class=""b"">Параметры</span> позволяют передать в метод некоторые входные данные. Параметры определяются через заятую в скобках после названия метода в виде:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_273880""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">тип_метода имя_метода (тип_параметра1 параметр1, тип_параметра2 параметр2, ...)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// действия метода</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Определение параметра состоит из двух частей: сначала идет тип параметра и затем его имя.</p> <p>Например, определим метод PrintMessage, который получает извне выводимое сообщение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_465986""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(message);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">PrintMessage(</code><code class=""c#string"">""Hello work""</code><code class=""c# plain"">);           </code><code class=""c# comments"">// Hello work</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">PrintMessage(</code><code class=""c#string"">""Hello METANIT.COM""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// Hello METANIT.COM</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">PrintMessage(</code><code class=""c#string"">""Hello C#""</code><code class=""c# plain"">);             </code><code class=""c# comments"">// Hello C#</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод <code>PrintMessage()</code> принимает один параметр, который называется <code>message</code> и имеет тип <code>string</code>.</p> <p>Чтобы выполнить метод, который имеет параметры, при вызове после имени метода в скобках ему передаются значения для его параметров, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_760286""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">PrintMessage(</code><code class=""c#string"">""Hello work""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь параметру <code>message</code> передается строка ""Hello work"". Значения, которые передаются параметрам, еще называются <span class=""b"">аргументами</span>.  То есть передаваемая строка ""Hello work"" в данном случае является аргументом.</p> <p>Иногда можно встретить такие определения как <span class=""b"">формальные параметры</span> и <span class=""b"">фактические параметры</span>.  Формальные параметры - это собственно параметры метода (в данном случае message), а фактические параметры - значения, которые  передаются формальным параметрам. То есть фактические параметры - это и есть аргументы метода.</p> <p>Определим еще один метод, который складывает два числа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_463587""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{x} + {y} = {result}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Sum(10, 15);    </code><code class=""c# comments"">// 10 + 15 = 25</code></div></div></td></tr></tbody></table></div></div> <p>Метод Sum имеет два параметра: x и y. Оба параметра представляют тип int. Поэтому при вызове данного метода нам обязательно надо  передать на место этих параметров два числа. Внутри метода вычисляется сумма переданных чисел и выводится на консоль.</p> <p>При вызове метода Sum значения передаются параметрам по позиции. Например, в вызове <code>Sum(10, 15)</code> число 10  передается параметру x, а число 15 - параметру y.</p> <p>Также параметры могут использоваться в сокращеной версии метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_609240""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; Console.WriteLine($</code><code class=""c#string"">""{x} + {y} = { x + y }""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Sum(10, 15);    </code><code class=""c# comments"">// 10 + 15 = 25</code></div></div></td></tr></tbody></table></div></div> <p>Передаваемые параметру значения могут представлять значения переменных или результат работы сложных выражений, которые возвращают  некоторое значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_647843""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; Console.WriteLine($</code><code class=""c#string"">""{x} + {y} = { x + y }""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 10, b = 15, c = 6;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Sum(a, b);                  </code><code class=""c# comments"">// 10 + 15 = 25</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Sum(3, c);                  </code><code class=""c# comments"">// 3 + 6 = 9</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Sum(14, 4 + c);             </code><code class=""c# comments"">// 14 + 10 = 24</code></div></div></td></tr></tbody></table></div></div> <p>Если параметрами метода передаются значения переменных, то таким переменным должно быть присвоено значение. Например, следующая программа не скомпилируется:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_436338""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""{x} + {y} = { x + y }""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">a;</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 15;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Sum(a, b);  </code><code class=""c# comments"">// ! Ошибка</code></div></div></td></tr></tbody></table></div></div> <h3>Соответствие параметов и аргументов по типу данных</h3> <p>При передаче значений параметрам важно учитывать тип параметров: между аргументами и параметрами должно быть соответствие по типу. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_217196""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Name: {name}  Age: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, 24); </code><code class=""c# comments"">// Name: Tom  Age: 24</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае первый параметр метода <code>PrintPerson()</code> представляет тип <code>string</code>, поэтому при вызове метода  мы должны передать этому параметру значение типа <code>string</code>, то есть строку. Второй параметр представляет тип <code>int</code>,  поэтому должны передать ему целое число, которое соответствует типу <code>int</code>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_902385""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, 24);</code></div></div></td></tr></tbody></table></div></div> <p>Также мы можем передать параметрам значения тех типов, которые автоматически могут быть преобразованы в тип параметров. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_698900""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Name: {name}  Age: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">byte</code> <code class=""c# plain"">b = 37;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, b); </code><code class=""c# comments"">// Name: Tom  Age: 37</code></div></div></td></tr></tbody></table></div></div> <p>Здесь параметру типа <code>int</code> передается значение типа <code>byte</code>, но комилятор может автоматически преобразовать значение типа byte к тиу int. Поэтому здесь ошибки не возникнет.  Какие преобразования типов могут быть выполнены автоматически, рассматривалось в одной из предыдущих тем: <a href=""./2.2.php"">Преобразования базовых типов данных</a></p> <p>Данные других типов мы передать параметров не можем. Например, следующий вызов метода PrintPerson будет ошибочным:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_718182""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">PrintPerson(45, </code><code class=""c#string"">""Bob""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Ошибка! несоответствие значений типам параметров</code></div></div></td></tr></tbody></table></div></div> <h3>Необязательные параметры</h3> <p>По умолчанию при вызове метода необходимо предоставить значения для всех его параметров. Но C# также позволяет использовать необязательные параметры.  Для таких параметров нам необходимо объявить значение по умолчанию. Также следует учитывать, что после необязательных параметров все последующие параметры также должны быть необязательными:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_866165""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company = </code><code class=""c#string"">""Undefined""</code><code class=""c# plain"">)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Name: {name}  Age: {age}  Company: {company}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь параметры age и company являются необязательными, так как им присвоены значения. Поэтому при вызове метода мы можем не передавать для них данные:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_989805""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company = </code><code class=""c#string"">""Undefined""</code><code class=""c# plain"">)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Name: {name}  Age: {age}  Company: {company}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, 37, </code><code class=""c#string"">""Microsoft""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// Name: Tom  Age: 37  Company: Microsoft</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, 37);               </code><code class=""c# comments"">// Name: Tom  Age: 37  Company: Undefined</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">);                   </code><code class=""c# comments"">// Name: Tom  Age: 1   Company: Undefined</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод программы:</p> <div class=""console""><pre class=""consoletext"">Name: Tom  Age: 37  Company: Microsoft Name: Tom  Age: 37  Company: Undefined Name: Tom  Age: 1   Company: Undefined </pre></div> <h3>Именованные параметры</h3> <p>В предыдущих примерах при вызове методов значения для параметров передавались в порядке объявления этих параметров в методе. То есть аргументы передавались параметрам <span class=""b"">по позиции</span>.  Но мы можем нарушить подобный порядок, используя именованные параметры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_883178""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company = </code><code class=""c#string"">""Undefined""</code><code class=""c# plain"">)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Name: {name}  Age: {age}  Company: {company}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, company:</code><code class=""c#string"">""Microsoft""</code><code class=""c# plain"">, age: 37);  </code><code class=""c# comments"">// Name: Tom  Age: 37  Company: Microsoft</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">PrintPerson(age:41, name: </code><code class=""c#string"">""Bob""</code><code class=""c# plain"">);          </code><code class=""c# comments"">// Name: Bob  Age: 41  Company: Undefined</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">PrintPerson(company:</code><code class=""c#string"">""Google""</code><code class=""c# plain"">, name:</code><code class=""c#string"">""Sam""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Name: Sam  Age: 1   Company: Google</code></div></div></td></tr></tbody></table></div></div> <p>Для передачи значений параметрам о имени при вызове метода указывается имя параметра и через двоеточие его значение: <code>name:""Tom""</code></p> <p>Консольный вывод программы:</p> <div class=""console""><pre class=""consoletext"">Name: Tom  Age: 37  Company: Microsoft Name: Bob  Age: 41  Company: Undefined Name: Sam  Age: 1   Company: Google </pre></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Возвращение значения и оператор return</h2>   <p>Метод может возвращать значение, какой-либо результат. В примере выше были определены два метода, которые имели тип <span class=""b"">void</span>. Методы с таким типом не возвращают никакого значения.  Они просто выполняют некоторые действия.</p> <p>Но методы также могут возвращать некоторое значение. Для этого применяется оператор  <span class=""b"">return</span>, после которого идет возвращаемое значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_951228""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">возвращаемое значение;</code></div></div></td></tr></tbody></table></div></div> <p>Например, определим метод, который возвращает значение типа <code>string</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_743900""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c#string"">""Hello""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>GetMessage</code> имеет тип <code>string</code>, следовательно, он должен возвратить строку. Поэтому в теле метода  используется оператор <span class=""b"">return</span>, после которого указана возвращаемая строка.</p> <p>При этом методы, которые в качестве возвращаемого типа имеют любой тип, кроме <span class=""b"">void</span>, обязательно должны использовать  оператор return для возвращения значения. Например, следующее определение метода некорректно:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_337656""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также между возвращаемым типом метода и возвращаемым значением после оператора return должно быть соответствие.  Например, в следующем случае возвращаемый тип - <code>string</code>, но метод возвращает число (тип int), поэтому такое определение  метода некорректно:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_624569""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">3;   </code><code class=""c# comments"">// Ошибка! Метод должен возвращать строку, а не число</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Результат методов, который возвращают значение, мы можем присвоить переменным или использовать иным образом в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_54124""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c#string"">""Hello""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetMessage();  </code><code class=""c# comments"">// получаем результат метода в переменную message</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(message);     </code><code class=""c# comments"">// Hello</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>GetMessage()</code> возвращает значение типа <code>string</code>. Поэтому мы можем присвоить это значение какой-нибудь  переменной типа string: <code>string message = GetMessage();</code></p> <p>Либо даже передать в качестве значения параметру другого метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_344042""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c#string"">""Hello""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(message);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">PrintMessage(GetMessage());</code></div></div></td></tr></tbody></table></div></div> <p>В вызове <code>PrintMessage(GetMessage())</code> сначада вызывается метод <code>GetMessage()</code> и его результат передается параметру  message метода PrintMessage</p> <p>После оператора return также можно указывать сложные выражения или вызовы других методов, которые возвращают определенный результат.  Например, определим метод, который возвращает сумму чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_411617""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = Sum(10, 15);   </code><code class=""c# comments"">// 25</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(result);   </code><code class=""c# comments"">// 25</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(Sum(5, 6));   </code><code class=""c# comments"">// 11</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>Sum()</code> имеет тип <code>int</code>, следовательно, он должен возвратить значение типа int - целое число.  Поэтому в теле метода используется оператор <span class=""b"">return</span>, после которого указано возвращаемое число (в данном случае результат суммы переменных x и y).</p> <h3>Сокращенная версия методов с результатом</h3> <p>Также мы можем сокращать методы, которые возвращают значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_300942""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c#string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>аналогичен следующему методу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_652125""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage() =&gt; </code><code class=""c#string"">""hello""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>А метод</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_747621""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>аналогичен следующему методу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_905547""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div></div></td></tr></tbody></table></div></div> <h3>Выход из метода</h3> <p>Оператор return не только возвращает значение, но и производит выход из метода. Поэтому он должен определяться после остальных инструкций.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_575619""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetHello()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c#string"">""Hello""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""After return""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>С точки зрения синтаксиса данный метод корректен, однако его инструкция <code>Console.WriteLine(""After return"")</code> не имеет  смысла - она никогда не выполнится, так как до ее выполнения оператор <span class=""b"">return</span> возвратит значение и произведет выход из метода.</p> <p>Однако мы можем использовать оператор <span class=""b"">return</span> и в методах с типом <code>void</code>. В этом случае после оператора return не ставится  никакого возвращаемого значения (ведь метод ничего не возвращает). Типичная ситуация - в зависимости от опеределенных условий произвести выход из метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_829977""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code><code class=""c# plain"">(age &gt; 120 || age &lt; 1)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Недопустимый возраст""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Tom""</code><code class=""c# plain"">, 37);         </code><code class=""c# comments"">// Имя: Tom  Возраст: 37</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">PrintPerson(</code><code class=""c#string"">""Dunkan""</code><code class=""c# plain"">, 1234);    </code><code class=""c# comments"">// Недопустимый возраст</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод <code>PrintPerson()</code> в качестве параметров принимает имя и возраст пользователя. Однако в методе вначале мы проверяем,  соответствует ли возраст некоторому диапазону (меньше 120 и больше 0). Если возраст находится вне этого диапазона, то выводим сообщение о недопустимом возрасте и  с помощью оператора <span class=""b"">return</span> выходим из метода. После этого метод заканчивает свою работу.</p> <p>Однако если возраст корректен, то выводим информацию о пользователе на консоль. Консольный вывод:</p> <div class=""console""><pre class=""consoletext"">Имя: Tom  Возраст: 37 Недопустимый возраст </pre></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Передача параметров по ссылке и значению. Выходные параметры</h2>   <p>Существует два способа передачи параметров в метод в языке C#: <span class=""b"">по значению</span> и  <span class=""b"">по ссылке</span>.</p> <h3>Передача параметров по значению</h3> <p>Наиболее простой способ передачи параметров представляет передача по значению, по сути это обычный способ передачи параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_710905""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Increment(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">n++;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число в методе Increment: {n}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 5;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число до метода Increment: {number}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Increment(number);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число после метода Increment: {number}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""><pre class=""consoletext"">Число до метода Increment: 5 Число в методе Increment: 6 Число после метода Increment: 5 </pre></div> <p>При передаче аргументов параметрам по значению параметр метода получает не саму переменную, а ее копию и далее работает с этой копией независимо  от самой переменной.</p> <p>Так, выше при вызове метод Increment получает копию переменной number и увеличивает значение этой копии. Поэтому в самом методе  Increment мы видим, что значение параметра n увеличилось на 1, но после выполнения метода переменная number имеет прежнее значение - 5.  То есть изменяется копия, а сама переменная не изменяется.</p> <h3>Передача параметров по ссылке и модификатор ref</h3> <p>При передаче параметров по ссылке перед параметрами используется модификатор <span class=""b"">ref</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_508258""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Increment(</code><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">n++;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число в методе Increment: {n}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 5;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число до метода Increment: {number}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Increment(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">number);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число после метода Increment: {number}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""><pre class=""consoletext"">Число до метода Increment: 5 Число в методе Increment: 6 Число после метода Increment: 6 </pre></div> <p>При передаче значений параметрам по ссылке метод получает адрес переменной в памяти. И, таким образом, если в методе изменяется значение параметра, передаваемого по ссылке, то также изменяется и значение переменной, которая передается на его место..</p> <p>Так, в метод Increment передается ссылка на саму переменную number в памяти. И если значение параметра n в Increment изменяется, то  это приводит и к изменению переменной number, так как и параметр n и переменная number указывают на один и тот же адрес в памяти.</p> <p>Обратите внимание, что модификатор <code>ref</code> указывается как перед параметром при объявлении метода, так и при вызове метода  перед аргументом, который передается параметру.</p> <h3>Выходные параметры. Модификатор out</h3> <p>Выше мы использовали входные параметры. Но параметры могут быть также выходными. Чтобы сделать параметр выходным, перед ним ставится  модификатор <span class=""b"">out</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_767742""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">result)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">result = x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь результат возвращается не через оператор <code>return</code>, а через выходной параметр result. Использование  в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_999089""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">result)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">result = x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">number;</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">Sum(10, 15, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">number);</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(number);   </code><code class=""c# comments"">// 25</code></div></div></td></tr></tbody></table></div></div> <p>Причем, как и в случае с <span class=""b"">ref</span> ключевое слово <span class=""b"">out</span> используется как при определении  метода, так и при его вызове.</p> <p>Также обратите внимание, что методы, использующие такие параметры, обязательно должны присваивать им определенное значение. То есть  следующий код будет недопустим, так как в нем для out-параметра не указано никакого значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_759587""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">result)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(x + y);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Прелесть использования подобных параметров состоит в том, что по сути мы можем вернуть из метода не одно значение, а несколько.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_49389""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">GetRectangleData(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">width, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">height, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">rectArea, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">rectPerimetr)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">rectArea = width * height;       </code><code class=""c# comments"">// площадь прямоугольника - произведение ширины на высоту</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">rectPerimetr = (width + height) * 2; </code><code class=""c# comments"">// периметр прямоугольника - сумма длин всех сторон  </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">area;</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">perimetr;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">GetRectangleData(10, 20, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">area, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">perimetr);</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Площадь прямоугольника: {area}""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// 200</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Периметр прямоугольника: {perimetr}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 60</code></div></div></td></tr></tbody></table></div></div> <p>Здесь у нас есть метод GetRectangleData, который получает ширину и высоту прямоугольника (параметры width и height).  А два выходных параметра мы используем для подсчета площади и периметра прямоугольника.</p> <p>При этом можно определять переменные, которые передаются <span class=""b"">out</span>-параметрам в непосредственно при вызове метода.  То есть мы можем сократить предыдущий пример следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_685798""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">GetRectangleData(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">width, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">height, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">rectArea, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">rectPerimetr)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">rectArea = width * height;  </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">rectPerimetr = (width + height) * 2; </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">GetRectangleData(10, 20, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">area, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">perimetr);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Площадь прямоугольника: {area}""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// 200</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Периметр прямоугольника: {perimetr}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 60</code></div></div></td></tr></tbody></table></div></div> <p>При этом, если нам неизвестен тип значений, которые будут присвоены параметрам, то мы можем для их определения использовать оператор <span class=""b"">var</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_225909""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">GetRectangleData(10, 20, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">var area, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">var perimetr);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Площадь прямоугольника: {area}""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// 200</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Периметр прямоугольника: {perimetr}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 60</code></div></div></td></tr></tbody></table></div></div> <h3>Входные параметры. Модификатор in</h3> <p>Кроме выходных параметров с модификатором out метод может использовать входные параметры с модификатором <span class=""b"">in</span>.  Модификатор <span class=""b"">in</span> указывает, что данный параметр будет передаваться в метод по ссылке, однако внутри метода его  значение параметра нельзя будет изменить. Например, возьмем следующий метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_943014""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">GetRectangleData(</code><code class=""c# keyword"">in</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">width, </code><code class=""c# keyword"">in</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">height, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">rectArea, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">rectPerimetr)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//width = 25; // нельзя изменить, так как width - входной параметр</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">rectArea = width * height;      </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">rectPerimetr = (width + height) * 2;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">w = 10;</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">h = 20;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">GetRectangleData(w, h, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">var area, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">var perimetr);</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Площадь прямоугольника: {area}""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// 200</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Периметр прямоугольника: {perimetr}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 60</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае через входные параметры <code>width</code> и <code>height</code> в метод передаются значения, но в самом методе мы не можем  изменить значения этих параметров, так как они определены с модификатором <span class=""b"">in</span>.</p> <p>Передача по ссылке в некоторых случаях может увеличить произодительность, а использование оператора <span class=""b"">in</span> гарантирует, что значения переменных, которые передаются параметрам,  нельзя будет изменить в этом методе.</p> <h3>ref-параметры только для чтения</h3> <p>В примерах выше можно было изменять значение <span class=""b"">ref</span>-параметра. Однако иногда это может быть нежелательно. И чтобы гарантировать,  что <span class=""b"">ref</span>-параметр не изменит своего значения, начиная с версии C# 12 можно применять <span class=""b"">ref</span>-параметры только для чтения. Такие параметры  предваряются ключевым словом <span class=""b"">readonly</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_662648""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Increment(</code><code class=""c# keyword"">ref</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// n++; // нельзя, иначе будет очишка компиляции</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число в методе Increment: {n}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces""> </code> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 5;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Increment(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">number);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Число после метода Increment: {number}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в метод Increment параметр n передается по ссылке и при этом он доступен только для чтения. При попытке изменить его значение мы получим ошибку на этапе компиляции.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }   </style> </head> <body><div class=""item center menC""> <h2>Массив параметров и ключевое слово params</h2>   <p>Во всех предыдущих примерах мы использовали постоянное число параметров. Но, используя ключевое слово  <span class=""b"">params</span>, мы можем передавать неопределенное количество параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_975413""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">params</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[]  numbers)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">result += n;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(result);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums = { 1, 2, 3, 4, 5};</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Sum(nums);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Sum(1, 2, 3, 4);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Sum(1, 2, 3);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Sum();</code></div></div></td></tr></tbody></table></div></div> <p>Сам параметр с ключевым словом <span class=""b"">params</span> при определении метода должен представлять одномерный массив того типа, данные которого мы собираемся использовать.  При вызове метода на место параметра с модификатором <span class=""b"">params</span> мы можем передать как отдельные значения, так и массив  значений, либо вообще не передавать параметры. Количество передаваемых значений в метод неопределено, однако все эти значения должны соответствовать типу параметра с <span class=""b"">params</span>.</p> <p>Если же нам надо передать какие- то другие параметры, то они должны указываться до параметра с ключевм словом params:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_369742""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">initialValue, </code><code class=""c# keyword"">params</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[]  numbers)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = initialValue;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">result += n;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(result);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums = { 1, 2, 3, 4, 5};</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Sum(10, nums);  </code><code class=""c# comments"">// число 10 - передается параметру initialValue</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Sum(1, 2, 3, 4);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Sum(1, 2, 3);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Sum(20);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод Sum имеет обязательный параметр initialValue, поэтому при вызове метода для него нужно обязательно передать значение. Поэтому первое значение при вызове  метода будет передаваться этому параметру.</p> <p>Однако после параметра с модификатором <span class=""b"">params</span> мы НЕ можем указывать другие параметры. То есть  следующее определение метода недопустимо:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_680836""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">//Так НЕ работает</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">params</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">initialValue)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{}</code></div></div></td></tr></tbody></table></div></div> <h3>Массив в качестве параметра</h3> <p>Также этот способ передачи параметров надо отличать от передачи массива в качестве параметра:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_180662""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">initialValue)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = initialValue;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">result += n;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(result);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums = { 1, 2, 3, 4, 5};</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Sum(nums, 10);</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# comments"">// Sum(1, 2, 3, 4);     // так нельзя - нам надо передать массив</code></div></div></td></tr></tbody></table></div></div> <p>Так как метод <code>Sum</code> принимает в качестве параметра массив без ключевого слова <code>params</code>, то при его вызове нам обязательно надо передать в качестве первого параметра  массив. Кроме того, в отличие от метода с параметром <span class=""b"">params</span> после параметра-массива могут располагаться другие параметры.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.5.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }    </style> </head> <body><div class=""item center menC""> <h2>Рекурсивные функции</h2>   <p>Отдельно остановимся на рекурсивных функциях. Рекурсивная функция представляет такую конструкцию, при которой функция вызывает саму себя.</p> <h3>Рекурсивная функция факториала</h3> <p>Возьмем, к примеру, вычисление факториала, которое использует формулу <span class=""b"">n! = 1 * 2 * … * n</span>. То есть по сути для нахождения факториала  числа мы перемножаем все числа до этого числа. Например, факториал числа 4 равен <code>24 = 1 * 2 * 3 * 4</code>, а факторил числа 5 равен <code>120 = 1 * 2 * 3 * 4 * 5</code>.</p> <p>Определим метод для нахождения факториала:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_989063""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Factorial(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">1;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">n * Factorial(n - 1);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При создании рекурсивной функции в ней обязательно должен быть некоторый <span class=""b"">базовый вариант</span>, с которого начинается вычисление функции.  В случае с факториалом это факториал числа 1, который равен 1. Факториалы всех остальных положительных чисел будет начинаться с вычисления факториала числа 1, который равен 1.</p> <p>На уровне языка программирования для возвращения базового варианта применяется оператор <span class=""b"">return</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_584542""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">1;</code></div></div></td></tr></tbody></table></div></div> <p>То есть, если вводимое число равно 1, то возвращается 1</p> <p>Другая особенность рекурсивных функций: все рекурсивные вызовы должны обращаться к подфункциям,  которые в конце концов сходятся к базовому варианту:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_936814""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">n * Factorial(n - 1);</code></div></div></td></tr></tbody></table></div></div> <p>Так, при передаче в функцию числа, которое не равно 1, при дальнейших рекурсивных вызовах подфункций в них будет  передаваться каждый раз число, меньшее на единицу. И в конце концов мы дойдем до ситуации, когда  число будет равно 1, и будет использован базовый вариант. Это так называемый рекурсивный спуск.</p> <p>Используем эту функцию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_167510""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Factorial(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">1;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">n * Factorial(n - 1);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">factorial4 = Factorial(4);  </code><code class=""c# comments"">// 24</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">factorial5 = Factorial(5);  </code><code class=""c# comments"">// 120</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">factorial6 = Factorial(6);  </code><code class=""c# comments"">// 720</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Факториал числа 4 = {factorial4}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Факториал числа 5 = {factorial5}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""Факториал числа 6 = {factorial6}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Рассмотрим поэтапно, что будет в случае вызова <span>Factorial(4)</span>.</p> <ol> <li><p>Сначала идет проверка, равно ли число единице:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_756760""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">1;</code></div></div></td></tr></tbody></table></div></div> <p>Но вначале <code>n</code> равно 4, поэтому это условие ложно, и соответственно выполняется код</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_704933""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">n * Factorial(n - 1);</code></div></div></td></tr></tbody></table></div></div> <p>То есть фактически мы имеем:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_694791""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">4 * Factorial(3);</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Далее выполняется выражение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_812545""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Factorial(3)</code></div></div></td></tr></tbody></table></div></div> <p>Опять же <code>n</code> не равно 1, поэтому выполняется код</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_694624""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">n * Factorial(n - 1);</code></div></div></td></tr></tbody></table></div></div> <p>То есть фактически:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_891149""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">3 * Factorial(2);</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Далее выполняется выражение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_539828""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Factorial(2)</code></div></div></td></tr></tbody></table></div></div> <p>Опять же <code>n</code> не равно 1, поэтому выполняется код</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_670149""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">n * Factorial(n - 1);</code></div></div></td></tr></tbody></table></div></div> <p>То есть фактически:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_873727""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">2 * Factorial(1);</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Далее выполняется выражение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_678248""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Factorial(1)</code></div></div></td></tr></tbody></table></div></div> <p>Теперь <code>n</code> равно 1, поэтому выполняется код</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_805336""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">1;</code></div></div></td></tr></tbody></table></div></div> <p>И возвращается 1.</p> </li> </ol> <p>В итоге выражение</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_873503""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Factorial(4)</code></div></div></td></tr></tbody></table></div></div> <p>В реальности выливается в</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_347703""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">4 * 3 * 2 * Factorial(1)</code></div></div></td></tr></tbody></table></div></div> <h3>Рекурсивная функция Фибоначчи</h3> <p>Другим распространенным показательным примером рекурсивной функции служит функция, вычисляющая числа Фибоначчи.  n-й член последовательности Фибоначчи определяется по формуле: f(n)=f(n-1) + f(n-2), причем f(0)=0, а f(1)=1. То есть последовательность Фибоначчи  будет выглядеть так 0 (0-й член), 1 (1-й член), 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, .... Для определения чисел этой последовательности определим следующий метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_503555""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Fibonachi(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 0 || n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">n;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Fibonachi(n - 1) + Fibonachi(n - 2);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">fib4 = Fibonachi(4);</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">fib5 = Fibonachi(5);</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">fib6 = Fibonachi(6);</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""4 число Фибоначчи = {fib4}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""5 число Фибоначчи = {fib5}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c#string"">""6 число Фибоначчи = {fib6}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь базовый вариант выглядит следующий образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_80291""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(n == 0 || n == 1) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">n;</code></div></div></td></tr></tbody></table></div></div> <p>То есть, если мы ищем нулевой или первый элемент последовательности, то возвращается это же число - 0 или 1. Иначе возвращается  результат выражения <code>Fibonachi(n - 1) + Fibonachi(n - 2);</code></p> <h3>Рекурсии и циклы</h3> <p>Это простейшие пример рекурсивных функций, которые призваны дать понимание работы рекурсии. В то же время для обоих функций вместо рекурсий можно использовать циклические конструкции.  И, как правило, альтернативы на основе циклов работают быстрее и более эффективны, чем рекурсия. Например, вычисление чисел Фибоначчи с помощью циклов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_61795""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Fibonachi2(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 1;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">tmp;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; n; i++)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">tmp = result;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">result = b;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">b += tmp;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В то же время в некоторых ситуациях рекурсия предоставляет элегантное решение, например, при обходе различных древовидных  представлений, к примеру, дерева каталогов и файлов.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }      </style> </head> <body><div class=""item center menC""> <h2>Локальные функции</h2>   <p>Локальные функции представляют функции, определенные внутри других методов. Локальная функция, как правило, содержит действия, которые применяются только в рамках ее  метода.</p> <p>Например, определим метод который сравнивают сумму чисел двух массивов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_511726""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Compare(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers1, </code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers2)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">numbers1Sum = 0;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">numbers2Sum = 0;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers1) </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">numbers1Sum += number; </code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers2)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">numbers2Sum += number;</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(numbers1Sum &gt; numbers2Sum)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""сумма чисел из массива numbers1 больше""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(numbers1Sum &lt; numbers2Sum)</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""сумма чисел из массива numbers2 больше""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""суммы чисел обоих массивов равны""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""> </div><div class=""line number20 index19 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers1 = { 1, 2, 3 };</code></div><div class=""line number21 index20 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers2 = { 3, 4, 5, 6, 7 };</code></div><div class=""line number22 index21 alt1""> </div><div class=""line number23 index22 alt2""><code class=""c# plain"">Compare(numbers1, numbers2);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод <code>Compare</code> принимает два массива и последовательно вычисляет сумму их элементов, чтобы узнать в каком массиве сумма чисел больше. Несмотря на то, что  все работает, здесь есть один недостаток: здесь повторяется действия, которые вычисляют сумму массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_404580""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">numbers1Sum = 0;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers1) </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">numbers1Sum += number; </code></div></div></td></tr></tbody></table></div></div> <p>К тому а что, если мы захотим сравнивать сумму только положительных или четных чисел или как-то иначе изменить логику сравнения? В этом лучше вынести повторяющиеся  действия в отдельный метод. Однако если эти действия нигде больше в прогамме не будут вызываться и будут использоваться только в одном методе,  то целесообразно определить эти действия в виде локальной функции.  Для этого изменим метод Compare следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_499669""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Compare(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers1, </code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers2)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">numbers1Sum = Sum(numbers1);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">numbers2Sum = Sum(numbers2);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(numbers1Sum &gt; numbers2Sum)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""сумма чисел из массива numbers1 больше""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(numbers1Sum &lt; numbers2Sum)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""сумма чисел из массива numbers2 больше""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""суммы чисел обоих массивов равны""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">result += number;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""> </div><div class=""line number22 index21 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers1 = { 1, 2, 3 };</code></div><div class=""line number23 index22 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers2 = { 3, 4, 5, 6, 7 };</code></div><div class=""line number24 index23 alt1""> </div><div class=""line number25 index24 alt2""><code class=""c# plain"">Compare(numbers1, numbers2);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь подсчет суммы вынесен в локальную функцию <code>Sum</code>, которая принимает массив и возвращает его сумму. И далее в рамках метода Compare  мы сможем ее использовать для вычисления суммы массива. При этом неважно, определена локальная функция до или после использования. Но вне ее метода локальная функция не может использоваться.</p> <h3>Статические локальные функции</h3> <p>Локальные функции могут быть статическими. Такие функции определяются с помощью ключевого слова <span class=""b"">static</span>.  Их особенностью является то, что они не могут обращаться к переменным окружения, то есть метода, в котором статическая функция определена.</p> <p>Сначала определим локальную функцию, которая имеет доступ окружению:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_870677""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">limit = 0;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(IsPassed(number)) result += number;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">bool</code> <code class=""c# plain"">IsPassed(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">number &gt; limit;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers1 = { -3, -2, -1, 0, 1, 2, 3 };</code></div><div class=""line number18 index17 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers2 = { 3, -4, 5, -6, 7 };</code></div><div class=""line number19 index18 alt2""> </div><div class=""line number20 index19 alt1""><code class=""c# plain"">Console.WriteLine(Sum(numbers1));</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">Console.WriteLine(Sum(numbers2));</code></div></div></td></tr></tbody></table></div></div> <p>Здесь функция Sum вычисляет сумму чисел массива, которые соответствуют условию в локальной функции <code>IsPassed()</code>. Эта локальная функция  проверяет, больше ли переданное число чем значение переменной <code>limit</code>, определенной в методе Sum. То есть локальная функция IsPassed может обращаться к данным определенным в  окружающей функции Sum.</p> <p>Теперь сделаем функцию IsPassed статической:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_89631""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">limit = 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(IsPassed(number, limit)) result += number;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">IsPassed(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">lim)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">//return number &gt; limit; // Ошибка: метод IsPassed не имеет доступа к переменной limit</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">number &gt; lim;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Модификатор <span class=""b"">static</span> указывается перед типом локальной функции. Теперь функция IsPassed не может обращаться к  переменной limit, и в этом случае нам надо либо передать это значение в виде параметра, либо определить переменную limit непосредственно в локальной функции.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Конструкция switch</h2>   <p>Конструкция <span class=""b"">switch/case</span> оценивает некоторое выражение и сравнивает его значение с набором значений.  И при совпадении значений выполняет определенный код.:</p> <p>Конструкция switch имеет следующее формальное определение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_115521""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">switch</code> <code class=""c# plain"">(выражение)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c# plain"">значение1:</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">код,выполняемый если выражение имеет значение1</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c# plain"">значение2:</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">код,выполняемый если выражение имеет значение2</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//.............</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c# plain"">значениеN:</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">код, выполняемый если выражение имеет значениеN</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">код, выполняемый если выражение не имеет ни одно из выше указанных значений</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После ключевого слова <span class=""b"">switch</span> в скобках идет сравниваемое выражение. Значение этого выражения последовательно  сравнивается со значениями, помещенными после оператора <span class=""b"">сase</span>. И если совпадение будет найдено, то будет  выполняться определенный блок <span class=""b"">сase</span>.</p> <p>В конце каждого блока сase должен ставиться один из операторов перехода:  <span class=""b"">break</span>, <span class=""b"">goto case</span>, <span class=""b"">return</span> или <span class=""b"">throw</span>.  Как правило, используется оператор <span class=""b"">break</span>. При его применении другие блоки <code>case</code> выполняться не будут.</p> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_556545""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">switch</code> <code class=""c# plain"">(name)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""Bob""</code><code class=""c# plain"">:</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Bob""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""Tom""</code><code class=""c# plain"">:</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Tom""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""Sam""</code><code class=""c# plain"">:</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Sam""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае конструкция <code>switch</code> последовательно сравнивает значение переменной <code>name</code> с набором значений,  которые указаны после операторов <code>case</code>. Поскольку здесь значение переменной <code>name</code> - строка ""Tom"", то будет выполняться блок</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_621359""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">case</code> <code class=""c#string"">""Tom""</code><code class=""c# plain"">:</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Tom""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Соответственно мы увидим на консоли</p> <div class=""console""><pre class=""consoletext"">Ваше имя - Tom</pre></div> <p>Если значение переменной <code>name</code> не совпадает ни с каким значением после операторов <code>case</code>, то ни один из блоков case не выполняется.  Однако если даже в этом случае нам все равно надо выполнить какие-нибудь действия, то мы можем добавить в конструкцию <span class=""b"">switch</span> необязательный  блок <span class=""b"">default</span>. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_733829""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c#string"">""Alex""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">switch</code> <code class=""c# plain"">(name)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""Bob""</code><code class=""c# plain"">:</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Bob""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""Tom""</code><code class=""c# plain"">:</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Tom""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c#string"">""Sam""</code><code class=""c# plain"">:</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Ваше имя - Sam""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Неизвестное имя""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае никакое из значений после операторов case не совпадает со значением переменной name, поэтому будет выполняться блок default:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_934017""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Неизвестное имя""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Однако если мы хотим, чтобы, наоборот, после выполнения текущего блока case выполнялся другой блок case, то мы можем использовать вместо break оператор  <code>goto case</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_941851""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">switch</code> <code class=""c# plain"">(number)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c# plain"">1:</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""case 1""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">goto</code> <code class=""c# keyword"">case</code> <code class=""c# plain"">5; </code><code class=""c# comments"">// переход к case 5</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c# plain"">3:</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""case 3""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">case</code> <code class=""c# plain"">5:</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""case 5""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""default""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Возвращение значения из switch</h3> <p>Конструкция <span class=""b"">switch</span> позволяет возвращать некоторое значение. Для возвращения значения в блоках <span class=""b"">case</span> может применятся  оператор <span class=""b"">return</span>. Например, определим следующий метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_856437""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">op, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(op)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">1: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">a + b;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">2: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">a - b;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">3: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">a * b;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">0;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В метод <code>DoOperation()</code> передается числовой код операции и два операнда. В зависимости от кода операции над операндами  выполнется определенная операция и ее результат возвращается из метода. Для примера при по умолчанию из метода возвращается 0, если код операции не равен 1, 2 или 3.</p> <p>Затем мы можем вызвать этот метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_606640""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">op, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(op)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">1: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">a + b;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">2: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">a - b;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">3: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">a * b;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">0;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = DoOperation(1, 10, 5); </code><code class=""c# comments"">// 15</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine(result1);         </code><code class=""c# comments"">// 15</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = DoOperation(3, 10, 5); </code><code class=""c# comments"">// 50</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine(result2);         </code><code class=""c# comments"">// 50</code></div></div></td></tr></tbody></table></div></div> <h3>Получение результата из switch</h3> <p>Хотя конструкция <span class=""b"">switch</span> в примере выше прекрасно работает, тем не менее мы ее можем сократить и получить результат неосредственно из конструкции  <span class=""b"">switch</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_804166""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">op, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = op </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">1 =&gt; a + b,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">2 =&gt; a - b,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">3 =&gt; a * b,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">_ =&gt; 0</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь не требуется оператор <span class=""b"">case</span>, а после сравниваемого значения ставится оператор стрелка <span class=""b"">=&gt;</span>.  Значение справа от стрелки выступает в качестве возвращаемоего значения. Кроме того, вместо оператора <span class=""b"">default</span>  используется почерк _. В итоге результат конструкции switch будет присвиваиваться  переменной result.</p> <p>Естестввенно, мы можем сразу возвратить из метода результат без присвоения переменной результата конструкции switch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_497337""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">op, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">op </code><code class=""c# keyword"">switch</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">1 =&gt; a + b,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">2 =&gt; a - b,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">3 =&gt; a * b,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">_ =&gt; 0</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">};</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Или сделать метод еще короче:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_60667""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">op, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b) =&gt; op </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">1 =&gt; a + b,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">2 =&gt; a - b,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">3 =&gt; a * b,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; 0</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Обращаю внимание, что данное упрощение касается лишь таких конструкций <span class=""b"">switch</span>, которые <span class=""b"">возвращают</span> некоторые значения, как в примере выше.</p> <p>Стоит отметить, что при возвращении значения из метода, метод должен в любом случае возвращать значение. Например, следующая версия  метода не будет работать</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_490671""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">op, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">op </code><code class=""c# keyword"">switch</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">1 =&gt; a + b,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">2 =&gt; a - b,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">3 =&gt; a * b</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Эта версия метода возвращает значение, если код операции равен 1, 2 или 3. Но что, если будет передано значение 4 или какое-то другое? Поэтому  данная версия метода даже не скомпилируется. Поэтому нам надо предусмотреть возвращение значения из метода при всех возможных вариантах.  То есть, мы можем, как в примере выше, добавить в конструкцию switch блок default, в котором будет возвращаться значение при всех остальных случаях.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;                          padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;                          margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;                      }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {                      }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Перечисления enum</h2>   <p>Кроме примитивных типов данных в языке программирования C# есть такой тип как <span class=""b"">enum</span> или  <span class=""b"">перечисление</span>. Перечисления представляют набор логически связанных констант.</p> <p>Объявление перечисления происходит с помощью оператора <span class=""b"">enum</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_123984""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">название_перечисления</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// значения перечисления</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">значение1,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">значение2,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">.......</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">значениеN</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После оператора <code>enum</code> идет название перечисления. И затем в фигурных скобках через запятую перечисляются константы перечисления.</p> <p>Определим простейшее перечисление:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_185089""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Night</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определено перечисление DayTime, которое имеет четыре значения: <code>Morning, Afternoon, Evening</code> и <code>Night</code></p> <p>Каждое перечисление фактически определяет новый тип данных, с помощью которых мы также, как и с помощью любого другого типа, можем определять переменные, константы, параметры методов и т.д.  В качестве значения переменной, константы и параметра метода, которые представляют перечисление, должна выступать одна из констант  этого перечисления, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_438428""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">const</code> <code class=""c# plain"">DayTime dayTime = DayTime.Morning;</code></div></div></td></tr></tbody></table></div></div> <p>Далее в программе мы можем использовать подобные переменные/константы/параметры как и любые другие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_619350""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DayTime dayTime = DayTime.Morning;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(dayTime == DayTime.Morning)  </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Доброе утро""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">else</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Привет""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening,</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Night</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Хранение состояния</h3> <p>Зачастую переменная перечисления выступает в качестве хранилища состояния, в зависимости от которого производятся некоторые действия:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_128976""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DayTime now = DayTime.Evening;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">PrintMessage(now);                   </code><code class=""c# comments"">// Добрый вечер</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">PrintMessage(DayTime.Afternoon);    </code><code class=""c# comments"">// Добрый день</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">PrintMessage(DayTime.Night);        </code><code class=""c# comments"">// Доброй ночи</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintMessage(DayTime dayTime)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(dayTime)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">DayTime.Morning:</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Доброе утро""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">DayTime.Afternoon:</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Добрый день""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">DayTime.Evening:</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Добрый вечер""</code><code class=""c# plain"">);</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">DayTime.Night:</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c#string"">""Доброй ночи""</code><code class=""c# plain"">);</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning,</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon,</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening,</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Night</code></div><div class=""line number31 index30 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод <code>PrintMessage()</code> в качестве параметра принимает значение типа перечисления DayTime и зависимости от этого значения  выводит определенное приведение.</p> <p>Другой пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_439291""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DoOperation(10, 5, Operation.Add);          </code><code class=""c# comments"">// 15</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">DoOperation(10, 5, Operation.Subtract);     </code><code class=""c# comments"">// 5</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">DoOperation(10, 5, Operation.Multiply);     </code><code class=""c# comments"">// 50</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">DoOperation(10, 5, Operation.Divide);       </code><code class=""c# comments"">// 2</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">double</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">y, Operation op)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">double</code> <code class=""c# plain"">result = op </code><code class=""c# keyword"">switch</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Operation.Add =&gt; x + y,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Operation.Subtract =&gt; x - y,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Operation.Multiply =&gt; x * y,</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Operation.Divide =&gt; x / y</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">};</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(result);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">Operation</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Add,</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Subtract,</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Multiply,</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Divide</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определено перечисление Operation, которое представляет арифметические операции. Каждый тип операций определен в виде  одной из констант перечисления. И также определен метод <code>DoOperation()</code>, который в качестве параметров принимает два числа и  тип операции в виде константы перечисления и в зависимости от этого типа возвращает из конструкции <code>switch</code> результат определенной операции.</p> <h3>Тип и значения констант перечисления</h3> <p>Константы перечисления могут иметь тип. Тип указывается после названия перечисления через двоеточие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_764363""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">Time : </code><code class=""c# keyword"">byte</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Night</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Тип перечисления обязательно должен представлять целочисленный тип (byte, sbyte, short, ushort, int, uint, long, ulong).  Если тип явным образом не указан, то по умолчанию используется тип <span class=""b"">int</span>.</p> <p>Тип влияет на значения, которые могут иметь константы. По умолчанию каждому элементу перечисления присваивается  целочисленное значение, причем первый элемент будет иметь значение 0, второй - 1 и так далее. Например, возьмем выше определенное DayTime:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_641075""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DayTime now = DayTime.Morning;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine((</code><code class=""c# keyword"">int</code><code class=""c# plain"">) now);  </code><code class=""c# comments"">// 0</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine((</code><code class=""c# keyword"">int</code><code class=""c# plain"">) DayTime.Night);  </code><code class=""c# comments"">// 3</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning,</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Night</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Мы можем использовать операцию приведения, чтобы получить целочисленное значение константы перечисления:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_727318""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">(</code><code class=""c# keyword"">int</code><code class=""c# plain"">) DayTime.Night </code><code class=""c# comments"">// 3</code></div></div></td></tr></tbody></table></div></div> <p>В то же время, несмотря на то, что каждая константа сопоставляется с определенным числом, мы НЕ можем присвоить ей числовое значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_344980""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DayTime now = 2;    </code><code class=""c# comments"">// ! Ошибка</code></div></div></td></tr></tbody></table></div></div> <p>Можно также явным образом указать значения элементов, либо указав значение первого элемента:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_726164""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning = 3,    </code><code class=""c# comments"">// каждый следующий элемент по умолчанию увеличивается на единицу</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon,      </code><code class=""c# comments"">// этот элемент равен 4</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening,        </code><code class=""c# comments"">// 5</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Night           </code><code class=""c# comments"">// 6</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Но можно и для всех элементов явным образом указать значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_548132""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning = 2,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon = 4,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening = 8,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Night = 16</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При этом константы перечисления могут иметь одинаковые значения, либо даже можно присваивать одной константе значение другой константы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_668676""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">DayTime</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Morning = 1,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Afternoon = Morning,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Evening = 2,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Night = 2</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.7.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
            };

            string[] tasks = new string[]
            {
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Создай консольное приложение на C#, которое выведет на экран:  \r\n//1)Логические литералы true и false. \r\n//2)Целочисленные литералы в десятичной форме (например, 10 и -5). \r\n//3)Вещественные литералы (например, 3.14 и -0.5). \r\n//4)Строку \"Привет, мир!\".",
                "//Задание 1: Напишите программу на C#, в которой нужно создать переменные разных типов данных и вывести их значения на консоль. Для некоторых переменных используйте явное указание типа, а для других – неявную типизацию с ключевым словом var. Обязательно используйте переменные типов bool, byte, float, decimal, string, и object.",
                "//Задание 1: Напишите программу на C#, которая запрашивает у пользователя два числа и операцию, а затем выводит результат этой операции на экран.",
                "//Задание 1: Напишите программу, которая запрашивает у пользователя три числа: его возраст, рост .\r\n//1)Вывести на экран рост и вес пользователя, округлив вес до целых чисел.\r\n//2)Рассчитать и вывести индекс массы тела (BMI) по формуле BMI = вес / (рост * рост) с точностью до двух знаков после запятой.\r\n//3)Использовать разные виды арифметических операций (сложение, деление, остаток от деления)",
                "//Задание 1: Напишите программу, которая выполняет поразрядные операции над двумя числами:\r\n//1)Логическое умножение (&).\r\n//2)Логическое сложение (|).\r\n//3)Логическое исключающее ИЛИ (^).\r\n//4)Логическое отрицание (~).\r\n//5)Операции сдвига влево и вправо (<<, >>).",
                "//Задание 1: 1. Присвойте переменной `a` значение 20.\r\n//2. Для переменной `b` выполните: `b += 10; b -= 5; b *= 2; b /= 4; b <<= 2; b >>= 1;`.\r\n//3.Используйте побитовые операции для переменной `c`: `c &= 3; c |= 1; c ^= 5;`.\r\n//4.Рассчитайте и выведите результат: `a = 8; b = 6; c = a += b -= 5;`.",
                "//Задание 1: Примените операцию сложения к переменным типа byte и int. После этого попытайтесь сложить два значения типа byte. Исправьте ошибку с помощью явного преобразования типов.",
                "//Задание 1: Операции сравнения\r\n//1)Создайте две переменные типа int, присвойте им значения 15 и 25.\r\n//2)Используйте операцию сравнения == и выведите результат в консоль.\r\n//3)Затем используйте операцию != и выведите результат.\r\n//4)Попробуйте сравнить эти переменные с числом 20 с помощью операторов <, >, <=, >= и выведите результаты.",
                "//Задание 1: Пример работы с конструкцией if и тернарной операцией \r\n//1. Создайте программу, в которой объявите две переменные целого типа, например, num1 и num2. \r\n//2. Используйте конструкцию if для проверки, является ли первая переменная больше второй. \r\n//3. Если условие истинно, выведите сообщение, что первое число больше второго. \r\n//4. Добавьте альтернативное условие с использованием тернарной операции: если num1 меньше или равно num2, пусть выводится сумма чисел, иначе — их разность.",
                "//Задание 1: Работа с циклом for \r\n//1. Создайте программу, которая с использованием цикла for выводит числа от 1 до 10. \r\n//2. Измените программу так, чтобы она выводила только четные числа в этом диапазоне.",
                "//Задание 1: Работа с массивами в C#\r\n//1. Объявите и инициализируйте одномерный и многомерный массив в C#.\r\n//2. Заполните массив значениями и выведите их на экран с помощью цикла.\r\n//3. Измените значение элемента массива и выведите его на экран.\r\n//4. Используя встроенные методы, узнайте длину массива и выведите результат.\r\n//5. Напишите код для перебора элементов многомерного массива с помощью вложенных циклов.\r\n//6. Реализуйте код для работы с зубчатым массивом и выведите его элементы на экран.\r\n",
                "//Задание 1: Работа с массивами в C#\r\n//1. Найдите количество положительных чисел в массиве, используя цикл foreach и условную конструкцию if.\r\n//2. Напишите код для инверсии массива с использованием цикла for, меняя элементы местами до середины массива.\r\n//3. Реализуйте сортировку массива методом пузырька (вложенные циклы) и выведите отсортированный массив.\r\n",
                "//Задание 1: Методы в C#\r\n//1. Определите метод SayHello(), который выводит на консоль строку \"Hello\". Вызовите этот метод дважды в программе.\r\n//2. Создайте три метода: SayHelloRu(), SayHelloEn(), SayHelloFr(), которые выводят приветствия на разных языках (русский, английский, французский). Используйте конструкцию switch для выбора языка и вызова соответствующего метода.\r\n//3. Определите метод SayHello() с использованием сокращенной записи, который выводит строку \"Hello\".",
                "//Задание 1: Параметры методов в C# - это способы передачи данных в методы для выполнения определённых действий. \r\n//Определение параметров состоит из двух частей: типа и имени параметра. \r\n//Пример метода с параметром:\r\nvoid PrintMessage(string message) { Console.WriteLine(message); }\r\n//Пример вызова метода с передачей аргумента:\r\nPrintMessage(\"Hello world\");",
                "//Задание 1: Возвращение значения и оператор return\r\n //1. Определите метод, который принимает два числа типа int и возвращает их сумму. Используйте оператор return для возврата результата.\r\n //2. Напишите метод, который принимает имя и возраст, проверяет корректность возраста (от 1 до 120 лет). Если возраст некорректен, метод должен завершить выполнение с помощью return, иначе вывести имя и возраст на экран.",
                "//Задание 1: Передача параметров по значению и ссылке, выходные параметры\r\n //1. Напишите метод, который увеличивает число на 1. Используйте передачу параметра по значению и выведите значение числа до и после вызова метода.\r\n //2. Измените метод из первого пункта, используя передачу параметра по ссылке (с модификатором ref). Выведите значение до и после вызова метода.",
                "//Задание 1: Массив параметров и ключевое слово params\r\n //1. Напишите метод, который принимает неопределенное количество чисел (с использованием ключевого слова params) и выводит их сумму. Вызовите этот метод с различным количеством параметров.",
                "//Задание 1: Рекурсивные функции\r\n //1. Реализуйте рекурсивную функцию для вычисления факториала числа. Введите несколько чисел и выведите их факториалы.",
                "//Задание 1: Локальные функции\r\n //1. Реализуйте метод, который принимает два массива чисел и сравнивает их суммы, используя локальную функцию для вычисления суммы массива.",
                "//Задание 1: Конструкция switch\r\n //1. Реализуйте метод, который сравнивает значение переменной и выводит сообщение в зависимости от этого значения с использованием конструкции switch.",
                "//Задание 1: Перечисления enum\r\n //1. Реализуйте перечисление для разных типов операций (сложение, вычитание, умножение, деление), и используйте его для выполнения арифметических операций с двумя числами.",
            };
            if (comboBox2.SelectedIndex >= 0 && comboBox2.SelectedIndex <= htmlContents.Length)
            {
                string login = UserAuthenticator.Login;
                selectIndex = comboBox2.SelectedIndex;
                selectCombobox = 2;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];


                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }


        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private async void comboBox3_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Классы, структуры и пространства имен</h1><h2>Классы и объекты</h2>   <p>C# является полноценным объектно-ориентированным языком. Это значит, что программу на C# можно представить в виде взаимосвязанных  взаимодействующих между собой объектов.</p> <p>Описанием объекта является <span class=""b"">класс</span>, а объект представляет экземпляр этого класса. Можно еще провести следующую аналогию.  У нас у всех есть некоторое представление о человеке, у которого есть имя, возраст, какие-то другие характеристики.  То есть некоторый шаблон - этот шаблон можно назвать классом. Конкретное воплощение этого шаблона может отличаться, например, одни люди имеют одно имя, другие - другое имя.  И реально существующий человек (фактически экземпляр данного класса) будет представлять объект этого класса.</p> <p>В принципе ранее уже использовались классы. Например, тип <span class=""b"">string</span>, который представляет строку, фактически является классом. Или, например, класс <span class=""b"">Console</span>,  у которого метод <code>WriteLine()</code> выводит на консоль некоторую информацию. Теперь же посмотрим, как мы можем определять свои собственные классы.</p> <p>По сути класс представляет новый тип, который определяется пользователем. Класс определяется с помощью ключевого слова <span class=""b"">сlass</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_182089""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">название_класса</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// содержимое класса</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После слова <span class=""b"">class</span> идет имя класса и далее в фигурных скобках идет собственно содержимое класса.  Например, определим в файле <span class=""b"">Program.cs</span> класс Person, который будет представлять человека:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_102984""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces""> </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""Классы и объекты в языке программирования C# и .NET"" src=""./pics/3.25.png""/> <p>Начиная с версии C# 12, если класс имеет пустое определение, то фигурные скобки после названия типа можно не использовать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_220206""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person;</code></div></div></td></tr></tbody></table></div></div> <p>Однако такой класс не особо показателен, поэтому добавим в него некоторую функциональность.</p> <h3>Поля и методы класса</h3> <p>Класс может хранить некоторые данные. Для хранения данных в классе применяются <span class=""b"">поля</span>. По сути <span class=""b"">поля класса</span> -  это переменные, определенные на уровне класса.</p> <p>Кроме того, класс может определять некоторое поведение или выполняемые действия. Для определения поведения в классе применяются методы.</p> <p>Итак, добавим в класс Person поля и методы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_153957""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;   </code><code class=""c# comments"">// имя</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;                     </code><code class=""c# comments"">// возраст</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в классе Person определено поле <code>name</code>, которое хранит имя, и поле <code>age</code>, которое хранит  возраст человека. В отличие от переменных, определенных в методах, поля класса могут иметь модификаторы, которые указываются перед полем.  Так, в данном случае, чтобы все поля были доступны вне класса Person поля определены с модификатором <span class=""b"">public</span>.</p> <p>При определении полей мы можем  присвоить им некоторые значения, как в примере выше в случае переменной <code>name</code>.  Если поля класса не инициализированы, то они получают значения по умолчанию. Для переменных числовых типов это число 0.</p> <p>Также в классе Person определен метод <code>Print()</code>. Методы класса имеют доступ к его поля, и в данном случае обращаемся к полям класса name и age для вывода их значения на консоль.  И чтобы этот метод был виден вне класса, он также определен с модификатором <span class=""b"">public</span>.</p> <h3>Создание объекта класса</h3> <p>После определения класса мы можем создавать его объекты. Для создания объекта применяются <span class=""b"">конструкторы</span>. По  сути конструкторы представляют специальные методы, которые называются так же как и класс, и которые вызываются при создании нового  объекта класса и выполняют инициализацию объекта. Общий синтаксис вызова конструктора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_821163""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">new</code> <code class=""c# plain"">конструктор_класса(параметры_конструктора);</code></div></div></td></tr></tbody></table></div></div> <p>Сначала идет оператор <span class=""b"">new</span>, который выделяет память для объекта, а после  него идет вызов <span class=""b"">конструктора</span>.</p> <h4>Конструктор по умолчанию</h4> <p>Если в классе не определено ни одного конструктора (как в случае с нашим классом Person), то для этого класса автоматически  создается пустой конструктор по умолчанию, который не принимает никаких параметров.</p> <p>Теперь создадим объект класса Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_960996""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();  </code><code class=""c# comments"">// создание объекта класса Person</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// определение класса Person</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""создание классов в языке программирования C# и .NET"" src=""./pics/3.26.png""/> <p>Для создания объекта Person используется выражение <code>new Person()</code>. В итоге после выполнения данного выражения в памяти  будет выделен участок, где будут храниться все данные объекта Person. А переменная <code>tom</code> получит ссылку на созданный объект,  и через эту переменную мы можем использовать данный объект и обращаться к его функциональности.</p> <h3>Обращение к функциональности класса</h3> <p>Для обращения к функциональности класса - полям, методам (а также другим элементам класса) применяется точечная нотация точки - после объекта класса ставится точка, а затем элемент класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_952324""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">объект.поле_класса</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">объект.метод_класса(параметры_метода)</code></div></div></td></tr></tbody></table></div></div> <p>Например, обратимся к полям и методам объекта Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_589640""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();  </code><code class=""c# comments"">// создание объекта класса Person</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// Получаем значение полей в переменные</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">personName = tom.name;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">personAge = tom.age;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {personName}  Возраст {personAge}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// Имя: Undefined  Возраст: 0</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# comments"">// устанавливаем новые значения полей</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">tom.name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">tom.age = 37;</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# comments"">// обращаемся к методу Print</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Tom  Возраст: 37</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number19 index18 alt2""> </div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод данной программы:</p> <div class=""console""> <pre class=""consoletext"">Имя: Undefined	Возраст: 0 Имя: Tom	Возраст: 37 </pre> </div> <h3>Добавление класса</h3> <p>Обычно классы помещаются в отдельные файлы. Нередко для одного класса предназначен один файл. Если мы работаем над проектом вне среды Visual Studio, используя .NET CLI, то нам достаточно добавить  новый файл класса в папку проекта. Например, добавим новый файл, который назовем <span class=""b"">Person.cs</span> и в котором определим следующий код:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_88825""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Person {name}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определен класс Person с одним полем name и методом Print.</p> <p>В файле <span class=""b"">Program.cs</span>, который представляет основной файл программы используем класс Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_843987""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Person Tom</code></div></div></td></tr></tbody></table></div></div> <img alt=""Использование классов в проекте в Visual Studio в языке программирования C#"" src=""./pics/3.42.png""/> <p>Visual Studio предоставляет по умолчанию встроенные шаблоны для добвления класса. Для добавления класса нажмем в Visual Studio правой кнопкой мыши на название проекта:</p> <img alt=""Добавление класса в Visual Studio в C#"" src=""./pics/3.39.png""/> <p>В появившемся контекстном меню выберем пункт <span class=""b"">Add -&gt; New Item...</span> (или <span class=""b"">Add -&gt; Class...</span>)</p> <p>В открывшемся окне добавления нового элемента убедимся, что в центральной части с шаблонами элементов у нас выбран пункт <span class=""b"">Class</span>.  А внизу окна в поле <span class=""b"">Name</span> введем название добавляемого класса - пусть он будет назваться <span class=""b"">Person</span>:</p> <img alt=""Добавление нового класса в Visual Studio в C#"" src=""./pics/3.40.png""/> <p>В качестве названия класса можно вводить как Person, так и Person.cs. И после нажатия на кнопку добавления в проект будет добавлен новый класс, в котором можно определить тот же код и также использовать в файле Program.cs.</p> <p>Таким образом, мы можем определять классы в отдельных файлах и использовать их в программе.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.1.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Конструкторы, инициализаторы и деконструкторы</h2>   <h3>Создание конструкторов</h3> <p>В прошлой статье для создания объекта использовался конструктор по умолчанию. Однако мы сами можем определить свои конструкторы. Как правило, конструктор выполняет инициализацию объекта.  При этом если в классе определяются свои конструкторы, то он лишается конструктора по умолчанию.</p> <p>На уровне кода конструктор представляет метод, который называется по имени класса, который может иметь параметры, но для него не надо определять  возвращаемый тип. Например, определим в классе Person простейший конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_803016""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();  </code><code class=""c# comments"">// Создание объекта класса Person</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Tom  Возраст: 37</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Создание объекта Person""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">age = 37;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Итак, здесь определен конструктор, который выводит на консоль некоторое сообщение и инициализирует поля класса.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_568673""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Person()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Создание объекта Person""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">age = 37;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Конструкторы могут иметь модификаторы, которые указываются перед именем конструктора. Так, в данном случае, чтобы конструктор был доступен вне класса Person, он определен с модификатором <span class=""b"">public</span>.</p> <p>Определив конструктор, мы можем вызвать его для создания объекта Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_577504""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();  </code><code class=""c# comments"">// Создание объекта Person</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае выражение <code>Person()</code> как раз представляет вызов определенного в классе конструктора (это больше не автоматический конструктор по умолчанию, которого у класса теперь нет).  Соответственно при его выполнении на консоли будет выводиться строка ""Создание объекта Person""</p> <p>Подобным образом мы можем определять и другие конструкторы в классе. Например, изменим класс Person следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_738335""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();          </code><code class=""c# comments"">// вызов 1-ого конструктора без параметров</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);     </code><code class=""c# comments"">//вызов 2-ого конструктора с одним параметром</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person sam = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25); </code><code class=""c# comments"">// вызов 3-его конструктора с двумя параметрами</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();          </code><code class=""c# comments"">// Имя: Неизвестно  Возраст: 18</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">bob.Print();          </code><code class=""c# comments"">// Имя: Bob  Возраст: 18</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">sam.Print();          </code><code class=""c# comments"">// Имя: Sam  Возраст: 25</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person() { name = </code><code class=""c# string"">""Неизвестно""</code><code class=""c# plain"">; age = 18; }      </code><code class=""c# comments"">// 1 конструктор</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">n) { name = n; age = 18; }         </code><code class=""c# comments"">// 2 конструктор</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">n, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">a) { name = n; age = a; }   </code><code class=""c# comments"">// 3 конструктор</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь в классе определено три конструктора, каждый из которых принимает различное количество параметров и устанавливает значения  полей класса. И мы можем вызвать один из этих конструкторов для создания объекта класса.</p> <p>Консольный вывод данной программы:</p> <div class=""console""> <pre class=""consoletext"">Имя: Неизвестно  Возраст: 18 Имя: Bob  Возраст: 18 Имя: Sam  Возраст: 25 </pre> </div> <p>Стоит отметить, что начиная с версии C# 9 мы можем сократить вызов конструктора, убрав из него название типа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_439848""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">();            </code><code class=""c# comments"">// аналогично new Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// аналогично new Person(""Bob"");</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person sam = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25);   </code><code class=""c# comments"">// аналогично new Person(""Sam"", 25);</code></div></div></td></tr></tbody></table></div></div> <h3>Ключевое слово this</h3> <p>Ключевое слово <span class=""b"">this</span> представляет ссылку на текущий экземпляр/объект класса. В каких ситуациях оно нам может пригодиться?</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_7904""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person sam = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25); </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">sam.Print();          </code><code class=""c# comments"">// Имя: Sam  Возраст: 25</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person() { name = </code><code class=""c# string"">""Неизвестно""</code><code class=""c# plain"">; age = 18; }</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) { </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name; age = 18; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) </code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ </code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name; </code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age; </code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В примере выше во втором и третьем конструкторе параметры называются также, как и поля класса. И чтобы разграничить параметры и поля класса, к полям класса обращение идет через ключевое слово <span class=""b"">this</span>.  Так, в выражении</p> <pre class=""b"">this.name = name;</pre> <p>первая часть - <code>this.name</code> означает, что <code>name</code> - это  поле текущего класса, а не название параметра name. Если бы у нас параметры и поля назывались по-разному, то использовать слово  <code>this</code> было бы необязательно. Также через ключевое слово <span class=""b"">this</span> можно обращаться к любому полю или методу.</p> <h3>Цепочка вызова конструкторов</h3> <p>В примере выше определены три конструктора. Все три конструктора выполняют однотипные действия - устанавливают значения полей name и age. Но этих повторяющихся действий могло быть больше.  И мы можем не дублировать функциональность конструкторов, а просто обращаться из одного конструктора к другому также через ключевое слово  <span class=""b"">this</span>, передавая нужные значения для параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_572863""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person() : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(</code><code class=""c# string"">""Неизвестно""</code><code class=""c# plain"">)    </code><code class=""c# comments"">// первый конструктор</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{ }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 18) </code><code class=""c# comments"">// второй конструктор</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{ }</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)     </code><code class=""c# comments"">// третий конструктор</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае первый конструктор вызывает второй, а второй конструктор вызывает третий. По количеству и типу параметров компилятор узнает,  какой именно конструктор вызывается. Например, во втором конструкторе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_234691""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 18)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{ }</code></div></div></td></tr></tbody></table></div></div> <p>идет обращение к третьему конструктору, которому передаются два значения. Причем в начале будет выполняться именно третий конструктор, и только потом код второго конструктора.</p> <p>Стоит отметить, что в примере выше фактически все конструкторы не определяют каких-то других действий, кроме как передают третьему конструктору некоторые значения. Поэтому в реальности в данном случае  проще оставить один конструктор, определив для его параметров значения по умолчанию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_49469""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person sam = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();          </code><code class=""c# comments"">// Имя: Неизвестно  Возраст: 18</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">bob.Print();          </code><code class=""c# comments"">// Имя: Bob  Возраст: 18</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">sam.Print();          </code><code class=""c# comments"">// Имя: Sam  Возраст: 25</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Неизвестно""</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 18)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И если при вызове конструктора мы не передаем значение для какого-то параметра, то применяется значение по умолчанию.</p> <h3>Первичные конструкторы</h3> <p>Начиная с версии <span class=""b"">C# 12</span> в язык C# была добавлена поддержка <span class=""b"">первичных конструкторов</span> (Primary constructors).  Первичные конструкторы позволяют добавлять параметры к определению класса и использовать эти параметры внутри класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_13575""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 38);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tom);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 18) { }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""name: {name}, age: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь для класса Person определен первичный конструктор с двумя параметрами - name и age. Эти параметры применяются для  используются в  методе Print.</p> <p>За кадром для каждого параметра первичного конструктора в классе создается приватное поле, которое хранит значение параметра. Благодаря этому они могут использоваться в теле класса.</p> <p>Кроме первичных конструкторов класс может определять дополнительные конструкторы, как примере выше. Но эти дополнительные конструкторы должны вызывать первичный конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_700460""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 18) { }</code></div></div></td></tr></tbody></table></div></div> <h3>Инициализаторы объектов</h3> <p>Для инициализации объектов классов можно применять <span class=""b"">инициализаторы</span>.  Инициализаторы представляют передачу в фигурных скобках значений доступным полям и свойствам объекта:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_374340""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, age = 31 };</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// или так</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// Person tom = new() { name = ""Tom"", age = 31 };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Print();          </code><code class=""c# comments"">// Имя: Tom  Возраст: 31</code></div></div></td></tr></tbody></table></div></div> <p>С помощью инициализатора объектов можно присваивать значения всем доступным полям и свойствам объекта в момент создания. При использовании инициализаторов следует учитывать следующие моменты:</p> <ul> <li><p>С помощью инициализатора мы можем установить значения только доступных из вне класса полей и свойств объекта.  Например, в примере выше поля name и age имеют модификатор доступа public, поэтому они доступны из любой части программы.</p></li> <li><p>Инициализатор выполняется после конструктора, поэтому если и в конструкторе, и в инициализаторе устанавливаются значения одних и тех же  полей и свойств, то значения, устанавливаемые в конструкторе, заменяются значениями из инициализатора.</p></li> </ul> <p>Инициализаторы удобно применять, когда поле или свойство класса представляет другой класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_210109""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person{ name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, company = { title = </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">} };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();          </code><code class=""c# comments"">// Имя: Tom  Компания: Microsoft</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company company;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person() </code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ </code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">company = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company();</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Компания: {company.title}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""> </div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">title = </code><code class=""c# string"">""Unknown""</code><code class=""c# plain"">;</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Обратите внимание, как устанавливается поле <code>company</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_417773""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">company = { title = </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Деконструкторы</h3> <p>Деконструкторы (не путать с деструкторами) позволяют выполнить декомпозицию объекта на отдельные части.</p> <p>Например, пусть у нас есть следующий класс Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_30860""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Deconstruct(</code><code class=""c# keyword"">out</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">personName, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">personAge)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">personName = name;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">personAge = age;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае мы могли бы выполнить декомпозицию объекта Person так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_418376""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 33);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) = person;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(age);     </code><code class=""c# comments"">// 33</code></div></div></td></tr></tbody></table></div></div> <p>Значения переменным из деконструктора передаюся по позиции. То есть первое возвращаемое значение в виде параметра personName передается первой переменной - name,  второе возващаемое значение - переменной age.</p> <p>По сути деконструкторы это не более,чем более удобный способ разложения объекта на компоненты. Это все равно, что если бы мы написали:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_102442""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 33);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name; </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">person.Deconstruct(</code><code class=""c# keyword"">out</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">age);</code></div></div></td></tr></tbody></table></div></div> <p>При получении значений из деконструктора нам необходимо предоставить столько переменных, сколько деконструктор возвращает значений. Однако бывает,  что не все эти значения нужны. И вместо возвращаемых значений мы можм использовать прочерк <span class=""b"">_</span>. Например, нам  надо получить только возраст пользователя:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_145541""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 33);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">(_, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) = person;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(age);    </code><code class=""c# comments"">// 33</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку первое возвращаемое значение - это имя пользователя, которое не нужно, в в данном случае вместо переменной прочерк.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Класс Program и метод Main. Программы верхнего уровня</h2>   <p>Точкой входа в программу на языке C# является метод Main. Именно с этого метода начинается выполнение программы на C#. И программа на C# должна обязательно иметь метод <code>Main</code>. Однако может возникнуть вопрос, какой еще метод Main, если,  например, Visual Studio 2022 по умолчанию создает проект консольного приложения со следующим кодом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_35487""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// See <a href=""https://aka.ms/new-console-template"">https://aka.ms/new-console-template</a> for more information</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello, World!""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>И эта программа никаких методов Main не содержит, но при этом нормально выполняется и выводит на консоль строку ""Hello, World!"", как и запланировано. Это так называемая программа  верхнего уровня (top-level program). А вызов <code>Console.WriteLine(""Hello, World!"")</code> представляет инструкцию вехнего уровня (top-level statement)</p> <p>Однако в реальности этот код неявно помещается компилятором в метод Main, который, в свою очередь, помещается в класс Program.  В действительности название класса может быть любым (как правило, это класс Program, собственно поэтому генерируемый по умолчанию файл кода  называется <span class=""b"">Program.cs</span>). Но метод Main является обязательной частью консольного приложения. Поэтому выше представленный код фактически  эквивалентен следующей программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_62247""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// See <a href=""https://aka.ms/new-console-template"">https://aka.ms/new-console-template</a> for more information</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello, World!""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Определение метода <span class=""b"">Main</span> обязательно начинается с модификатора <code>static</code>, которое указывает, что метод Main -  статический. Позже мы подробнее разберем, что все это значит.</p> <p>Возвращаемым типом метода <span class=""b"">Main</span> обязательно является тип  <span class=""b"">void</span>. Кроме того, в качестве параметра он принимает массив строк - <code>string[] args</code> - в реальной программе это те параметры,   через которые при запуске программы из консоли мы можем передать ей некоторые значения. Внутри метода располагаются действия, которые выполняет программа.</p> <p>До Visual Studio 2022 все предыдущие студии создавали по умолчанию примерно такой код. Но начиная с Visual Studio 2022  нам необязательно вручную определять класс Program и в нем метод Main - компилятор генерирует их самостоятельно.</p> <p>Если мы определяем какие-то переменные, константы, методы и обращаемся к ним, они помещаются в метод Main. Например, следующая программа верхнего уровня</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_293145""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">hello = </code><code class=""c# string"">""Hello METANIT.COM""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Print(hello);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Print(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(message);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>будет аналогична следующей программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_541402""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">hello = </code><code class=""c# string"">""Hello METANIT.COM""</code><code class=""c# plain"">;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Print(hello);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Print(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(message);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Если определяются новые типы, например, классы, то они помещаются вне класса Program. Например, код:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_102332""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.SayHello();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{ </code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello() =&gt;Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>будет аналогичен следующему</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_883827""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">tom.SayHello();</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако надо учитывать, что опредления типов (в частности классов) должны идти в конце файла после инструкций верхнего уровня. То есть:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_981326""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// инструкции верхнего уровня (top-level statements)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.SayHello();</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# comments"">// определение класса идет после инструкций верхнего уровня</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, мы можем продолжать писать программы верхнего уровня без явного  определения метода Main. Либо мы можем явным образом определить метод Main и класс Program:</p> <img alt=""top-level programs in C# и Visual Studio 2022"" src=""./pics/3.35.png""/> <p>И этот код будет выполняться аналогичным образом, как если бы мы не использовали класс Program и метод Main.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Структуры</h2>   <p>Наряду с классами структуры представляют еще один способ создания собственных типов данных в C#. Более того многие примитивные типы, например,  int, double и т.д., по сути являются структурами.</p> <h3>Определение структуры</h3> <p>Для определения структуры применяется ключевое слово <span class=""b"">struct</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_396948""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">имя_структуры</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// элементы структуры</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После слова <span class=""b"">struct</span> идет название структуры и далее в фигурных скобках размещаются элементы структуры - поля, методы и т.д.</p> <p>Например, определим структуру, которая будет называться Person и которая будет представлять человека:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_875201""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Начиная с версии C# 12, если структура имеет пустое определение (не содержат полей, свойств, методов), то фигурные скобки после названия типа можно не использовать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_868451""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person;</code></div></div></td></tr></tbody></table></div></div> <p>Как и классы, структуры могут хранить состояние в виде полей (переменных) и определять поведение в виде методов. Например, добавим в структуру Person пару полей и метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_862126""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае определены две переменные - name и age для хранения соответственно имени и возраста человека и метод Print для вывода информации о человеке на консоль.</p> <p>И как и в случае с классами, для обращения к функциональности структуры - полям, методам и другим компонентам структуры  применяется точечная нотация - после объекта структуры ставится точка, а затем указывается компонент структуры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_184068""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">объект.поле_структуры</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">объект.метод_структуры(параметры_метода)</code></div></div></td></tr></tbody></table></div></div> <h3>Создание объекта структуры</h3> <h4>Инициализация с помощью конструктора</h4> <p>Для использования структуры ее необходмо инициализировать. Для инициализации создания объектов структуры, как и в случае с классами, применяется вызов конструктура с оператором <span class=""b"">new</span>.  Даже если в коде стуктуры не определено ни одного конструктора, тем не менее   имеет как минимум один конструктор - конструктор по умолчанию, который генерируется компилятором. Этот конструктор не принимает параметров и создает объект структуры со значениями по умолчанию.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_702235""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">new</code> <code class=""c# plain"">название_структуры();</code></div></div></td></tr></tbody></table></div></div> <p>Например, создадим объект структуры Person с помощью конструктора по умолчанию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_482756""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();  </code><code class=""c# comments"">// вызов конструктора</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// или так </code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// Person tom = new();</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;   </code><code class=""c# comments"">// изменяем значение по умолчанию в поле name</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Tom  Возраст: 0</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае создается объект tom. Для его создания вызывается конструктор по умолчанию, который устанавливает значения по умолчанию для его полей. Для числовых данных это значение 0, поэтому  поле <code>age</code> будет иметь значение 0. Для строк это значение <code>null</code>, которое указывает на отсутствие значения. Но далее, если поля доступны  (а в данном случае поскольку они имеют модификатор <code>public</code> они доступны), мы можем изменить их значения. Так, здесь полю <code>name</code> присваивается строка ""Tom"". Соответственно  при выполнении метода <code>Print()</code> мы получим следующий консольный вывод:</p> <div class=""console""><pre class=""consoletext"">Имя: Tom  Возраст: 0</pre></div> <h4>Непосредственная иницилизация полей</h4> <p>Если все поля структуры доступны (как в случае с полями структуры Person, который имеют модификатор <span class=""b"">public</span>),  то структуру можно инициализировать без вызова конструктора. В этом случае необходимо присвоить значения всем полям структуры перед получением значений полей и обращением к методам структуры.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_705392""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom;         </code><code class=""c# comments"">// не вызываем конструктор</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// инициализация полей</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.name = </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.age = 37;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Sam  Возраст: 37</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Инициализация полей по умолчанию</h3> <p>Стоит отметить, что начиная с версии C# 10, мы можем напрямую инициализировать поля структуры при их определении (до C# 10 это делать было нельзя):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_938038""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя:Tom  Возраст: 1</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// инициализация полей значениями по умолчанию - доступна с C#10</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person() { }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt;Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако даже в этом случае, несмотря на значения по умолчанию, необходимо явно определить и вызывать конструктор, если мы хотим использовать эти значения.</p> <h3>Конструкторы структуры</h3> <p>Как и класс, структура может определять конструкторы. Например, добавим в структуру Person конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_26872""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person sam = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// !!!! Имя:   Возраст: 0</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">bob.Print();    </code><code class=""c# comments"">// Имя: Bob  Возраст: 1 </code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">sam.Print();    </code><code class=""c# comments"">// Имя: Sam  Возраст: 25</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1)</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в структуре Person определен конструктор с двумя параметрами, для которых предоставлены значения по умолчания. Однако обратите внимание на  создание первого объекта структуры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_853032""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(); </code><code class=""c# comments"">// по прежнему используется конструктор без параметров по умолчанию</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// !!!! Имя:   Возраст: 0</code></div></div></td></tr></tbody></table></div></div> <p>Здесь по-прежнему применяется конструктор по умолчанию, тогда как при инициализации остальных двух переменных структуры применяется явно определенный конструктор.</p> <p>Однако начиная с версии C# 10 мы можем определить свой конструктор без параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_132825""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Tom  Возраст: 37</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person()</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">age = 37;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что до версии C# 11 при определении конструктора структуру в нем необходимо было инициализировать все поля структуры, начиная с версии C# 11 это делать необязательно.</p> <p>В случае если нам необходимо вызывать конструкторы с различным количеством параметров, то мы можем, как и в случае с классами, вызывать их по цепочке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_210454""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person sam = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Tom  Возраст: 1</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">bob.Print();    </code><code class=""c# comments"">// Имя: Bob  Возраст: 1 </code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">sam.Print();    </code><code class=""c# comments"">// Имя: Sam  Возраст: 25</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person() : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">)</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ }</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 1)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ }</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод программы:</p> <pre class=""sh"">Имя: Tom  Возраст: 1 Имя: Bob  Возраст: 1  Имя: Sam  Возраст: 25 </pre> <p>Начиная с версии <span class=""b"">C# 12</span> для структур, как и для классов, можно определять первичные конструкторы. Первичные конструкторы позволяют добавлять параметры к определению класса/структуры и использовать эти параметры внутри класса/структуры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_924541""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 38);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">struct</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 18) { }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""name: {name}, age: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь для структуры Person определен первичный конструктор с двумя параметрами - name и age. За кадром для каждого параметра первичного конструктора в классе создается приватное поле, которое хранит значение параметра. Благодаря этому они могут использоваться в теле класса.</p> <p>Кроме первичных конструкторов класс может определять дополнительные конструкторы, как примере выше. Но эти дополнительные конструкторы должны вызывать первичный конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_954802""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name, 18) { }</code></div></div></td></tr></tbody></table></div></div> <h3>Инициализатор структуры</h3> <p>Также, как и для класса, можно использовать инициализатор для создания структуры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_418454""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, age = 22 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Имя: Tom  Возраст: 22</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При использовании инициализатора сначала вызывается конструктор без параметров: если мы явным образом не определили конструктор без параметров, то вызывается конструктор по умолчанию. А затем  его полям присваиваются соответствующие значения.</p> <h3>Копирование структуры с помощью with</h3> <p>Если нам необходимо скопировать в один объект структуры значения из другого с небольшими изменениями, то мы можем использовать оператор  <span class=""b"">with</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_125201""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, age = 22 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = tom with { name = </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">bob.Print();    </code><code class=""c# comments"">// Имя: Bob  Возраст: 22</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае объект bob получает все значения объекта tom, а затем после оператора <span class=""b"">with</span> в фигурных скобках указывается  поля со значениями, которые мы хотим изменить.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.16.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Типы значений и ссылочные типы</h2>   <p>Ранее мы рассматривали следующие элементарные типы данных: int, byte, double, string, object и др. Также есть сложные типы: структуры, перечисления,  классы. Все эти типы данных можно разделить на типы значений, еще называемые значимыми типами, (value types) и ссылочные типы (reference types). Важно понимать между ними  различия.</p> <p>Типы значений:</p> <ul> <li><p>Целочисленные типы (<code>byte, sbyte, short, ushort, int, uint, long, ulong</code>)</p></li> <li><p>Типы с плавающей запятой (<code>float, double</code>)</p></li> <li><p>Тип <code>decimal</code></p></li> <li><p>Тип <code>bool</code></p></li> <li><p>Тип <code>char</code></p></li> <li><p>Перечисления <code>enum</code></p></li> <li><p>Структуры (<code>struct</code>)</p></li> </ul> <p>Ссылочные типы:</p> <ul> <li><p>Тип <code>object</code></p></li> <li><p>Тип <code>string</code></p></li> <li><p>Классы (<code>class</code>)</p></li> <li><p>Интерфейсы (<code>interface</code>)</p></li> <li><p>Делегаты (<code>delegate</code>)</p></li> </ul> <p>В чем же между ними различия? Для этого надо понять организацию памяти в .NET. Здесь память делится на два типа: стек и куча (heap).  Параметры и переменные метода, которые представляют типы значений, размещают свое значение в стеке.  Стек представляет собой структуру данных, которая растет снизу вверх: каждый новый добавляемый элемент помещается поверх предыдущего.  Время жизни переменных таких типов ограничено их контекстом. Физически стек - это некоторая область памяти в адресном пространстве.</p> <p>Когда программа только запускается на выполнение, в конце блока памяти, зарезервированного для стека устанавливается указатель стека.  При помещении данных в стек указатель переустанавливается таким образом, что снова указывает на новое свободное место. При вызове каждого отдельного метода в стеке будет  выделяться область памяти или фрейм стека, где будут храниться значения его параметров и переменных.</p> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_489582""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Calculate(5);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Calculate(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">t)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 6;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 7;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">z = y + t;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При запуске такой программы в стеке будут определяться два фрейма - для метода Main (так как он вызывается при запуске программы) и для метода Calculate:</p> <img alt=""Структура стека в языке программирования C#"" src=""./pics/2.4.png""/> <p>При вызове этого метода Calculate в его фрейм в стеке будут помещаться значения t, x, y и z. Они определяются в контексте данного метода.  Когда метод отработает, область памяти, которая выделялась под стек, впоследствии может быть использована другими методами.</p> <p>Причем если параметр или переменная метода представляет тип значений, то в стеке будет храниться непосредсвенное значение этого параметра или переменной. Например, в данном случае переменные и параметр метода Calculate  представляют значимый тип - тип int, поэтому в стеке будут храниться их числовые значения.</p> <p>Ссылочные типы хранятся в куче или хипе, которую можно представить как неупорядоченный набор разнородных объектов. Физически  это остальная часть памяти, которая доступна процессу.</p> <p>При создании объекта ссылочного типа в стеке помещается ссылка на адрес в куче (хипе). Когда объект ссылочного типа перестает  использоваться, в дело вступает автоматический сборщик мусора:  он видит, что на объект в хипе нету больше ссылок, условно удаляет этот объект и очищает память - фактически помечает, что данный сегмент памяти может быть использован для хранения других данных.</p> <p>Так, в частности, если мы изменим метод Calculate следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_636819""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Calculate(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">t)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">object</code> <code class=""c# plain"">x = 6;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 7;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">z = y + t;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>То теперь значение переменной x будет храниться в куче, так как она представляет ссылочный тип object, а в стеке будет храниться ссылка на объект в куче.</p> <img alt=""Ссылочные типы в куче в языке программирования C#"" src=""./pics/2.5.png""/> <h3>Составные типы</h3> <p>Теперь рассмотим ситуацию, когда тип значений и ссылочный тип представляют составные типы - структуру и класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_892926""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">State state1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State(); </code><code class=""c# comments"">// State - структура, ее данные размещены в стеке</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Country country1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Country(); </code><code class=""c# comments"">// Country - класс, в стек помещается ссылка на адрес в хипе</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">                                  </code><code class=""c# comments"">// а в хипе располагаются все данные объекта country1</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">struct</code> <code class=""c# plain"">State</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">x;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">y;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Country</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">x;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">y;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в методе Main в стеке выделяется память для объекта state1. Далее в стеке создается ссылка для объекта country1 (<code>Country country1</code>),  а с помощью вызова конструктора с ключевым словом new выделяется место в хипе (<code>new Country()</code>). Ссылка в стеке для объекта country1 будет представлять адрес на место в хипе, по которому размещен данный объект..</p> <img alt=""Ссылычные типы и типы значений в C#"" src=""./pics/2.2.png""/> <p>Таким образом, в стеке окажутся все поля структуры state1 и ссылка на объект country1 в хипе.</p> <p>Но, допустим, в структуре State также определена переменная ссылочного типа Country. Где она будет хранить свое значение, если она определена в типе значений?</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_221718""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">State state1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Country country1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Country();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">struct</code> <code class=""c# plain"">State</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">x;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">y;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Country country;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">State()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">x = 0;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">y = 0;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">country = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Country();</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Country</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">x;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">y;</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Значение переменной state1.country также будет храниться в куче, так как эта переменная представляет ссылочный тип:</p> <img alt=""Стек и куча в языке программирования C#"" src=""./pics/2.62.png""/> <h3>Копирование значений</h3> <p>Тип данных надо учитывать при копировании значений. При присвоении данных объекту значимого типа он получает копию данных. При присвоении данных объекту ссылочного типа он получает не копию объекта,  а ссылку на этот объект в хипе. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_675279""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">State state1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State(); </code><code class=""c# comments"">// Структура State</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">State state2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">state2.x = 1;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">state2.y = 2;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">state1 = state2;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">state2.x = 5; </code><code class=""c# comments"">// state1.x=1 по-прежнему</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(state1.x); </code><code class=""c# comments"">// 1</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(state2.x); </code><code class=""c# comments"">// 5</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">Country country1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Country(); </code><code class=""c# comments"">// Класс Country</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Country country2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Country();</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">country2.x = 1;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">country2.y = 4;</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">country1 = country2;</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">country2.x = 7; </code><code class=""c# comments"">// теперь и country1.x = 7, так как обе ссылки и country1 и country2 </code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">                </code><code class=""c# comments"">// указывают на один объект в хипе</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">Console.WriteLine(country1.x); </code><code class=""c# comments"">// 7</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">Console.WriteLine(country2.x); </code><code class=""c# comments"">// 7</code></div></div></td></tr></tbody></table></div></div> <p>Так как state1 - структура, то при присвоении <code>state1 = state2</code> она получает копию структуры state2. А объект класса country1  при присвоении <code>country1 = country2;</code> получает ссылку на тот же объект, на который указывает country2. Поэтому с изменением  country2, так же будет меняться и country1.</p> <h3>Ссылочные типы внутри типов значений</h3> <p>Теперь рассмотрим более изощренный пример, когда внутри структуры у нас может быть переменная ссылочного типа, например, какого-нибудь класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_443109""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">State state1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">State state2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">state2.country.x = 5;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">state1 = state2;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">state2.country.x = 8; </code><code class=""c# comments"">// теперь и state1.country.x=8, так как state1.country и state2.country</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">                      </code><code class=""c# comments"">// указывают на один объект в хипе</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(state1.country.x); </code><code class=""c# comments"">// 8</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(state2.country.x); </code><code class=""c# comments"">// 8</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">struct</code> <code class=""c# plain"">State</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">x;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">y;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Country country;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">State()</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">x = 0;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">y = 0;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">country = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Country(); </code><code class=""c# comments"">// выделение памяти для объекта Country</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Country</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">x;</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">y;</code></div><div class=""line number27 index26 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Переменные ссылочных типов в структурах также сохраняют в стеке ссылку на объект в хипе. И при присвоении двух структур  <code>state1 = state2;</code> структура state1 также получит ссылку на объект country в хипе. Поэтому изменение state2.country повлечет за  собой также изменение state1.country.</p> <img src=""./pics/2.3.png""/> <h3>Объекты классов как параметры методов</h3> <p>Организацию объектов в памяти следует учитывать при передаче параметров по значению и по ссылке. Если параметры методов представляют объекты классов,  то использование параметров имеет некоторые особенности. Например, создадим метод, который в качестве параметра принимает объект Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_574337""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person p = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, age = 23 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">ChangePerson(p);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(p.name); </code><code class=""c# comments"">// Alice</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(p.age); </code><code class=""c# comments"">// 23</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">ChangePerson(Person person)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// сработает</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">person.name = </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// сработает только в рамках данного метода</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Bill""</code><code class=""c# plain"">, age = 45 };</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person.name); </code><code class=""c# comments"">// Bill</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""> </div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При передаче объекта класса по значению в метод передается копия ссылки на объект. Эта копия указывает на тот же объект, что и исходная ссылка,  потому мы можем изменить отдельные поля и свойства объекта, но не можем изменить сам объект. Поэтому в примере выше сработает  только строка <code>person.name = ""Alice""</code>.</p> <p>А другая строка <code>person = new Person { name = ""Bill"", age = 45 }</code> создаст новый объект в памяти, и person теперь будет указывать на новый объект в памяти.  Даже если после этого мы его изменим, то это никак не повлияет на ссылку <code>p</code> в методе Main, поскольку ссылка p все еще указывает на старый объект в памяти.</p> <p>Но при передаче параметра по ссылке (с помощью ключевого слова <span class=""b"">ref</span>) в метод в качестве аргумента передается сама ссылка на объект в памяти. Поэтому можно изменить как поля и свойства объекта, так и сам объект:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_260965""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person p = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, age = 23 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">ChangePerson(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">p);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(p.name); </code><code class=""c# comments"">// Bill</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(p.age); </code><code class=""c# comments"">// 45</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">ChangePerson(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">Person person)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// сработает</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">person.name = </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// сработает</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { name = </code><code class=""c# string"">""Bill""</code><code class=""c# plain"">, age = 45 };</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Операция <code>new</code> создаст новый объект в памяти, и теперь ссылка person (она же ссылка p из метода Main) будет указывать уже на новый объект в памяти.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Область видимости (контекст) переменных и констант</h2>   <p>Каждая переменная доступна в рамках определенного контекста или области видимость. Вне этого контекста переменная уже не существует.</p> <p>Существуют различные контексты:</p> <ul> <li><p>Контекст класса. Переменные, определенные на уровне класса, доступны в любом методе этого класса. Их еще называют глобальными переменными или полями</p><p></p></li> <li><p>Контекст метода. Переменные, определенные на уровне метода, являются локальными и доступны только в рамках данного метода. В других методах они недоступны</p><p></p></li> <li><p>Контекст блока кода. Переменные, определенные на уровне блока кода, также являются локальными и доступны только в рамках данного блока. Вне  своего блока кода они не доступны.</p><p></p></li> </ul> <p>Например, пусть код программы определен следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_623769""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.PrintName();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.PrintSurname();</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person                            </code><code class=""c# comments"">// начало контекста класса</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">type = </code><code class=""c# string"">""Person""</code><code class=""c# plain"">;             </code><code class=""c# comments"">// переменная уровня класса</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintName()             </code><code class=""c# comments"">// начало контекста метода PrintName</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;            </code><code class=""c# comments"">// переменная уровня метода</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{                               </code><code class=""c# comments"">// начало контекста блока кода</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">string</code> <code class=""c# plain"">shortName = </code><code class=""c# string"">""Tomas""</code><code class=""c# plain"">; </code><code class=""c# comments"">// переменная уровня блока кода</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(type);    </code><code class=""c# comments"">// в блоке доступна переменная класса</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// в блоке доступна переменная окружающего метода</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(shortName);</code><code class=""c# comments"">// в блоке доступна переменная этого же блока</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}                               </code><code class=""c# comments"">// конец контекста блока кода, переменная shortName уничтожается</code></div><div class=""line number18 index17 alt1""> </div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(type);        </code><code class=""c# comments"">// в методе доступна переменная класса</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(name);        </code><code class=""c# comments"">// в методе доступна переменная этого же метода</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">//Console.WriteLine(shortName); //так нельзя, переменная c определена в блоке кода</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">//Console.WriteLine(surname);     //так нельзя, переменная surname определена в другом методе</code></div><div class=""line number23 index22 alt2""> </div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}       </code><code class=""c# comments"">// конец контекста метода PrintName, переменная name уничтожается</code></div><div class=""line number25 index24 alt2""> </div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintSurname()      </code><code class=""c# comments"">// начало контекста метода PrintSurname</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">surname = </code><code class=""c# string"">""Smith""</code><code class=""c# plain"">;   </code><code class=""c# comments"">// переменная уровня метода</code></div><div class=""line number29 index28 alt2""> </div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(type);        </code><code class=""c# comments"">// в методе доступна переменная класса</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(surname);     </code><code class=""c# comments"">// в методе доступна переменная этого же метода </code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}       </code><code class=""c# comments"">// конец конекста метода PrintSurname, переменная surname уничтожается</code></div><div class=""line number33 index32 alt2""> </div><div class=""line number34 index33 alt1""><code class=""c# plain"">}   </code><code class=""c# comments"">// конец контекста класса, переменная type уничтожается</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определенно четыре переменных: type, name, shortName и surname. Каждая из них существует в своем контексте. Переменная <code>type</code>  существует в контексте всего класса Person и доступна в любом месте и блоке кода в методах PrintName и PrintSurname.</p> <p>Переменная <code>name</code> существует только в рамках метода PrintName. Также как и переменная <code>surname</code> существует в  рамках метода PrintSurname. В методе PrintName мы не можем обратиться к переменной <code>surname</code>, так как она в другом контексте.</p> <p>Переменная <code>shortName</code> существует только в блоке кода, границами которого являются открывающая и закрывающая фигурные  скобки. Вне его границ переменная shortName не существует и к ней нельзя обратиться.</p> <p>Нередко границы различных контекстов можно ассоциировать с открывающимися и закрывающимися фигурными скобками, как в данном случае, которые задают пределы блока кода, метода, класса.</p> <p>При работе с переменными надо учитывать, что локальные переменные, определенные в методе или в блоке кода, скрывают переменные уровня класса, если их имена совпадают:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_38904""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;             </code><code class=""c# comments"">// переменная уровня класса</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintName() </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tomas""</code><code class=""c# plain"">;      </code><code class=""c# comments"">// переменная уровня метода скрывает переменную уровня класса</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// Tomas</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">} </code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При объявлении переменных также надо учитывать, что в одном контексте нельзя определить несколько переменных с одним и тем же именем.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/1.6.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Пространства имен</h2>   <p>Обычно определяемые классы и другие типы в .NET не существуют сами по себе, а заключаются в специальные контейнеры -  <span class=""b"">пространства имен</span>. Пространства имен позволяют организовать код программы в логические блоки,  поволяют объединить и отделить от остального кода некоторую функциональность, которая связана некоторой общей идеей или которая  выполняет определенную задачу.</p> <p>Для определения пространства имен применяется ключевое слово <span class='=""b""'>namespace</span>, после которого идет название название пространства имен:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_691732""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">имя_пространства_имен</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// содержимое пространства имен</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Например, определим в файле <span class=""b"">Program.cs</span> пространство имен, которое будет называться <span class=""b"">Base</span></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_668380""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь пространство имен содержит класс Person, которой имеет одну переменную - name, конструктор и метод Print.</p> <img alt=""пространства имен в языке программирования C# и .NET"" src=""./pics/3.27.png""/> <p>Теперь попробуем использовать класс Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_758122""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Ошибка - Visual Studio не видит класс Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь на первой строке мы столкнемся с ошибкой, так как Visual Studio не может найти класс Person. Чтобы все-таки обратиться к классу Person,  необходимо использовать полное имя этого класса с учетом пространства имен:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_930870""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Base.Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();          </code><code class=""c# comments"">// Имя: Tom</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку класс Person располагается в пространстве имен Base, то его полное имя - <span class=""b"">Base.Person</span>. Соответственно, используя это имя, мы можем обращаться  к данному классу вне его пространства имен.</p> <h3>Подключение пространства имен</h3> <p>Однако полное имя класса с учетом пространства имен добавляет в код избыточность - особенно, если пространство имен содержит множество классов, которые мы хотим использовать.  И чтобы не писать полное имя класса, мы можем просто подключить пространство имен с помощью директивы <span class=""b"">using</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_401714""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Base; </code><code class=""c# comments"">// подключение пространства имен Base</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Print();     </code><code class=""c# comments"">// Имя: Tom</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""подключение пространства имен и using в языке программирования C# и .NET"" src=""./pics/3.28.png""/> <h3>Вложенные пространства имен</h3> <p>Одни пространства имен могут содержать другие. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_271188""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">namespace</code> <code class=""c# plain"">PersonTypes</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">OrganisationTypes.Company company;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, OrganisationTypes.Company company) </code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{ </code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name; </code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">this</code><code class=""c# plain"">.company = company; </code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name} ""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">company.Print();</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">namespace</code> <code class=""c# plain"">OrganisationTypes</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">string</code> <code class=""c# plain"">title;</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">title) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.title = title;</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Название компании: {title}""</code><code class=""c# plain"">);</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number30 index29 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае классы Person и Company находятся в разных вложенных пространствах имен, поэтому чтобы в классе Person использовать класс Company, надо прописывать имя класса с учетом его пространства имен:  <code>OrganisationTypes.Company</code> (так как оба класса в итоге находятся в общем пространстве - Base, то его имя можно не указывать в названии класса) или подключать пространство имен класса Company с помощью директивы <code>using</code>. </p> <p>Для обращения к этим классам вне пространства Base необходимо использовать всю цепочку пространств имен:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_474161""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Base.PersonTypes; </code><code class=""c# comments"">// подключение пространства имен Base.PersonTypes для класса Person</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Base.OrganisationTypes.Company microsoft = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, microsoft);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();     </code><code class=""c# comments"">// Имя: Tom   Название компании: Microsoft</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">namespace</code> <code class=""c# plain"">PersonTypes</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">OrganisationTypes.Company company;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, OrganisationTypes.Company company) </code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{ </code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name; </code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">this</code><code class=""c# plain"">.company = company; </code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name} ""</code><code class=""c# plain"">);</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">company.Print();</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">namespace</code> <code class=""c# plain"">OrganisationTypes</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">string</code> <code class=""c# plain"">title;</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">title) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.title = title;</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Название компании: {title}""</code><code class=""c# plain"">);</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number35 index34 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number36 index35 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Пространства имен уровня файла</h3> <p>Начиная с .NET 6 и C# 10 можно определять пространства имен на уровне файла. Например, добавим в проект новый файл с кодом c#. Для этого в Visual Studio  нажмем на название проекта правой кнопкой мыши и в появившемся меню выберем пункт <span class=""b"">Add -&gt; New Item...</span></p> <img alt=""добавление нового пространства имен C# в Visual Studio"" src=""./pics/3.29.png""/> <p>В окне добавления нового элемента выберем пункт <span class=""b"">Class</span> и поле <span class=""b"">Name</span> в качестве имени файла укажем  <span class=""b"">Base.cs</span></p> <img alt=""пространства имен уровня файла C# в Visual Studio"" src=""./pics/3.30.png""/> <p>После этого в проект будет добавлен файл <span class=""b"">Base.cs</span>. Удалим из него все содержимое по умолчанию и определим в нем следующий код:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_861740""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Имя: {name} ""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Директива <code>namespace Base</code> в начале файла указывает, что содержимое файла будет представлять пространство имен Base.</p> <p>Теперь подключим это пространство имен в файле <span class=""b"">Program.cs</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_321648""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Base; </code><code class=""c# comments"">// подключение пространства имен Base</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Print();</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.7.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Глобальные пространства имен</h2>   <p>Если мы хотим использовать какое-нибудь пространство имен в файлах кода в проекте, то по умолчанию нам надо его подключать во все файлы, где мы планируем его использовать.</p> <p>Например, пусть у нас в проекте есть три файла с кодом:</p> <img alt=""Глобальные пространства имен в C# и .NET"" src=""./pics/3.33.png""/> <p>В файле <span class=""b"">Base.cs</span> определяется класс Company в пространстве <span class=""b"">Base</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_377789""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">Base;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">title;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">title) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.title = title;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Компания: {title}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В файле <span class=""b"">Person.cs</span> определен класс Person, который использует класс Company:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_870739""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Base;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Company company;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, Company company)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.company = company;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">company.Print();</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Чтобы использовать класс Company мы подключаем его пространство имен: <code>using Base;</code></p> <p>В классе <span class=""b"">Program.cs</span> используются классы Person и Company:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_480670""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Base;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Company microsoft = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, microsoft);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();</code></div></div></td></tr></tbody></table></div></div> <p>Опять же чтобы использовать класс Company, подключается его пространство имен: <code>using Base;</code></p> <p>И таких файлов, где надо подключать пространство Base (или какое-то другое) может быть множество. Это не очень удобно. И в .NET 6 для этого предложена  концепция <span class=""b"">глобальных пространств имен</span>, который подключаются один раз но сразу во все файлы кода в проекте. Для этого нам достаточно в одном файле прописать директиву:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_844783""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">подключаемое_пространство_имен;</code></div></div></td></tr></tbody></table></div></div> <p>Например, изменим файл <span class=""b"">Program.cs</span> следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_24973""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">Base;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Company microsoft = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, microsoft);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();</code></div></div></td></tr></tbody></table></div></div> <p>Теперь пространство Base подключается во все файлы кода в проекте. И из файла <span class=""b"">Person.cs</span> мы можем убрать строку</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_616236""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Base;</code></div></div></td></tr></tbody></table></div></div> <h3>Определение глобальных пространств в отдельном файле</h3> <p>Однако вышеуказанный подход опять же может быть не очень удобным, поскольку проще определить глобальные пространство имен, которые подключаются во весь проект  где-то в одном месте. И для этого в Visual Studio 2022 мы можем добавить в проект новый файл с кодом C# и в нем определить набор подключаемых  пространств имен. Например, добавим в проект файл, который назовем <span class=""b"">GlobalUsings.cs</span> и в котором определим следующее содержимое:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_3931""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Text;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Reflection;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">Base;</code></div></div></td></tr></tbody></table></div></div> <p>И этот набор пространств имен будет автоматически подключаться во все файлы кода в проекте.</p> <img alt=""Файл GlobalUsings.cs и глобальные пространства имен в C# и .NET и в Visual Studio 2022"" src=""./pics/3.34.png""/>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Подключение пространств имен по умолчанию</h2>   <p>Все классы существуют в некотором пространстве имен, и чтобы эти классы использовать, необходимо подключить их пространства имен, либо использовать полное название класса с указанием его пространства имен.  Однако начиная с Visual Studio 2022 и .NET 6 и C# 10 мы можем просто в файле программы написать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_825596""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>При этом не подключая явно пространство имен <code>System</code>, где располагается класс <code>Console</code>, тем не менее этот класс будет доступен, и мы его сможем использовать в любом файле кода C# в проекте.  Дело в том, что начиная с .NET 6 в проекте по умолчанию подключается ряд наиболее часто используемых пространств имен, поэтому нам их не надо явно подключать. Эта настройка действует на уровне всего проекта.  Так, откроем файл проекта. Для этого либо двойным кликом левой кнопкой мыши нажмем на проект, либо нажмем на проект правой кнопкой мыши и в появившемся меню выберем пункт  <span class=""b"">Edit Project File</span></p> <img alt=""ImplicitUsings в C# в Visual Studio"" src=""./pics/3.31.png""/> <p>После этого Visual Studio откроет нам файл проекта, который будет выглядеть примерно следующим образом:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_645411""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Project</code> <code class=""xml color1"">Sdk</code><code class=""xml plain"">=</code><code class=""xml string"">""Microsoft.NET.Sdk""</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;Exe&lt;/</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;</code></div><div class=""line number5 index4 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;net6.0&lt;/</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;</code></div><div class=""line number6 index5 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div><div class=""line number7 index6 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">Project</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь строка</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_589874""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>точнее элемент <code>&lt;ImplicitUsings&gt;</code> задает подключение некоторого набора пространств имен по умолчанию. Значение <span class=""b"">enable</span> указывает,  что эта настройка будет применяться.</p> <p>Если мы запустим проект на выполнение, то после компиляции проект в проекте в папке <span class=""b"">obj/Debug/net6.0</span>  можно будет увидеть файл <span class=""b"">[Имя_проекта].GlobalUsings.g.cs</span> (например, у меня проект называется HelloApp, соответственно файл будет  называться <span class=""b"">HelloApp.GlobalUsings.g.cs</span>). Если мы откроем этот файл, то увидим там следующее содержимое:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_870276""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System.Collections.Generic;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System.IO;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System.Linq;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System.Net.Http;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System.Threading;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">global </code><code class=""c# keyword"">using</code> <code class=""c# plain"">global::System.Threading.Tasks;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь перечислены все те пространства имен, которые подключаются в проект по умолчанию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_656285""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">System</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">System.Collections.Generic</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">System.IO</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">System.Linq</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">System.Net.Http</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">System.Threading</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">System.Threading.Tasks</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что это набор пространств имен, которые подключаются в проект консольного приложения по умолчанию, у других типов проектов набор подключаемых пространств может отличаться.</p> <h3>Отключение пространств по умолчанию</h3> <p>В проектах, создаваемых в Visual Studio 2022 для .NET 6 и C# 10 эта возможность включена по умолчанию. Тем не менее при необходимости мы ее можем отключить. Для этого изменим эту настройку следующим образом:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_604478""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;disable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>После этого Visual Studio 2022 подчеркнет нам класс <code>Console</code>, так как он нигде не определен в проекте, а его пространство имен не подключено:</p> <img alt=""ImplicitUsings в .NET 6 и C# 10 в Visual Studio 2022"" src=""./pics/3.32.png""/> <p>В этом случае нам потребуется либо подключить пространство имен <code>System</code>, где располагается класс Console, либо использовать его полное имя:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_201633""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System;   </code><code class=""c# comments"">// или подключить пространство System</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello world""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// или использовать полное имя класса</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">System.Console.WriteLine(</code><code class=""c# string"">""Hello work""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h3>Подключение и отключение пространств по отдельности</h3> <p>Вместо подключения по умолчанию некоторого набора пространств имен по умолчанию также можно подключать и отключать по отдельности пространств имен. Так,  изменим файл проекта следующим образом:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_144888""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Project</code> <code class=""xml color1"">Sdk</code><code class=""xml plain"">=</code><code class=""xml string"">""Microsoft.NET.Sdk""</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;Exe&lt;/</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;</code></div><div class=""line number5 index4 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;net6.0&lt;/</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;</code></div><div class=""line number6 index5 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;disable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div><div class=""line number7 index6 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number9 index8 alt2""><code class=""xml spaces"">  </code> </div><div class=""line number10 index9 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ItemGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number11 index10 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Using</code> <code class=""xml color1"">Include</code><code class=""xml plain"">=</code><code class=""xml string"">""System""</code> <code class=""xml plain"">/&gt;</code></div><div class=""line number12 index11 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Using</code> <code class=""xml color1"">Include</code><code class=""xml plain"">=</code><code class=""xml string"">""System.Threading.Tasks""</code> <code class=""xml plain"">/&gt;</code></div><div class=""line number13 index12 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">ItemGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number14 index13 alt1""><code class=""xml spaces"">  </code> </div><div class=""line number15 index14 alt2""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">Project</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь атрибут <span class=""b"">Include</span> элемента <span class=""b"">Using</span> подключает пространства имен глобально по всему проекту. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_812480""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">&lt;Using Include=</code><code class=""c# string"">""System""</code> <code class=""c# plain"">/&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Подключает пространство System. Соответственно после этого нам не надо его подключать в файлы кода в проекте.</p> <p>Обратная ситуация - отключение некоторых ненужных пространств имен из тех, которые подключаются по умолчанию. Для этого  применяется атрибут <span class=""b"">Remove</span> элемента <span class=""b"">Using</span>:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_50763""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Project</code> <code class=""xml color1"">Sdk</code><code class=""xml plain"">=</code><code class=""xml string"">""Microsoft.NET.Sdk""</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;Exe&lt;/</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;</code></div><div class=""line number5 index4 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;net6.0&lt;/</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;</code></div><div class=""line number6 index5 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div><div class=""line number7 index6 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number9 index8 alt2""><code class=""xml spaces"">  </code> </div><div class=""line number10 index9 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ItemGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number11 index10 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Using</code> <code class=""xml color1"">Remove</code><code class=""xml plain"">=</code><code class=""xml string"">""System""</code> <code class=""xml plain"">/&gt;</code></div><div class=""line number12 index11 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Using</code> <code class=""xml color1"">Remove</code><code class=""xml plain"">=</code><code class=""xml string"">""System.Threading.Tasks""</code><code class=""xml plain"">/&gt;</code></div><div class=""line number13 index12 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">ItemGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number14 index13 alt1""><code class=""xml spaces"">  </code> </div><div class=""line number15 index14 alt2""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">Project</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае отключаются пространства ""System"" и ""System.Threading.Tasks""</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Создание библиотеки классов в Visual Studio</h2>   <p>Нередко различные классы и структуры оформляются в виде отдельных библиотек, которые компилируются в файлы dll и затем могут подключаться в другие проекты.  Благодаря этому мы можем определить один и тот же функционал в виде библиотеки классов и подключать в различные проекты или передавать на использование другим разработчикам.</p> <p>Создадим и подключим библиотеку классов.</p> <p>Возьмем имеющийся проект консольного приложения C#, например, созданный в прошлых темах. В структуре проекта нажмем правой кнопкой на название решения и далее в появившемся  контекстном меню выберем <span class=""b"">Add -&gt; New Project...</span> (Добавить новый проект):</p> <img alt=""Создание библиотеки классов в C#"" src=""./pics/3.16.png""/> <p>Далее в списке шаблонов проекта найдем пункт <span class=""b"">Class Library</span>:</p> <img alt=""Библиотека классов в C# и .NET"" src=""./pics/3.17.png""/> <p>Затем дадим новому проекту какое-нибудь название, например, MyLib:</p> <img alt=""Class Library in .NET"" src=""./pics/3.18.png""/> <p>После создания этого проекта в решение будет добавлен новый проект, в моем случае с названием MyLib:</p> <img alt=""Добавление нового проекта в C# и .NET"" src=""./pics/3.19.png""/> <p>По умолчанию новый проект имеет один пустой класс Class1 в файле Class1.cs. Мы можем этот файл удалить или переименовать, как нам больше нравится.</p> <p>Например, переименуем файл Class1.cs в Person.cs, а класс Class1 в Person. Определим в классе Person простейший код:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_891918""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">MyLib</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Name: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""Новый проект в C# и .NET Core"" src=""./pics/3.20.png""/> <p>Теперь скомпилируем библиотеку классов. Для этого нажмем правой кнопкой на проект библиотеки классов и в контекстном меню выберем пункт <span class=""b"">Rebuild</span>:</p> <img alt=""Компиляция библиотеки классов в C# и .NET Core"" src=""./pics/3.21.png""/> <p>После компиляции библиотеки классов в папке проекта в каталоге <span class=""ii"">bin/Debug/net6.0</span> мы сможем найти  скомпилированный файл dll (MyLib.dll). Подключим его в основной проект. Для этого в основном проекте нажмем правой кнопкой на узел <span class=""b"">Dependencies</span>  и в контекстном меню выберем пункт <span class=""b"">Add Project Reference...</span>:</p> <img alt=""Добавление библиотеки классов в проекте на C# и .NET Core"" src=""./pics/3.22.png""/> <p>Далее нам откроется окно для добавления библиотек. В этом окне выберем пункт Solution,который позволяет увидеть все библиотеки классов из проектов текущего решения,  поставим отметку рядом с нашей библиотекой и нажмем на кнопку OK:</p> <img src=""./pics/3.23.png""/> <p>Если наша библиотека вдруг представляет файл dll, который не связан ни с каким проектом в нашем решении, то с помощью кнопки <span class=""b"">Browse</span>  мы можем найти местоположение файла dll и также его подключить.</p> <p>После успешного подключения библиотеки в главном проекте изменим файл <span class=""b"">Program.cs</span>, чтобы он использовал класс Person из библиотеки классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_390930""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">MyLib;    </code><code class=""c# comments"">// подключение пространства имен из библиотеки классов</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Name: Tom</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Создание библиотеки классов с помощью .NET CLI</h2>   <p>В прошлой теме рассматривалось создание библиотеки классов в Visual Studio и ее подключение в другой проект решения.  Рассмотрим, как сделать то же самое, только без Visual Studio, используя .NET CLI.</p> <p>Прежде всего для создания проекта библиотеки классов в .NET CLI команде <code>dotnet new</code> надо передать шаблон <span class=""b"">classlib</span></p> <div class=""console""><pre class=""consoletext"">dotnet new classlib</pre></div> <p>Например, пусть у нас проект библиотеки классов будет располагаться в папке <span class=""b"">C:\dotnet\console\mylib</span>. Создадим проект:</p> <div class=""console""><pre class=""consoletext"">C:\Users\eugen&gt;cd C:\dotnet\console\mylib  C:\dotnet\console\mylib&gt;dotnet new classlib Шаблон ""Библиотека классов"" успешно создан.  Идет обработка действий после создания... Восстановление C:\dotnet\console\mylib\mylib.csproj:   Определение проектов для восстановления...   Восстановлен C:\dotnet\console\mylib\mylib.csproj (за 79 ms). Восстановление выполнено.  C:\dotnet\console\mylib&gt; </pre></div> <p>После выполнения этой команды будет создан проект с файлом кода Class1.cs:</p> <img alt=""Создание библиотеки классов C# с помощью .NET CLI"" src=""./pics/3.49.png""/> <p>Это тот же проект, что создается в Visual Studio. Например, переименуем файл Class1.cs в Person.cs, а класс Class1 в Person. Определим в классе Person простейший код:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_767873""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">MyLib</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Name: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для построения библиотеки классов выполним команду</p> <div class=""console""><pre class=""consoletext"">dotnet build</pre></div> <p>И после построения в проекте в папке <code>\bin\Debug\net7.0\</code> можно будет найти файл mylib.dll.</p> <p>Теперь подключим эту библиотеку в какой-нибудь проект. Для теста создадим новый консольный проект в папке <code>C:\dotnet\console\helloapp</code> (то есть в соседней папке по  отношению к проекту mylib):</p> <div class=""console""><pre class=""consoletext"">dotnet new console</pre></div> <img alt=""Подключение библиотеки классов в проект на C# через .NET CLI"" src=""./pics/3.51.png""/> <p>Для добавления ссылки одного проекта в другой применяется команда <span class=""b"">dotnet add reference</span>, которая имеет следующий общий формат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_210176""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">dotnet add путь_к_файлу_csproj_главного_проекта reference путь_к_файлу_csproj_подключаемого_проекта</code></div></div></td></tr></tbody></table></div></div> <p>То есть в данном случае, если я нахожусь в папке проекта helloapp, то подключение библиотеки классов будет выглядеть следующим образом:</p> <div class=""console""><pre class=""consoletext"">dotnet add helloapp.csproj reference ..\mylib\mylib.csproj </pre></div> <img alt=""Подключение библиотеки классов в консольный проект на C# через .NET CLI"" src=""./pics/3.52.png""/> <p>После успешного подключения библиотеки в главном проекте изменим файл <span class=""b"">Program.cs</span>, чтобы он использовал класс Person из библиотеки классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_959950""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">MyLib;    </code><code class=""c# comments"">// подключение пространства имен из библиотеки классов</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Name: Tom</code></div></div></td></tr></tbody></table></div></div> <h4>Удаление ссылки на проект</h4> <p>Если надо удалить ссылку, то аналогичным образом применяется команда</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_202303""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">dotnet remove путь_к_файлу_csproj_главного_проекта reference путь_к_файлу_csproj_подключаемого_проекта</code></div></div></td></tr></tbody></table></div></div> <h3>Создание решения</h3> <p>Для создания решения применяется команда <span class=""b"">dotnet new sln</span>, которая по умолчанию создает файл решения в текущей папке. Так, перейдем в терминале в папку консольного проекта и  выполним команду</p> <div class=""console""><pre class=""consoletext"">dotnet new sln </pre></div> <p>После этого в текущей папке будет создан файл с расширением <span class=""b"">.sln</span>, который по умолчанию называется по имени текущей папки.</p> <p>Добавим ранее созданные проекты в решение. Для этого применяется команда <span class=""b"">dotnet sln add</span>, которая имеет следующий обобщенный формат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_484137""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">dotnet sln [путь_к_файлу_решения.sln] add путь_к_файлу_csproj_добавляемого_проекта</code></div></div></td></tr></tbody></table></div></div> <p>Если файл решения расположен в текущей папке, то путь к файлу решения можно не указывать. Так, если мы по прежнему находимся в терминале в папке консольного проекта helloapp, выполним последовательно следующие команды</p> <div class=""console""><pre class=""consoletext"">dotnet sln add helloapp.csproj dotnet sln add ..\mylib\mylib.csproj </pre></div> <img alt=""Добавление проектов на C# в решение через .NET CLI"" src=""./pics/3.53.png""/> <p>Если потом потребуется, наоборот, удалить проект из решения, то применяется команда</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_382591""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">dotnet sln [путь_к_файлу_решения.sln] remove путь_к_файлу_csproj_удаляемого_проекта</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Модификаторы доступа</h2>   <p>Все поля, методы и остальные компоненты класса имеют <span class=""b"">модификаторы доступа</span>.  Модификаторы доступа позволяют задать допустимую область видимости  для компонентов класса. То есть модификаторы доступа определяют контекст, в котором можно употреблять данную переменную или метод.</p> <p>В языке C# применяются следующие модификаторы доступа:</p> <ul> <li><p><span class=""b"">private</span>: закрытый или приватный компонент класса или структуры. Приватный компонент доступен только в  рамках своего класса или структуры.</p></li> <li><p><span class=""b"">private protected</span>: компонент класса доступен из любого места в своем классе или в производных классах, которые определены в той же сборке.</p></li> <li><p><span class=""b"">file</span>: добавлен в версии C# 11 и применяется к типам, например, классам и структурам. Класс или структура с такми модификатором доступны только из текущего файла кода.</p></li> <li><p><span class=""b"">protected</span>: такой компонент класса доступен из любого места в своем классе или в производных классах. При этом производные классы могут располагаться в других сборках.</p></li> <li><p><span class=""b"">internal</span>: компоненты класса или структуры доступен из любого места кода в той же сборке, однако  он недоступен для других программ и сборок.</p></li> <li><p><span class=""b"">protected internal</span>: совмещает функционал двух модификаторов <code>protected</code> и <code>internal</code>.  Такой компонент класса доступен из любого места в текущей сборке и из производных классов, которые могут располагаться в других сборках.</p></li> <li><p><span class=""b"">public</span>: публичный, общедоступный компонент класса или структуры. Такой компонент доступен из любого места в  коде, а также из других программ и сборок.</p></li> </ul> <img alt=""Модификаторы доступа public, protected, internal, private в языке программирования C# и в .NET"" src=""./pics/3.38.png""/> <p>Стоит отметить, что эти модификаторы могут применяться как к компонентам класса, так и к компонентам структуры за тем исключением, что структуры не могут  использовать модификаторы <code>private protected</code>, <code>protected</code> и <code>protected internal</code>, поскольку структуры не могут быть унаследованы.</p> <p>Все классы и структуры, определенные напрямую вне других типов (классов и структур) могут иметь только модификаторы <code>public</code>, <code>file</code> или <code>internal</code>.</p> <p>Мы можем явно задать модификатор доступа, а можем его и не указывать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_198278""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Name: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Если для компонентов не определен модификатор доступа, то по умолчанию для них применяется модификатор <span class=""b"">private</span>. Например, в примере выше переменная <code>name</code>  неявно будет иметь модификатор <span class=""b"">private</span>.</p> <p>Классы и структуры, которые объявлены без модификатора и которые расположены вне других типов, по умолчанию имеют доступ <span class=""b"">internal</span>, а вложенные классы и структуры, как и остальные  компоненты классов/структур имеют модификатор <span class=""b"">private</span>. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_611223""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Phone</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">struct</code> <code class=""c# plain"">Camera</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь класс Phone не является вложенным ни в один другой класс/структуру, поэтому неявно имеет модификатор <span class=""b"">internal</span>.  А структура Camera является вложенной, поэтому, как и другие компоненты класса, неявно имеет модификатор <span class=""b"">private</span></p> <h3>Модификаторы в рамках текущего проекта</h3> <p>Посмотрим на примере и создадим следующий класс State:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_592797""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div><div class=""line number37 index36 alt2"">37</div><div class=""line number38 index37 alt1"">38</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">State</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// все равно, что private string defaultVar;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">defaultVar =</code><code class=""c# string"">""default""</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// поле доступно только из текущего класса</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">privateVar = </code><code class=""c# string"">""private""</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступно из текущего класса и производных классов, которые определены в этом же проекте</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">private</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">protectedPrivateVar = </code><code class=""c# string"">""protected private""</code><code class=""c# plain"">;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступно из текущего класса и производных классов</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">protectedVar = </code><code class=""c# string"">""protected""</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступно в любом месте текущего проекта</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">internal</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">internalVar = </code><code class=""c# string"">""internal""</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступно в любом месте текущего проекта и из классов-наследников в других проектах</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">protectedInternalVar = </code><code class=""c# string"">""protected internal""</code><code class=""c# plain"">;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступно в любом месте программы, а также для других программ и сборок</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">publicVar = </code><code class=""c# string"">""public""</code><code class=""c# plain"">;</code></div><div class=""line number17 index16 alt2""> </div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// по умолчанию имеет модификатор private</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine(defaultVar);</code></div><div class=""line number20 index19 alt1""> </div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// метод доступен только из текущего класса</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPrivate() =&gt; Console.WriteLine(privateVar);</code></div><div class=""line number23 index22 alt2""> </div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступен из текущего класса и производных классов, которые определены в этом же проекте</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">private</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintProtectedPrivate() =&gt; Console.WriteLine(protectedPrivateVar);</code></div><div class=""line number26 index25 alt1""> </div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступен из текущего класса и производных классов</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintProtected() =&gt; Console.WriteLine(protectedVar);</code></div><div class=""line number29 index28 alt2""> </div><div class=""line number30 index29 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступен в любом месте текущего проекта</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">internal</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintInternal() =&gt; Console.WriteLine(internalVar);</code></div><div class=""line number32 index31 alt1""> </div><div class=""line number33 index32 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступен в любом месте текущего проекта и из классов-наследников в других проектах</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintProtectedInternal() =&gt; Console.WriteLine(protectedInternalVar);</code></div><div class=""line number35 index34 alt2""> </div><div class=""line number36 index35 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// доступен в любом месте программы, а также для других программ и сборок</code></div><div class=""line number37 index36 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPublic() =&gt; Console.WriteLine(publicVar);</code></div><div class=""line number38 index37 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Так как класс State не имеет явного модификатора, по умолчанию он имеет модификатор <code>internal</code>,  поэтому он будет доступен из любого места данного проекта, однако не будет доступен из других программ и сборок.</p> <p>Класс State имеет шесть полей для каждого уровня доступа. Плюс одна переменная без модификатора, которая является закрытой (private) по умолчанию. А также определено семь методов с разными модификаторами,  которые выводят значения соответствующих переменных на консоль. Поскольку все модификаторы позволяют использовать компоненты класса внутри данного класса, то и все переменные класса, в том числе закрытые, у нас доступны всем его методам,  так как все находятся в контексте класса State.</p> <p>Теперь посмотрим, как мы сможем использовать переменные класса State в другом классе, который, допустим, будет называться StateConsumer и который  расположен <span class=""b"">в том же проекте</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_709188""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">StateConsumer</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintState()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">State state = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State();</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// обратиться к переменной defaultVar у нас не получится,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// так как она имеет модификатор private и класс StateConsumer ее не видит</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.defaultVar); </code><code class=""c# comments"">//Ошибка, получить доступ нельзя</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// то же самое относится и к переменной privateVar</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.privateVar); </code><code class=""c# comments"">// Ошибка, получить доступ нельзя</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// обратиться к переменной protectedPrivateVar не получится,</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// так как класс StateConsumer не является классом-наследником класса State</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.protectedPrivateVar); </code><code class=""c# comments"">// Ошибка, получить доступ нельзя</code></div><div class=""line number17 index16 alt2""> </div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// обратиться к переменной protectedVar тоже не получится,</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// так как класс StateConsumer не является классом-наследником класса State</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.protectedVar); </code><code class=""c# comments"">// Ошибка, получить доступ нельзя</code></div><div class=""line number21 index20 alt2""> </div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// переменная internalVar с модификатором internal доступна из любого места текущего проекта</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// поэтому можно получить или изменить ее значение</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.internalVar);</code></div><div class=""line number25 index24 alt2""> </div><div class=""line number26 index25 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// переменная protectedInternalVar так же доступна из любого места текущего проекта</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.protectedInternalVar);</code></div><div class=""line number28 index27 alt1""> </div><div class=""line number29 index28 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// переменная publicVar общедоступна</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(state.publicVar);</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number32 index31 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, в классе StateConsumer мы смогли только обратиться к переменным internalVar, protectedInternalVar и publicVar,  так как их модификаторы позволяют использовать в данном контексте.</p> <p>Аналогично дело обстоит и с методами:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_911327""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">StateConsumer</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintState()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">State state = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">State();</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.Print(); </code><code class=""c# comments"">//Ошибка, получить доступ нельзя</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.PrintPrivate(); </code><code class=""c# comments"">// Ошибка, получить доступ нельзя</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.PrintProtectedPrivate(); </code><code class=""c# comments"">// Ошибка, получить доступ нельзя</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.PrintProtected(); </code><code class=""c# comments"">// Ошибка, получить доступ нельзя</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.PrintInternal();    </code><code class=""c# comments"">// норм</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.PrintProtectedInternal();  </code><code class=""c# comments"">// норм</code></div><div class=""line number18 index17 alt1""> </div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">state.PrintPublic();      </code><code class=""c# comments"">// норм</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь нам оказались доступны только три метода: PrintInternal, PrintProtectedInternal, PrintPublic, которые имееют соответственно модификаторы internal, protected internal, public.</p> <h3>Модификаторы в рамках сборок</h3> <p>Допустим, у нас есть проект (и соответственно сборка) MyLib, в которой определены три класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_798504""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">namespace</code> <code class=""c# plain"">MyLib;</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// класс доступен из других сборок</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">PublicState</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">internal</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintInternal() =&gt; Console.WriteLine(</code><code class=""c# string"">""internal""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintProtectedInternal() =&gt; Console.WriteLine(</code><code class=""c# string"">""protected internal""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPublic() =&gt; Console.WriteLine(</code><code class=""c# string"">""public""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# comments"">// класс доступен только в текущей сборке - по умолчанию internal</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">DefaultState { }</code></div><div class=""line number13 index12 alt2""><code class=""c# comments"">// класс доступен только в текущей сборке</code></div><div class=""line number14 index13 alt1""><code class=""c# keyword"">internal</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">InternalState{  }</code></div></div></td></tr></tbody></table></div></div> <p>Здесь классы DefaultState и InternalState имеют модификатор <span class=""b"">internal</span>, поэтому доступны только в текущем проекте.</p> <p>Класс PublicState  модификатором <span class=""b"">public</span> доступен из других проектов. Однако его метод <code>PrintInternal()</code> доступен только в текущем проекте.  Вне текущего проекта доступен только его метод <code>PrintPublic</code> и <code>PrintProtectedInternal()</code> (доступен в другом проекте только в классах-наследниках).</p> <p>Допустим, мы подключаем сборку этого проекта MyLib в другой проект, где есть класс StateConsumer:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_822987""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">MyLib;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">StateConsumer</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintState()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// Ошибка DefaultState - по умолчанию internal, поэтому нет доступа</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">DefaultState defaultState = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DefaultState();</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// Ошибка InternalState - internal, поэтому нет доступа</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">InternalState internalState = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">InternalState();</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// норм, PublicState - public, доступен из других программ</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">PublicState publicState = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">PublicState();</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// Ошибка, нет доступа - метод доступен только в свой сборке</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">publicState.PrintInternal();</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// Ошибка, нет доступа - StateConsumer НЕ является классом-наследником от класса PublicState,</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// поэтому метод не доступен</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">publicState.PrintProtectedInternal();  </code><code class=""c# comments"">// нет доступа</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// норм - общедоступный метод</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">publicState.PrintPublic();      </code><code class=""c# comments"">// норм</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""Модификаторы доступа в языке программирования C# и в .NET"" src=""./pics/3.37.png""/> <p>В классе StateConsumer есть доступ только к классу PublicState и его методу <code>PrintPublic</code>, потому что они имеют модификатор <span class=""b"">public</span>.  К остальной функциональности подключенной сборки StateConsumer доступа не имеет.</p> <p>Благодаря такой системе модификаторов доступа можно скрывать некоторые моменты реализации класса от других частей программы.</p> <h3>Файл как область видимости</h3> <p>C# 11 был добавлен еще один модификатор видимости - <span class=""b"">file</span>, который применяется к классам, структурам, делегатам, перечислениям, интерфейсам.  Типы с этим модификатором могут использоваться только внутри текущего  файла кода.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_238699""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">file </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Данный модификатор не может использоваться в паре с другими модификаторами.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.13.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Свойства</h2>   <p>Кроме обычных методов в языке C# предусмотрены специальные методы доступа, которые называют <span class=""b"">свойства</span>.  Они обеспечивают простой доступ к полям классов и структур, узнать их значение или выполнить их установку.</p> <h3>Определение свойств</h3> <p>Стандартное описание свойства имеет следующий синтаксис:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_327598""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">[модификаторы] тип_свойства название_свойства</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ действия, выполняемые при получении значения свойства}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ действия, выполняемые при установке значения свойства}</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Вначале определения свойства могут идти различные модификаторы, в частности, модификаторы доступа. Затем указывается тип свойства, после которого идет название свойства.  Полное определение свойства содержит два блока: <span class=""b"">get</span> и <span class=""b"">set</span>.</p> <p>В блоке <span class=""b"">get</span> выполняются действия по получению значения свойства. В этом блоке с помощью оператора <span class=""b"">return</span> возвращаем некоторое значение.</p> <p>В блоке <span class=""b"">set</span> устанавливается значение свойства. В этом блоке с помощью параметра <span class=""b"">value</span> мы можем получить значение,  которое передано свойству.</p> <p>Блоки <span class=""b"">get</span> и <span class=""b"">set</span> еще называются акссесорами или методами доступа (к значению свойства), а также геттером и сеттером.</p> <p>Рассмотрим пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_509876""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// Устанавливаем свойство - срабатывает блок Set</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// значение ""Tom"" и есть передаваемое в свойство value</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// Получаем значение свойства и присваиваем его переменной - срабатывает блок Get</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">personName = person.Name;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(personName);  </code><code class=""c# comments"">// Tom</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name;    </code><code class=""c# comments"">// возвращаем значение свойства</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">name = value;   </code><code class=""c# comments"">// устанавливаем новое значение свойства</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в классе Person определено приватное поле <code>name</code>, которая хранит имя пользователя, и есть общедоступное свойство <code>Name</code>.  Хотя они имеют практически одинаковое название за исключением регистра, но это не более чем стиль, названия у них могут быть произвольные и не обязательно должны совпадать.</p> <p>Через это свойство мы можем управлять доступом к переменной <code>name</code>. В свойстве в блоке <span class=""b"">get</span>  возвращаем значение поля:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_751990""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name; }</code></div></div></td></tr></tbody></table></div></div> <p>А в блоке <span class=""b"">set</span> устанавливаем значение переменной name. Параметр <span class=""b"">value</span>  представляет передаваемое значение, которое передается переменной name.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_283148""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">set</code> <code class=""c# plain"">{ name = value; }</code></div></div></td></tr></tbody></table></div></div> <p>В программе мы можем обращаться к этому свойству, как к обычному полю. Если мы ему присваиваем какое-нибудь значение, то срабатывает блок <span class=""b"">set</span>, а передаваемое значение передается в параметр <span class=""b"">value</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_182493""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Если мы получаем значение свойства, то срабатывает блок <span class=""b"">get</span>, который по сути возвращает значение переменной name:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_511459""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">personName = person.Name; </code></div></div></td></tr></tbody></table></div></div> <p>То есть по сути свойство Name ничего не хранит, оно выступает в роли посредника между внешним кодом и переменной name.</p> <p>Возможно, может возникнуть вопрос, зачем нужны свойства, если мы можем в данной ситуации обходиться обычными полями класса? Но свойства  позволяют вложить дополнительную логику, которая может быть необходима при установке или получении значения.  Например, нам надо установить проверку по возрасту:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_356483""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person.Age);  </code><code class=""c# comments"">// 1</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// изменяем значение свойства</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">person.Age = 37;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(person.Age);  </code><code class=""c# comments"">// 37</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// пробуем передать недопустимое значение</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">person.Age = -23;               </code><code class=""c# comments"">// Возраст должен быть в диапазоне от 1 до 120</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(person.Age);  </code><code class=""c# comments"">// 37 - возраст не изменился</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &lt; 1 || value &gt; 120)</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возраст должен быть в диапазоне от 1 до 120""</code><code class=""c# plain"">);</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">else</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">age = value;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">age; }</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае переменная age хранит возраст пользователя. Напрямую мы не можем обратиться к этой переменной - только через свойство Age. Причем в блоке  <span class=""b"">set</span> мы устанавливаем значение, если оно соответствует некоторому разумному диапазону. Поэтому при передаче свойству Age значения,  которое не входит в этот диапазон, значение переменной не будет изменяться:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_638521""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">person.Age = -23;</code></div></div></td></tr></tbody></table></div></div>Консольный вывод программы:<p></p> <div class=""console""> <pre class=""consoletext"">1 37 Возраст должен быть в диапазоне от 1 до 120 37 </pre> </div> <p>Таким образом, свойство позволяет опосредовать и контролировать доступ к данным объекта.</p> <h3>Свойства только для чтения и записи</h3> <p>Блоки set и get не обязательно одновременно должны присутствовать в свойстве. Если свойство определяет только блок <span class=""b"">get</span>,  то такое свойство доступно только <span class=""b"">для чтения</span> - мы можем получить его значение, но не установить.</p> <p>И, наоборот, если свойство имеет только блок <span class=""b"">set</span>, тогда это свойство доступно только для записи - можно  только установить значение, но нельзя получить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_815340""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// свойство для чтения - можно получить значение</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person.Name);  </code><code class=""c# comments"">// Tom</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// но нельзя установить</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// person.Name = ""Bob"";    // ! Ошибка</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# comments"">// свойство для записи - можно устновить значение</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">person.Age = 37;</code></div><div class=""line number10 index9 alt1""><code class=""c# comments"">// но нелзя получить</code></div><div class=""line number11 index10 alt2""><code class=""c# comments"">// Console.WriteLine(person.Age);  // ! Ошибка</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# plain"">person.Print();</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// свойство только для записи</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ age = value; }</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// свойство только для чтения</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name; }</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number29 index28 alt2""> </div><div class=""line number30 index29 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()=&gt; Console.WriteLine($</code><code class=""c# string"">""Name: {name}  Age: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number31 index30 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь свойство Name доступно только для чтения, поскольку оно имеет только блок <span class=""b"">get</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_918391""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name; }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Мы можем получить его значение, но НЕ можем установить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_271577""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(person.Name);  </code><code class=""c# comments"">// получить можно</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// ! Ошибка - установить нельзя</code></div></div></td></tr></tbody></table></div></div> <p>А свойство Age, наоборот, доступно только для записи, поскольку оно имеет только блок <span class=""b"">set</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_617628""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ age = value; }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Можно установить его значение, но нельзя получить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_342679""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">person.Age = 37; </code><code class=""c# comments"">// установить можно</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.Age);  </code><code class=""c# comments"">// ! Ошибка - получить значение нельзя</code></div></div></td></tr></tbody></table></div></div> <h3>Вычисляемые свойства</h3> <p>Свойства необязательно связаны с определенной переменной. Они могут вычисляться на основе различных выражений</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_916500""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Smith""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tom.Name);    </code><code class=""c# comments"">// Tom Smith</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">firstName;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">lastName;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code>  <code class=""c# plain"">$</code><code class=""c# string"">""{firstName} {lastName}""</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">firstName, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">lastName)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.firstName = firstName; </code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.lastName = lastName;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Person имеет свойство Name, которое доступно только для чтения и которое возвращает общее значение на основе значений переменных  firstName и lastName.</p> <h3>Модификаторы доступа</h3> <p>Мы можем применять модификаторы доступа не только ко всему свойству, но и к отдельным блокам get и set:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_721067""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// Ошибка - set объявлен с модификатором private</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">//tom.Name = ""Bob"";</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(tom.Name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name; }</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code> <code class=""c# plain"">{ name = value; }</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь закрытый блок set мы сможем использовать только в данном классе - в его методах, свойствах, конструкторе, но никак не в другом классе:</p> <p>При использовании модификаторов в свойствах следует учитывать ряд ограничений:</p> <ul> <li><p>Модификатор для блока set или get можно установить, если свойство имеет оба блока (и set, и get)</p></li> <li><p>Только один блок set или get может иметь модификатор доступа, но не оба сразу</p></li> <li><p>Модификатор доступа блока set или get должен быть более ограничивающим, чем модификатор доступа свойства. Например,  если свойство имеет модификатор public, то блок set/get может иметь только модификаторы protected internal, internal, protected, private protected и private</p></li> </ul> <h3>Автоматические свойства</h3> <p>Свойства управляют доступом к полям класса. Однако что, если у нас с десяток и более полей, то определять каждое поле и писать для него однотипное свойство  было бы утомительно. Поэтому в .NET были добавлены автоматические свойства. Они имеют сокращенное объявление:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_507100""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>На самом деле тут также создаются поля для свойств, только их создает не программист в коде, а компилятор автоматически генерирует при компиляции.</p> <p>В чем преимущество автосвойств, если по сути они просто обращаются к автоматически создаваемой переменной, почему бы напрямую не обратиться к переменной без автосвойств?  Дело в том, что в любой момент времени при необходимости мы можем развернуть автосвойство в обычное свойство, добавить в него какую-то определенную логику.</p> <p>Стоит учитывать, что нельзя создать автоматическое свойство только для записи, как в случае со стандартными свойствами.</p> <p>Автосвойствам можно присвоить значения по умолчанию (инициализация автосвойств):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_590992""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tom.Name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(tom.Age);    </code><code class=""c# comments"">// 37</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = 37;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И если мы не укажем для объекта Person значения свойств Name и Age, то будут действовать значения по умолчанию.</p> <p>Автосвойства также могут иметь модификаторы доступа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_740602""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code><code class=""c# plain"">; </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Мы можем убрать блок set и сделать автосвойство доступным только для чтения. В этом случае для хранения значения этого свойства для него неявно будет создаваться поле с модификатором readonly, поэтому следует учитывать, что подобные get-свойства  можно установить либо из конструктора класса, как в примере выше, либо при инициализации свойства:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_18610""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// через инициализацию свойства</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// через конструктор</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Блок init</h3> <p>Начиная с версии C# 9.0 сеттеры в свойствах могут определяться с помощью оператора <span class=""b"">init</span> (от слова ""инициализация"" - это есть блок init призван инициализировать свойство).  Для установки значений свойств с <span class=""b"">init</span> можно использовать только инициализатор, либо конструктор, либо при объявлении указать для него значение.  После инициализации значений подобных свойств их значения изменить нельзя - они доступны только для чтения. В этом плане init-свойства сближаются со свойствами для чтения. Разница состоит в том,  что init-свойства мы также можем установить в инициализаторе (свойства для чтения установить в инициализаторе нельзя). Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_612691""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">//person.Name = ""Bob"";    //! Ошибка - после инициализации изменить значение нельзя</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person.Name); </code><code class=""c# comments"">// Undefined</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; } = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Person для свойства Name вместо сеттера использует оператор <span class=""b"">init</span>. В итоге на строке</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_172579""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code><code class=""c# plain"">();</code></div></div></td></tr></tbody></table></div></div> <p>предполагается создание объекта с инициализацией всех его свойств. В данном случае свойство Name получит в качестве значения строку ""Undefined"".  Однако поскольку инициализация свойства уже произошла, то на строке</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_925990""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// Ошибка</code></div></div></td></tr></tbody></table></div></div> <p>мы получим ошибку.</p> <p>Как можно установить подобное свойство? Выше продемонстрирован один из способов - установка значения при определении свойства. Второй способ - через конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_255602""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.Name); </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Третий способ - через инициализатор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_108739""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code><code class=""c# plain"">() { Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.Name); </code><code class=""c# comments"">// Bob</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В принцпе есть еще четвертый способ - установка через другое свойство с модификатором <span class=""b"">init</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_655936""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person() { Name = </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.Name);     </code><code class=""c# comments"">// Sam</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person.Email);    </code><code class=""c# comments"">// Sam@gmail.com</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">init</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">name = value;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Email = $</code><code class=""c# string"">""{value}@gmail.com""</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Email { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае свойство Name управляет полем для чтения <code>name</code>. Благодаря  этому перед установкой значения свойства мы можем произвести некоторую предобработку. Кроме того, в выражении init устанавливается другое init-свойство - Email, которое для установки значения использует значение  свойства Name - из имени получаем значение для электронного адреса.</p> <p>Причем если при объявлении свойства указано значение, то в конструкторе мы можем его изменить. Значение, установленное в конструкторе, можно изменить в инициализаторе.  Однако дальше процесс инициализации заканчивается. И значение не может быть изменено.</p> <h3>Сокращенная запись свойств</h3> <p>Как и методы, мы можем сокращать определения свойств. Поскольку блоки <span class=""b"">get</span> и <span class=""b"">set</span> представляют специальные методы,  то как и обычные методы, если они содержат одну инструкцию, то мы их можем сократить с помощью оператора <span class=""b"">=&gt;</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_120935""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ </code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; name = value; </code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также можно сокращать все свойство в целом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_98036""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// эквивалентно public string Name { get { return name; } }</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name =&gt; name;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>модификатор required</h3> <p>Модификатор <span class=""b"">required</span> (добавлен в C# 11) указывает, что поле или свойства с этим модификатором обязательно должны быть инициализированы. Например, в следующем примере мы получим ошибку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_428859""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();  </code><code class=""c# comments"">// ошибка - свойства Name и Age не инициализированы</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">required </code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">required </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь свойства Name и Age отмечены как обязательные для инициализации с помощью модификатора <span class=""b"">required</span>, поэтому необходимо использовать инициализатор для их инициализации:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_67755""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, Age = 38 }; </code><code class=""c# comments"">// ошибки нет</code></div></div></td></tr></tbody></table></div></div> <p>Причем не важно, устанавливаем эти свойства в конструкторе или инициализируем при определении, все равно надо использовать инициализатор для установки их значений. Например,  в следующем примере мы получим ошибку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_251777""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">); </code><code class=""c# comments"">// ошибка - свойства Name и Age все равно надо установить в инициализаторе</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">required </code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">required </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = 22;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.9.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Перегрузка методов</h2>   <p>Иногда возникает необходимость создать один и тот же метод, но с разным набором параметров.  И в зависимости от имеющихся параметров применять определенную версию метода. Такая возможность еще называется <span class=""b"">перегрузкой методов</span>  (method overloading).</p> <p>И в языке C# мы можем создавать в классе несколько методов с одним и тем же именем, но разной сигнатурой. Что такое сигнатура?  <span class=""b"">Сигнатура</span> складывается из следующих аспектов:</p> <ul> <li><p>Имя метода</p></li> <li><p>Количество параметров</p></li> <li><p>Типы параметров</p></li> <li><p>Порядок параметров</p></li> <li><p>Модификаторы параметров</p></li> </ul> <p>Но названия параметров в сигнатуру НЕ входят. Например, возьмем следующий метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_284728""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{ </code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>У данного метода сигнатура будет выглядеть так: <code>Sum(int, int)</code></p> <p>И перегрузка метода как раз заключается в том, что методы имеют разную сигнатуру, в которой совпадает только название метода. То есть методы должны  отличаться по:</p> <ul> <li><p>Количеству параметров</p></li> <li><p>Типу параметров</p></li> <li><p>Порядку параметров</p></li> <li><p>Модификаторам параметров</p></li> </ul> <p>Например, пусть у нас есть следующий класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_65564""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Calculator</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = a + b;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Result is {result}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">c)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = a + b + c;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Result is {result}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">c, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">d)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = a + b + c + d;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Result is {result}""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">double</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">b)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">double</code> <code class=""c# plain"">result = a + b;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Result is {result}""</code><code class=""c# plain"">);</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь представлены четыре разных версии метода Add, то есть определены четыре перегрузки данного метода.</p> <p>Первые три версии метода отличаются по количеству параметров. Четвертая версия совпадает с первой по количеству параметров, но отличается по их типу. При этом достаточно, чтобы хотя бы один параметр отличался по типу. Поэтому это тоже допустимая перегрузка метода Add.</p> <p>То есть мы можем представить сигнатуры данных методов следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_707691""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Add(</code><code class=""c# keyword"">double</code><code class=""c# plain"">, </code><code class=""c# keyword"">double</code><code class=""c# plain"">)</code></div></div></td></tr></tbody></table></div></div> <p>После определения перегруженных версий мы можем использовать их в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_318060""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Calculator calc = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Calculator();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">calc.Add(1, 2); </code><code class=""c# comments"">// 3</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">calc.Add(1, 2, 3); </code><code class=""c# comments"">// 6</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">calc.Add(1, 2, 3, 4); </code><code class=""c# comments"">// 10</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">calc.Add(1.4, 2.5); </code><code class=""c# comments"">// 3.9</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Result is 3 Result is 6 Result is 10 Result is 3.9 </pre> </div> <p>Также перегружаемые методы могут отличаться по используемым модификаторам. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_852120""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Increment(</code><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">val)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">val++;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(val);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Increment(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">val)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">val++;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(val);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае обе версии метода Increment имеют одинаковый набор параметров одинакового типа, однако в первом случае параметр имеет  модификатор ref. Поэтому обе версии метода будут корректными перегрузками метода Increment.</p> <p>А отличие методов по возвращаемому типу или по имени параметров не является основанием для перегрузки. Например, возьмем следующий набор методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_549591""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number1, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">number2)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">number1 + number2;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(x + y);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Сигнатура у всех этих методов будет совпадать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_84508""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">)</code></div></div></td></tr></tbody></table></div></div> <p>Поэтому данный набор методов не представляет корректные перегрузки метода Sum и <span class=""b"">работать не будет</span>.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Статические члены и модификатор static</h2>   <p>Кроме обычных полей, методов, свойств классы и структуры могут иметь статические поля, методы, свойства. Статические поля, методы, свойства относятся ко всему классу/всей структуре и  для обращения к подобным членам необязательно создавать экземпляр класса / структуры.</p> <h3>Статические поля</h3> <p>Статические поля хранят состояние всего класса / структуры. Статическое поле определяется как и обычное, только перед типом поля указывается ключевое слово  <span class=""b"">static</span>. Например, рассмотрим класс Person, который представляет человека:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_782928""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(68);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">bob.СheckAge();     </code><code class=""c# comments"">// Уже на пенсии</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(37);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.СheckAge();     </code><code class=""c# comments"">// Сколько лет осталось до пенсии: 28</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// получение статического поля</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(Person.retirementAge); </code><code class=""c# comments"">// 65</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// изменение статического поля</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Person.retirementAge = 67;</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">retirementAge = 65;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">СheckAge()</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(age &gt;= retirementAge)</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Уже на пенсии""</code><code class=""c# plain"">);</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сколько лет осталось до пенсии: {retirementAge - age}""</code><code class=""c# plain"">);</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Person имеет два поля: <code>age</code> (хранит возраст человека) и <code>retirementAge</code> (хранит пенсионный возраст).  Однако поле <code>retirementAge</code> является статическим. Оно относится не к конкретному человеку, а ко всем людям. (В данном случае для  упрощения пренебрежем тем фактом, что в зависимости от пола и профессии пенсионный возраст может отличаться.) Таким образом, поле retirementAge относится  не к отдельную объекту и хранит значение НЕ отдельного объекта класса Person, а относится ко всему классу Person и хранит общее значение для всего класса.</p> <p>Причем в самом классе мы можем использовать это поле как и любые другие. Так, в методе <code>СheckAge()</code>, который поверяет пенсионный статус человека,  для проверки используем это поле:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_655452""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(age &gt;= retirementAge)</code></div></div></td></tr></tbody></table></div></div> <p>Но если мы хотим обратиться к этому полю вне своего класса, то мы можем обращаться к этому полю по имени класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_370052""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(Person.retirementAge);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person.retirementAge = 67;</code></div></div></td></tr></tbody></table></div></div> <p>На уровне памяти для статических полей будет создаваться участок в памяти, который будет общим для всех объектов класса.</p> <img alt=""Статические методы класса в C#"" src=""./pics/static.png""/> <p>При этом память для статических переменных выделяется даже в том случае, если не создано ни одного объекта этого класса.</p> <h3>Статические свойства</h3> <p>Подобным образом мы можем создавать и использовать статические свойства:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_869198""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(68);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">bob.СheckAge();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(Person.RetirementAge); </code><code class=""c# comments"">// 65</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">retirementAge = 65;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">RetirementAge</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">retirementAge; }</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &gt; 1 &amp;&amp; value &lt; 100) retirementAge = value; }</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">СheckAge()</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(age &gt;= retirementAge)</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Уже на пенсии""</code><code class=""c# plain"">);</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сколько лет осталось до пенсии: {retirementAge - age}""</code><code class=""c# plain"">) ;</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае доступ к статической переменной retirementAge опосредуется с помощью статического свойства <code>RetirementAge</code>.</p> <p>Таким образом, переменные и свойства, которые хранят состояние, общее для всех объектов класса / структуры, следует определять как статические.</p> <p>Нередко статические поля и свойства применяются для хранения счетчиков. Например, мы хотим иметь счетчик, который позволял бы узнать,  сколько объектов Person создано:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_99117""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var sam = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(Person.Counter);  </code><code class=""c# comments"">// 3</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">counter = 0;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Counter =&gt; counter;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person()</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">counter++;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в классе Person счетчик хранится в приватной переменной counter, значение которой увеличивается на единицу при создании объекта в конструкторе.  А с помощью статического свойства Counter, которое доступно только для чтения, мы можем получить значение счетчика.</p> <h3>Статические методы</h3> <p>Статические методы определяют общее для всех объектов поведение, которое не зависит от конкретного объекта. Для обращения к статическим методам также применяется имя класса / структуры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_876579""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code><code class=""c# plain"">(68);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person.CheckRetirementStatus(bob);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">retirementAge = 65;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) =&gt; Age = age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">CheckRetirementStatus(Person person)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(person.Age &gt;= retirementAge)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Уже на пенсии""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сколько лет осталось до пенсии: {retirementAge - person.Age}""</code><code class=""c# plain"">) ;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в классе Person определен статический метод <code>CheckRetirementStatus()</code>, который в качестве параметра принимает объект Person и проверяет его пенсионный статус.</p> <p>Следует учитывать, что статические методы могут обращаться только к статическим членам класса. Обращаться к нестатическим методам, полям, свойствам внутри статического метода мы не можем.</p> <h3>Статический конструктор</h3> <p>Кроме обычных конструкторов у класса также могут быть статические конструкторы. Статические конструкторы имеют следующие отличительные черты:</p> <ul> <li><p>Статические конструкторы не должны иметь модификатор доступа и не принимают параметров</p></li> <li><p>Как и в статических методах, в статических конструкторах нельзя использовать ключевое слово this для ссылки на текущий объект класса и  можно обращаться только к статическим членам класса</p></li> <li><p>Статические конструкторы нельзя вызвать в программе вручную. Они выполняются автоматически при самом первом создании объекта данного  класса или при первом обращении к его статическим членам (если таковые имеются)</p></li> </ul> <p>Статические конструкторы обычно используются для инициализации статических данных, либо же выполняют действия, которые требуется выполнить только один раз</p> <p>Определим статический конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_600522""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(Person.RetirementAge);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">retirementAge;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">RetirementAge =&gt; retirementAge;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# plain"">Person()</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(DateTime.Now.Year == 2022)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">retirementAge = 65;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">retirementAge = 67;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае с помощью встроенной структуры <span class=""b"">DateTime</span> получаем текущий год. Для этого используется свойство <code>DateTime.Now.Year</code>.  если он равен 2022, устанавливаем один пенсионный возраст. При другом значении текущего года устанавливается другое значение пенсионного возраста.</p> <h3>Статические классы</h3> <p>Статические классы объявляются с модификатором static и могут содержать только статические поля, свойства и методы. Например,  определим класс, который выполняет ряд арифметических операций:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_860862""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(Operations.Add(5, 4));         </code><code class=""c# comments"">// 9</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(Operations.Subtract(5, 4));    </code><code class=""c# comments"">// 1</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(Operations.Multiply(5, 4));    </code><code class=""c# comments"">// 20</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">static</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Operations</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Subtract(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x - y;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x * y;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.10.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Установка пакетов Nuget</h2>   <p>Вместо создания своих собственных библиотек и определения своего собственного функционала мы можем использовать уже ранее созданные другими разработчиками библиотеки и  добавить их свой проект. Для управления внешними библиотеками в виде отдельных пакетов Microsoft предоставляет специальный менеджер пакетов под названием <span class=""b"">Nuget</span>.</p> <p>Физически NuGet-пакет представляет единый архивный файл с расширением .nupkg, который содержит скомпилированный код в виде библиотек dll и других файлов, используемых в коде.  Также пакет включает некоторое описание в виде номера версии и вспомогательной информации.</p> <p>Для упрощения работы с пакетами, их распространенния Microsoft организовал глобальный репозиторий пакетов в виде сервиса <span class=""b"">nuget.org</span>. И если разработчик хочет поделиться  своими наработками, он может загрузить свой код в виде Nuget-пакета в этот репозиторий, а другие разработчики могут скачать этот пакет и использовать его в свой программе.  Посмотрим, как устанавливать Nuget-пакеты и использовать их в своем проекте. Прежде всего стоит отметить, что есть различные способы установки пакетов. В данном случае рассмотрим установку пакетов  с помощью .NET CLI и в Visual Studio.</p> <h3>Установка nuget-пакетов с помощью .NET CLI</h3> <p>Если мы компилируем приложение непосредственно с помощью .NET CLI без каких-нибудь сред разработки типа Visual Studio, то мы можем воспользоваться встроенными инструментами,  которые имеются в .NET SDK.</p> <p>Для примера создадим с помощью .NET CLI новый проект консольного приложения:</p> <div class=""console""><pre class=""consoletext"">dotnet new console</pre></div> <p>Для примера возьмем такой популярный Nuget-пакет как <span class=""b"">Newtonsoft.Json</span>, который предназначен для работы с кодом json. Для этого перейдем в терминале к расположению проекта и выполним команду:</p> <div class=""console""><pre class=""consoletext"">dotnet add package Newtonsoft.Json</pre></div> <p>После команды <code>dotnet add package</code> указывается имя пакета:</p> <img alt=""Установка пакета Nuget в проект на C# с помощью .NET CLI"" src=""./pics/3.43.png""/> <p>если после этого мы откроем файл конфигурации проекта с расширением <span class=""ii"">csproj</span>, то встретим там элемент  <span class=""b"">PackageReference</span>, который представляет добавленный пакет</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_79916""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ItemGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PackageReference</code> <code class=""xml color1"">Include</code><code class=""xml plain"">=</code><code class=""xml string"">""Newtonsoft.Json""</code> <code class=""xml color1"">Version</code><code class=""xml plain"">=</code><code class=""xml string"">""13.0.1""</code> <code class=""xml plain"">/&gt;</code></div><div class=""line number3 index2 alt2""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">ItemGroup</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь мы видим атрибут <code>Include</code>, который указывает на название пакета для включения в проект, и атрибут <code>Version</code> - версию пакета.</p> <p>Пакет добавили, теперь используем его. Для этого определим следующий код программы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_921056""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">Newtonsoft.Json;  </code><code class=""c# comments"">// подключаем пространство имен из пакета Newtonsoft.Json</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 38);</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// сериализуем объект tom в код json</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">json = JsonConvert.SerializeObject(tom);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(json);</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name {</code><code class=""c# keyword"">get</code><code class=""c# plain"">;</code><code class=""c# keyword"">set</code><code class=""c# plain"">;}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age {</code><code class=""c# keyword"">get</code><code class=""c# plain"">;</code><code class=""c# keyword"">set</code><code class=""c# plain"">;}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>С помощью вызова статического метода <code>JsonConvert.SerializeObject(tom)</code> сериализуем объект tom в код json и потом этот код выводим на консоль.</p> <p>Запустим проект командой <code>dotnet run</code> и посмотрим на результат программы:</p> <div class=""console""><pre class=""consoletext"">{""Name"":""Tom"",""Age"":38}</pre></div> <p>Таким образом, мы установили в проект Nuget-пакет и использовали его функциональность в своей программе. Если впоследствии пакет станет не нужен,  то его можно удалить командой:</p> <div class=""console""><pre class=""consoletext"">dotnet remove package Newtonsoft.Json</pre></div> <p>После команды <code>dotnet remove package</code> указывается название удаляемого пакета.</p> <h3>Установка пакета в Visual Studio</h3> <p>Visual Studio обладает богатым функционалом в плане работы с nuget-пакетами. Так, возьмем также простейший проект консольного приложения и добавим в него тот же пакет  <span class=""b"">Newtonsoft.Json</span>. Для этого нажмем правой кнопкой на название проекта и в контекстном меню выберем <span class=""b"">Manage NuGet Packages...</span>:</p> <img alt=""Добавление nuget пакетов в проект на C# в Visual Studio"" src=""./pics/3.44.png""/> <p>Нам откроется встроенный менеджер пакетов Nuget:</p> <img alt=""Добавление nuget пакетов в проект в Visual Studio"" src=""./pics/3.45.png""/> <p>Для упрощения поиска нужного пакета введем название пакета в поле поиска. После этого список пакетов обновится. И обычно первый пакет в этом списке тот, который нужен.  При необходимости в правой части мы можем посмотреть информацию о пакете.</p> <p>Итак, нажмем на кнопку Install для его установки. Далее может отобразиться дополнительное окно для просмотра пакетов, которые непосредственно будут установлены:</p> <img alt=""Установка nuget пакетов в проект на C# в Visual Studio"" src=""./pics/3.46.png""/> <p>После установки в структуре проекта появится узел Packages с установленным пакетом, и соответствующая запись будет внесена в файл конфигурации проекта:</p> <img alt=""Установка nuget пакета в проект на C# в Visual Studio"" src=""./pics/3.47.png""/> <p>И теперь мы также сможем использовать функциональность пакета в программе.</p> <p>В качестве альтернативы для добавления пакетов можно использовать <span class=""b"">Package Manager Console</span>.  Для этого в меню Visual Studio перейдем к пункту <span class=""b"">Tools -&gt; NuGet Package Manager -&gt; Package Manager Console</span>. И в открывшемся внизу в  Visual Studio окне <span class=""b"">Package Manager Console</span> введем команду:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_12830""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Install-Package Newtonsoft.Json</code></div></div></td></tr></tbody></table></div></div> <p>Формат: после команды <code>Install-Package</code> указывается название устанавливаемого пакета.</p> <img alt=""Install-Package и установка пакета nuget в C# в Visual Studio"" src=""./pics/3.48.png""/>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Константы, поля и структуры для чтения</h2>   <h3>Константы классы</h3> <p>Кроме полей класс может определять для хранения данных константы. В отличие от полей их значение устанавливается один раз непосредственно при их  объявлении и впоследствии не может быть изменено. Кроме того, константы хранят некоторые данные, которые относятся не к одному объекту, а ко всему классу в целом. И для обращения к константам применяется  не имя объекта, а имя класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_525074""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Person: Tom</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(Person.type); </code><code class=""c# comments"">// Person</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// Person.type = ""User"";    // !Ошибка: изменить константу нельзя</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">type = </code><code class=""c# string"">""Person""</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""{type}: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в классе Person определена константа <code>type</code>, которая хранит название класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_621627""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">type = </code><code class=""c# string"">""Person""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Название класса не зависит от объекта. Мы можем создать много объектов Person, но название класса от этого не должно измениться - оно относится ко всем объектам Person и не  должно меняться. Поэтому название типа можно сохранить в виде константы.</p> <p>Стоит отметить, что константе сразу при ее определении необходимо присвоить значение.</p> <p>Подобно обычным полям мы можем обращаться к константам класса внутри этого класса. Например, в методе Print значение константы выводится на консоль.</p> <p>Однако если мы хотим обратиться к константе вне ее класса, то для обращения необходимо использовались имя класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_431012""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(Person.type); </code><code class=""c# comments"">// Person</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, если необходимо хранить данные, которые относятся ко всему классу в целом, то можно использовать константы.</p> <h3>Поля для чтения и модификатор readonly</h3> <p><span class=""b"">Поля для чтения</span> представляют такие поля класса или структуры, значение которых нельзя изменить. Таким полям можно  присвоить значение либо при непосредственно при их объявлении, либо в конструкторе. В других местах программы присваивать значение таким полям  нельзя, можно только считывать их значение.</p> <p>Поле для чтения объявляется с ключевым словом <span class=""b"">readonly</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_640210""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tom.name);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">//tom.name = ""Sam""; // !Ошибка: нельзя изменить</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">; </code><code class=""c# comments"">// можно так инициализировать</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name; </code><code class=""c# comments"">// в конструкторе также можно присвоить значение полю для чтения</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">ChangeName(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">otherName)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">//this.name = otherName;    // так нельзя </code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь поле <code>name</code> хранит имя пользователя и представляет поле для чтения. Ему можно присвоить значение непосредственно при объявлении:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_36513""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Undefined""</code><code class=""c# plain"">;</code></div></div></td></tr></tbody></table></div></div> <p>Либо можно присвоить значение в конструкторе</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_642375""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В остальных местах программы, в том числе в самом классе Person присвоить значение полю для чтения нельзя.</p> <h3>Сравнение констант</h3> <ul> <li><p>Константы должны быть определены во время компиляции, а поля для чтения могут быть определены во время выполнения программы.</p> <p>Соответственно значение константы можно установить только при ее определении.</p> <p>Поле для чтения можно инициализировать либо при его определении, либо в конструкторе класса.</p></li> <li><p>Константы не могут использовать модификатор static, так как уже неявно являются статическими. Поля для чтения могут быть как статическими, так и не статическими.</p></li> </ul> <h3>Структуры для чтения</h3> <p>Кроме полей для чтения в C# можно определять структуры для чтения. Для этого они предваряются модификатором <span class=""b"">readonly</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_991903""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">readonly</code> <code class=""c# keyword"">struct</code> <code class=""c# plain"">Person { }</code></div></div></td></tr></tbody></table></div></div> <p>Особенностью таких структур является то, что все их поля должны быть также полями для чтения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_964427""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">readonly</code> <code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>То же самое касается и свойств, которые должны быть доступны только для чтения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_340886""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">readonly</code> <code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// указывать readonly необязательно</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// свойство только для чтения</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.8.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Null и ссылочные типы</h2>   <p>Кроме стандартных значений типа чисел, строк, язык C# имеет специальное значение - <span class=""b"">null</span>, которое фактически  указывает на отсутствие значения как такового, отсутствие данных. До сих пор значение <span class=""b"">null</span> выступает как значение по умолчанию для ссылочных типов.</p> <p>До версии C# 8.0 всем ссылочным типам спокойно можно было присваивать значение <span class=""b"">null</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_196854""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(name); </code></div></div></td></tr></tbody></table></div></div> <p>Но начиная с версии C# 8.0 в язык была введена концепция <span class=""b"">ссылочных nullable-типов</span> (nullable reference types) и  <span class=""b"">nullable aware context</span> - nullable-контекст, в котором можно использовать ссылочные nullable-типы.</p> <p>Чтобы определить переменную/параметр ссылочного типа, как переменную/параметр, которым можно присваивать значение <span class=""b"">null</span>, после названия типа указывается знак вопроса <span class=""b"">?</span></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_999612""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// ничего не выведет</code></div></div></td></tr></tbody></table></div></div> <p>К примеру встроенный метод <code>Console.ReadLine()</code>. который считывает с консоли строку, возвращает именно значение <span class=""b"">string?</span>, а не просто <code>string</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_513740""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = Console.ReadLine();</code></div></div></td></tr></tbody></table></div></div> <p>Зачем нужно это значение null? В различных ситуациях бывает удобно, чтобы объекты могли принимать значение null, то есть были бы не определены.  Стандартный пример - работа с базой данных, которая может содержать значения null. И мы можем заранее не знать, что мы получим из базы данных -  какое-то определенное значение или же null.</p> <p>При этом подобные ссылочные типы, которые допускают присвоение значения <code>null</code>, доступно только в nullable-контексте. Для nullable-контекста характерны следующие особенности:</p> <ul> <li><p>Переменную ссылочного типа следует инициализировать конкретным значением, ей не следует присваивать значение <span class=""b"">null</span></p></li> <li><p>Переменной ссылочного nullable-типа можно присвоить значение <span class=""b"">null</span>, но перед использование необходимо проверять ее на значение <span class=""b"">null</span>.</p></li> </ul> <p>Начиная с .NET 6 и C# 10 nullable-контекст по умолчанию распространяется на все файлы кода в проекта. Например, если мы наберем в Visual Studio 2022 для проекта .NET 6 предыдущий пример,  то мы столкнемся с предупреждением:</p> <img alt=""nullable reference types in C# и .NET"" src=""./pics/2.17.png""/> <p>Хотя nullable-контекст - это опция, которой мы можем управлять. Так, откроем файл проекта. Для этого либо двойным кликом левой кнопкой мыши нажмем на проект, либо нажмем на проект правой кнопкой мыши и в появившемся меню выберем пункт  <span class=""b"">Edit Project File</span></p> <img alt=""nullable enable в C# в Visual Studio"" src=""./pics/2.18.png""/> <p>После этого Visual Studio откроет нам файл проекта, который будет выглядеть примерно следующим образом:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_577442""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Project</code> <code class=""xml color1"">Sdk</code><code class=""xml plain"">=</code><code class=""xml string"">""Microsoft.NET.Sdk""</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;Exe&lt;/</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;</code></div><div class=""line number5 index4 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;net6.0&lt;/</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;</code></div><div class=""line number6 index5 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div><div class=""line number7 index6 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">Project</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь строка</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_529687""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>точнее элемент <code>&lt;Nullable&gt;</code> со значением <span class=""b"">enable</span> указывает,  что эта nullable-контекст будет распространяться на весь проект.</p> <p>Чем так плох <span class=""b"">null</span>? Дело в том, что это значение означает, отсутствие данных. Но, допустим, у нас есть ситуация, когда мы получаем извне некоторую строку и  пытаемся обратиться к ее функциональности. Например, в примере ниже у строки вызывается метод <code>ToUpper()</code>, который переводит все символы строки в верхний регистр:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_360144""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">PrintUpper(name);  </code><code class=""c# comments"">// ! NullReferenceException</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь при выполнении вызова <code>PrintUpper(name)</code> мы столкнемся с исключением <span class=""b"">NullReferenceException</span>,  и программа аварийно завершит свою работу. Кто-то может сказать, что ситуация искуственная - мы же явно знаем, что в функцию передается  null. Однако в реальности данные могут приходить извне, например, из базы данных, откуда-то из сети и т.д. И мы можем явно не знать, есть ли в реальности данные или нет.  И использование ссылочных nullable-типов позволяет частично решить эту ситуацию. Частично - поскольку предупреждения все равно не мешают нам скомпилировать и  запустить программу выше. Однако nullable-контекст позволяет воспользоваться возможностями статического анализа, благодаря которому можно увидеть потенциально опасные  куски кода, где мы можем столкнуться с NullReferenceException.</p> <p>Кроме того, есть вероятность, что Microsoft изменит отношение в отношении null и NullReferenceException, и подобные предупреждения превратятся в будущих версиях в ошибки,  поэтому лучше уже сейчас быть к этому готовым</p> <p>Например, изменим предыдущий пример следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_725290""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">PrintUpper(name);  </code><code class=""c# comments"">// </code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code><code class=""c# plain"">? text)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь статический анализ подскажет, что в методе PrintUpper потенциально опасная ситуация, поскольку параметр <code>text</code>  может быть равен <span class=""b"">null</span>.</p> <img alt=""nullable static analyse в C# в Visual Studio"" src=""./pics/2.19.png""/> <h4>Отключение nullable-контекста</h4> <p>Для отключения nullable-контекста в файле конфигурации проекта достаточно изменить значение опции <span class=""b"">Nullable</span>, например, на ""disable"":</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_515694""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Project</code> <code class=""xml color1"">Sdk</code><code class=""xml plain"">=</code><code class=""xml string"">""Microsoft.NET.Sdk""</code><code class=""xml plain"">&gt;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;Exe&lt;/</code><code class=""xml keyword"">OutputType</code><code class=""xml plain"">&gt;</code></div><div class=""line number5 index4 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;net6.0&lt;/</code><code class=""xml keyword"">TargetFramework</code><code class=""xml plain"">&gt;</code></div><div class=""line number6 index5 alt1""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;enable&lt;/</code><code class=""xml keyword"">ImplicitUsings</code><code class=""xml plain"">&gt;</code></div><div class=""line number7 index6 alt2""><code class=""xml spaces"">    </code><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;disable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""xml spaces"">  </code><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">PropertyGroup</code><code class=""xml plain"">&gt;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""xml plain"">&lt;/</code><code class=""xml keyword"">Project</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Отключив nullable-контекст, мы больше не сможем использовать в файлах кода в проекте ссылочные nullable-типы и соответственно воспользоваться  встроенным статическим анализом потенциально опасных ситуаций, где можно столкнуться с NullReferenceException.</p> <h4>nullable-контекст на уровне участка кода</h4> <p>Мы также можем включить nullable-контекст на урове отдельных участков кода с помощью директивы <span class=""b"">#nullable enable</span>.  Допустим, глобально у нас отключен nullable-контекст:</p> <div><div class=""syntaxhighlighter xml"" id=""highlighter_407431""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""xml plain"">&lt;</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;disable&lt;/</code><code class=""xml keyword"">Nullable</code><code class=""xml plain"">&gt;</code></div></div></td></tr></tbody></table></div></div> <p>Определим в файле <span class=""b"">Program.cs</span> следующий код:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_370983""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# preprocessor"">#nullable enable // включаем nullable-контекст на уровне файла</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">PrintUpper(name);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code><code class=""c# plain"">? text)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Первая строка позволяет включить на уровне всего файла nullable-контекст.</p> <img alt=""#nullable enable в C# и .NET"" src=""./pics/2.20.png""/> <h3>Оператор ! (null-forgiving operator)</h3> <p>Оператор <span class=""b"">!</span> (null-forgiving operator) позволяет указать, что переменная ссылочного типа не равна <span class=""b"">null</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_416943""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">PrintUpper(name!);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code><code class=""c# plain"">(text == </code><code class=""c# keyword"">null</code><code class=""c# plain"">) Console.WriteLine(</code><code class=""c# string"">""null""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code> <code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь если бы мы не использовали оператор !, а написали бы <code>PrintUpper(name)</code>, то компилятор высветил бы нам предупреждение.  Но в самом методе мы итак проверяем на null, поэтому даже если в метод передается null, то мы не столкнемся ни с какими проблемами. И чтобы убрать  ненужное предупреждение, применяется данный оператор. То есть данный оператор не оказывает никакого влияния во время выполнения кода и предназначен только  для статического анализа компилятора. Во время выполнения выражение <code>name!</code> будет аналогично значению <code>name</code></p> <h3>Исключение кода из nullable-контекста</h3> <p>С помощью специальной директивы <span class=""b"">#nullable disable</span> можно исключить какой-то определенный кусок кода из nullable-контекста. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_74496""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# preprocessor"">#nullable disable</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# keyword"">null</code><code class=""c# plain"">; </code><code class=""c# comments"">// здесь nullable-контекст не действует</code></div><div class=""line number3 index2 alt2""><code class=""c# preprocessor"">#nullable restore</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? name = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;   </code><code class=""c# comments"">// здесь nullable-контекст снова действует</code></div></div></td></tr></tbody></table></div></div> <p>Любой код между директивами <span class=""b"">#nullable disable</span> и <span class=""b"">#nullable restore</span> будет исключен из nullable-контекста и тем самым  не будет подлежать статическому анализу.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Null и значимые типы</h2>   <p>В отличие от ссылочных типов переменным/параметрам значимых типов нельзя напрямую присвоить значение <span class=""b"">null</span>. Тем не менее  нередко бывает удобно, чтобы переменная/параметр значимого типа могли принимать значение null, Например, получаем числовое значение из базы данных, которое в бд  может отсутствовать. То есть, если значение в базе данных есть - получим число, если нет - то null.</p> <p>Чтобы присвоения переменной или параметру значимого типа значения <span class=""b"">null</span>, эти переменная/параметр значимого типа должны представлять тип <span class=""b"">nullable</span>. Для этого  после названия типа указывается знак вопроса <span class=""b"">?</span></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_391890""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? val = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(val);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменная <code>val</code> представляет не просто тип <code>int</code>, а тип <span class=""b"">int?</span> - тип, переменные/параметры  которого могут принимать как значения типа <code>int</code>, так и значение <code>null</code>. В данном случае мы передаем ей значение  <span class=""b"">null</span>. Но также можно передать и значение типа <code>int</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_512338""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? val = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">IsNull(val);    </code><code class=""c# comments"">// null</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">val = 22;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">IsNull(val);    </code><code class=""c# comments"">// 22</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">IsNull(</code><code class=""c# keyword"">int</code><code class=""c# plain"">? obj)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(obj == </code><code class=""c# keyword"">null</code><code class=""c# plain"">) Console.WriteLine(</code><code class=""c# string"">""null""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code> <code class=""c# plain"">Console.WriteLine(obj);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако если переменная/параметр представляет значимый не nullable-тип, то присвоить им значение <span class=""b"">null</span> не получится:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_298767""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">val = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;  </code><code class=""c# comments"">// ! ошибка, переменная val НЕ представляет тип nullable</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что фактически запись <code>?</code> для значимых типов является упрощенной формой использования структуры <span class=""b"">System.Nullable&lt;T&gt;</span>. Параметр  <code>T</code> в угловых скобках представляет универсальный параметр, вместо которого в программе подставляется конкретный тип  данных. Следующие виды определения переменных будут эквивалентны:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_504993""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? number1 = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Nullable&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; number2 = 5;</code></div></div></td></tr></tbody></table></div></div> <h4>Свойства Value и HasValue и метод GetValueOrDefault</h4> <p>Структура <span class=""b"">Nullable&lt;T&gt;</span> имеет два свойства:</p><p> </p><ul> <li><p><span class=""b"">Value</span> - значение объекта</p></li> <li><p><span class=""b"">HasValue</span>: возвращает <code>true</code>, если объект хранит некоторое значение, и <code>false</code>, если объект равен <code>null</code>.</p> </li></ul> <p>Мы можем использовать эти свойства для проверки наличия и получения значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_798128""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">PrintNullable(5);       </code><code class=""c# comments"">// 5</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">PrintNullable(</code><code class=""c# keyword"">null</code><code class=""c# plain"">);    </code><code class=""c# comments"">// параметр равен null</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintNullable(</code><code class=""c# keyword"">int</code><code class=""c# plain"">? number)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(number.HasValue)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(number.Value);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// аналогично</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(number);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""параметр равен null""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако если мы попробуем получить через свойство Value значение переменной, которая равна null, то мы столкнемся с ошибкой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_49680""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? number = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(number.Value);    </code><code class=""c# comments"">// ! Ошибка</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(number);          </code><code class=""c# comments"">// Ошибки нет - просто ничего не выведет</code></div></div></td></tr></tbody></table></div></div> <p>Также структура <span class=""b"">Nullable&lt;T&gt;</span> имеет метод <span class=""b"">GetValueOrDefault()</span>. Он возвращает значение переменной/параметра, если они не равны <span class=""b"">null</span>.  Если они равны <span class=""b"">null</span>, то возвращается значение по умолчанию. Значение по умолчанию можно передать в метод. Если в метод не передается данных, то возвращается значение по умолчанию для данного типа данных  (например, для числовых данных это число 0).</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_579155""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? number = </code><code class=""c# keyword"">null</code><code class=""c# plain"">; </code><code class=""c# comments"">// если значения нет, метод возвращает значение по умолчанию</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(number.GetValueOrDefault());      </code><code class=""c# comments"">// 0  - значение по умолчанию для числовых типов</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(number.GetValueOrDefault(10));    </code><code class=""c# comments"">// 10</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">number = 15;    </code><code class=""c# comments"">// если значение задано, оно возвращается методом</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(number.GetValueOrDefault());    </code><code class=""c# comments"">// 15</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(number.GetValueOrDefault(10));  </code><code class=""c# comments"">// 15</code></div></div></td></tr></tbody></table></div></div> <h3>Преобразование значимых nullable-типов</h3> <p>Рассмотрим возможные преобразования:</p> <ul> <li> <p>явное преобразование от T? к T</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_960126""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? x1 = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code><code class=""c# plain"">(x1.HasValue)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x2 = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)x1;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(x2);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> </li> <li> <p>неявное преобразование от T к T?</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_425598""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x1 = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? x2 = x1;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(x2);</code></div></div></td></tr></tbody></table></div></div> </li> <li> <p>неявные расширяющие преобразования от V к T?</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_144249""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x1 = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">long</code><code class=""c# plain"">? x2 = x1;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(x2);</code></div></div></td></tr></tbody></table></div></div> <p>явные сужающие преобразования от V к T?</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_577416""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code> <code class=""c# plain"">x1 = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? x2 = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">?)x1;</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Подобным образом работают явные сужающие преобразования от V? к T?</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_860772""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code><code class=""c# plain"">? x1 = 4;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? x2 = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">?)x1;</code></div></div></td></tr></tbody></table></div></div></li> <li><p>явные сужающие преобразования от V? к T</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_100158""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code><code class=""c# plain"">? x1 = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(x1.HasValue) </code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{ </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x2 = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)x1; </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> </li> </ul> <h3>Операции с nullable-типами</h3> <p>nullable-типы поддерживают тот же набор операций, что и их не-nullable двойники. Но следует учитывать, что если в операции участвует nullable-тип, то  результатом также будет значение nullable-типа</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_124573""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? x = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = x + 7;          </code><code class=""c# comments"">// нельзя</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? w = x + 7;         </code><code class=""c# comments"">// можно</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">d = x.Value + 7;    </code><code class=""c# comments"">// можно</code></div></div></td></tr></tbody></table></div></div> <p>В арифметических операциях, если один из операндов равен null, то результатом операции также будет null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_544475""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? x = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? w = x + 7;         </code><code class=""c# comments"">// w = null</code></div></div></td></tr></tbody></table></div></div> <p>В операциях сравнения <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> и <code>&lt;=</code>, если хотя бы один из операндов равен null, то возвращается <code>false</code> (кроме операции <code>!=</code>):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_195172""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? x = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? y = 5;     </code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? z = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;  </code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &gt; y is {x &gt; y}""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// false</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &lt; y is {x &lt; y}""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// false </code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &gt;= y is {x &gt;= y}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &lt;= y is {x &lt;= y}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &gt; z is {x &gt; z}""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// false</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &lt; z is {x &lt; z}""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// false </code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &gt;= z is {x &gt;= z}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x &lt;= z is {x &lt;= z}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> <p>В операциях же <code>==</code> и <code>!=</code> идет стандартное сравнение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_48474""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? x = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? y = 5;     </code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? z = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;  </code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x == y is {x == y}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x != y is {x != y}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// true</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x == z is {x == z}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// true</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x != z is {x != z}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Проверка на null, операторы ?. и ??</h2>   <h3>Проверка на null. Null guard</h3> <p>Если мы собираемся использовать переменную или параметр, которые допускают значение <span class=""b"">null</span>, то есть представляют  nullable-тип (не важно значимый или ссылочный), то, чтобы избежать возникновения NullReferenceException, мы можем проверить на null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_144681""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code><code class=""c# plain"">? text)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(text!=</code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}    </code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае если параметр text не равен null, то вызываем у строки метод <code>ToUpper()</code>, который переводит символы строки в верхний регистр.</p> <p>Кроме того, с помощью оператора <span class=""b"">is</span> мы можем проверить значение объекта:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_2402""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">объект </code><code class=""c# keyword"">is</code> <code class=""c# plain"">значение</code></div></div></td></tr></tbody></table></div></div> <p>Если объект слева от оператора <span class=""b"">is</span> имеет значение справа от оператора. тогда оператор is возвращает <code>true</code>, иначе  возвращается <code>false</code></p> <p>Например, проверка параметра/переменной на значение null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_38924""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code><code class=""c# plain"">? text)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(text </code><code class=""c# keyword"">is</code>  <code class=""c# keyword"">null</code><code class=""c# plain"">) </code><code class=""c# keyword"">return</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Или, наоборот, с помощью <span class=""b"">is not</span> можно проверить отсутствие значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_61028""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code><code class=""c# plain"">? text)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(text </code><code class=""c# keyword"">is</code> <code class=""c# plain"">not </code><code class=""c# keyword"">null</code><code class=""c# plain"">) </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также можно проверить на соответствие типу, значение которого мы собираемся использовать:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_432072""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintUpper(</code><code class=""c# keyword"">string</code><code class=""c# plain"">? text)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(text </code><code class=""c# keyword"">is</code> <code class=""c# keyword"">string</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(text.ToUpper());</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""NULL""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Подобные проверки еще называются <span class=""b"">null guard</span> или условно говоря ""защита от null"".</p> <h3 id=""nullcoalesce"">Оператор ??</h3> <p>Оператор ?? называется оператором <span class=""b"">null-объединения</span>. Он применяется для установки значений по умолчанию для типов,  которые допускают значение null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_500263""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">левый_операнд ?? правый_операнд</code></div></div></td></tr></tbody></table></div></div> <p>Оператор ?? возвращает левый операнд, если этот операнд не равен <code>null</code>.  Иначе возвращается правый операнд. При этом левый операнд должен принимать null. Посмотрим на примере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_490395""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? text = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = text ?? </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;  </code><code class=""c# comments"">// равно Tom, так как text равен null</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? id = 200;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">personid = id ?? 1; </code><code class=""c# comments"">// равно 200, так как id не равен null</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(personid);    </code><code class=""c# comments"">// 200</code></div></div></td></tr></tbody></table></div></div> <p>Но мы не можем написать следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_178557""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 44;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x ?? 100;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменная x представляет значимый тип int и не может принимать значение null, поэтому в качестве левого операнда в операции ??  она использоваться не может.</p> <p>Также можно использовать производный оператора <span class=""b"">??=</span></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_323757""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? text = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">text ??= </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// аналогично</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// text = text ?? ""Sam"";</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// Sam</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">? id = 100;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">id ??= 1;</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// аналогично</code></div><div class=""line number10 index9 alt1""><code class=""c# comments"">//id = id ?? 1;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine(id); </code><code class=""c# comments"">// 100</code></div></div></td></tr></tbody></table></div></div> <h3>Оператор условного null</h3> <p>Иногда при работе с объектами, которые принимают значение null, мы можем столкнуться с ошибкой: мы пытаемся обратиться к объекту,  а этот объект равен null. Например, пусть у нас есть следующая система классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_122730""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company? Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }   </code><code class=""c# comments"">// место работы</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code><code class=""c# plain"">? WebSite { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }    </code><code class=""c# comments"">// веб-сайт компании</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Объект Person представляет человека. Его свойство Company представляет компанию, где человек работает. Но человек может не работать, поэтому свойство Company имеет  тип <code>Company?</code>, то есть может иметь значение null.</p> <p>Класс Company в свою очередь содержит свойство WebSite, которое представляет веб-сайт компании. Но у компании может и не быть собственного веб-сайта.  Поэтому это свойство имеет тип <code>string?</code>, то есть также допускает значение null.</p> <p>Допустим, нам надо вывести на консоль заглавными буквами веб-сайт компании, где работает человек (если он, конечно, работает и если у компании, где он работает, есть сайт). На первый взгляд мы можем написать следующую  конструкцию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_425837""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintWebSite(Person? person)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(person != </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code><code class=""c# plain"">(person.Company != </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code><code class=""c# plain"">(person.Company.WebSite != </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine(person.Company.WebSite.ToUpper());</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company? Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }   </code><code class=""c# comments"">// место работы</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code><code class=""c# plain"">? WebSite { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }    </code><code class=""c# comments"">// веб-сайт компании</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В методе <code>PrintWebSite()</code> принимаем объект Person? и, чтобы избежать исключения NullReferenceException, последовательно проверяем все используемые значения на null, чтобы в конце с помощью метода  <code>ToUpper()</code> вывести заглавными буквами название сайта.</p> <p>Хоть это и рабочий способ, но для простого вывода строки получается многоэтажная конструкция, но на самом деле ее можно сократить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_627203""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintWebSite(Person? person)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(person != </code><code class=""c# keyword"">null</code> <code class=""c# plain"">&amp;&amp; person.Company != </code><code class=""c# keyword"">null</code> <code class=""c# plain"">&amp;&amp; person.Company.WebSite != </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(person.Company.WebSite.ToUpper());</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Конструкция намного проще, но все равно получается довольно большой. И чтобы ее упростить, в C# есть оператор условного null  (Null-Conditional Operator)  - оператор <span class=""b"">?.</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_694559""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">объект?.компонент</code></div></div></td></tr></tbody></table></div></div> <p>Если объект не равен <span class=""b"">null</span>, то происходит обращение к компоненту объекта - полю, свойству, методу. Если объект  представляет значение null, обращение к компаненту метода не происходит.</p> <p>Применим данный оператор, изменив предыдущий пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_505183""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintWebSite(Person? person)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person?.Company?.WebSite?.ToUpper());</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, если person не равен null, то происходит обращение к его свойству Company. Если свойство Company не равно null, то идет обрашение к свойству  WebSite объекта Company. Если свойство WebSite не равно null, то идет обращение к методу <code>ToUpper()</code>.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Псевдонимы типов и статический импорт</h2>   <h3>Псевдонимы</h3><p>Для различных классов и структур мы можем использовать псевдонимы. Затем в программе вместо названия типа используется его псевдоним. Например,  для вывода строки на экран применяется метод <code>Console.WriteLine()</code>. Но теперь зададим для класса <span class=""b"">Console</span>  псевдоним:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_519727""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">printer = System.Console;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">printer.WriteLine(</code><code class=""c# string"">""Laudate omnes gentes laudate""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">printer.WriteLine(</code><code class=""c# string"">""Magnificat in secula""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>С помощью выражения <code>using printer = System.Console</code> указываем, что псевдонимом для класса System.Console будет имя <code>printer</code>. Это выражение  не имеет ничего общего с подключением пространств имен в начале файла, хотя и использует оператор <code>using</code>. При этом используется полное имя класса  с учетом пространства имен, в котором класс определен. И далее, чтобы вывести  строку, применяется выражение <code>printer.WriteLine(""Laudate omnes gentes laudate"")</code>.</p> <p>Данная возможность может применяться, когда имена классов и структур довольно длинные, и мы хотим их сократить для большей лаконичности кода,  либо когда мы хотим иметь более выразительные на наш субъективный взгляд имена типов.</p> <p>И еще пример. Определим класс и для него псевдоним:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_932134""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">printer = System.Console;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">using</code> <code class=""c# plain"">User = Person;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">User tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">printer.WriteLine(tom.Name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс называется Person, но в программе для него используется псевдоним User.</p> <h3>Статический импорт</h3> <p>Также в C# имеется возможность импорта статической функциональности классов. Например, импортируем возможности класса <code>Console</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_79923""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">System.Console;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">WriteLine(</code><code class=""c# string"">""Hello from C# 8.0""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Выражение <span class=""b"">using static</span> подключает в программу все статические методы и свойства, а также константы. И после этого мы можем  не указывать название класса при вызове метода.</p> <p>Подобным образом можно определять свои классы и импортировать их:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_342464""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">System.Console;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">using</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">Operation;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">WriteLine(Sum(5, 4));       </code><code class=""c# comments"">// 9</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">WriteLine(Subtract(5, 4));  </code><code class=""c# comments"">// 1</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">WriteLine(Multiply(5, 4)); </code><code class=""c# comments"">// 20</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">static</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Operation</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b) =&gt; a + b;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Subtract(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b) =&gt; a - b;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b) =&gt; a * b;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
            };
            string[] tasks = new string[]
            {
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
            };
            if (form1Instance != null && comboBox3.SelectedIndex >= 0 && comboBox3.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login;
                selectIndex = comboBox3.SelectedIndex;
                selectCombobox = 3;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }
        private async void comboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Объектно-ориентированное программирование</h1><h2>Наследование</h2>   <p>Наследование (inheritance) является одним из ключевых моментов ООП. Благодаря наследованию один класс может унаследовать функциональность  другого класса.</p> <p>Пусть у нас есть следующий класс Person, который описывает отдельного человека:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_606640""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">_name = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">_name; }</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ _name = value; }</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Но вдруг нам потребовался класс, описывающий сотрудника предприятия - класс Employee. Поскольку этот класс будет реализовывать тот же  функционал, что и класс Person, так как сотрудник - это также и человек, то было бы рационально сделать класс Employee производным  (или наследником, или подклассом) от класса Person, который, в свою очередь, называется базовым классом или родителем (или суперклассом):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_93676""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После двоеточия мы указываем базовый класс для данного класса. Для класса Employee базовым является Person, и поэтому класс Employee  наследует все те же свойства, методы, поля, которые есть в классе Person. Единственное, что не передается при наследовании, это конструкторы базового класса с параметрами.</p> <p>Таким образом, наследование реализует отношение <span class=""b"">is-a</span> (является), объект класса Employee также является объектом класса Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_265969""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Print();   </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee { Name = </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">person.Print();   </code><code class=""c# comments"">// Sam</code></div></div></td></tr></tbody></table></div></div> <p>И поскольку объект Employee является также и объектом Person, то мы можем так определить переменную: <code>Person p = new Employee()</code>.</p> <p>По умолчанию все классы наследуются от базового класса <span class=""b"">Object</span>, даже если мы явным образом не устанавливаем наследование.  Поэтому выше определенные классы Person и Employee кроме своих собственных методов, также будут иметь и методы класса  Object: ToString(), Equals(), GetHashCode() и GetType().</p> <p>Все классы по умолчанию могут наследоваться. Однако здесь есть ряд ограничений:</p> <ul> <li><p>Не поддерживается множественное наследование, класс может наследоваться только от одного класса.</p></li> <li><p>При создании производного класса надо учитывать тип доступа к базовому классу - тип доступа к производному классу должен быть  таким же, как и у базового класса, или более строгим. То есть, если базовый класс у нас имеет тип доступа <span class=""b"">internal</span>,  то производный класс может иметь тип доступа <span class=""b"">internal</span> или <span class=""b"">private</span>, но не <span class=""b"">public</span>.</p> <p>Однако следует также учитывать, что если базовый и производный класс находятся в разных сборках (проектах), то в этом случае производый класс может наследовать только от класса,  который имеет модификатор public.</p></li> <li><p>Если класс объявлен с модификатором <span class=""b"">sealed</span>, то от этого класса нельзя наследовать и создавать производные классы.  Например, следующий класс не допускает создание наследников:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_681635""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">sealed</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Admin</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Нельзя унаследовать класс от статического класса.</p></li> </ul> <h3>Доступ к членам базового класса из класса-наследника</h3> <p>Вернемся к нашим классам Person и Employee. Хотя Employee наследует весь функционал от класса Person, посмотрим, что будет в следующем случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_660580""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintName()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(_name);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Этот код не сработает и выдаст ошибку, так как переменная <code>_name</code> объявлена с модификатором <code>private</code> и поэтому  к ней доступ имеет только класс <code>Person</code>. Но зато в классе Person определено общедоступное свойство Name, которое мы  можем использовать, поэтому следующий код у нас будет работать нормально:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_374247""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintName()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, производный класс может иметь доступ только к тем членам базового класса, которые определены с модификаторами  <span class=""b"">private protected</span> (если базовый и производный класс находятся в одной сборке), <span class=""b"">public</span>, <span class=""b"">internal</span> (если базовый и производный класс находятся в одной сборке), <span class=""b"">protected</span> и <span class=""b"">protected internal</span>.</p> <h3>Ключевое слово base</h3> <p>Теперь добавим в наши классы конструкторы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_191777""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Person имеет конструктор, который устанавливает свойство Name. Поскольку класс Employee наследует и устанавливает то же свойство Name,  то логично было бы не писать по сто раз код установки, а как-то вызвать соответствующий код класса Person.  К тому же свойств, которые надо установить в конструкторе базового класса, и параметров может быть гораздо больше.</p> <p>С помощью ключевого слова <span class=""b"">base</span> мы можем обратиться к базовому классу. В нашем случае в конструкторе класса Employee  нам надо установить имя и компанию. Но имя мы передаем на установку в конструктор базового класса, то есть в конструктор  класса Person, с помощью выражения <code>base(name)</code>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_429266""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Print();     </code><code class=""c# comments"">// Bob</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Employee employee = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">employee.Print();   </code><code class=""c# comments"">// Tom</code></div></div></td></tr></tbody></table></div></div> <h3>Конструкторы в производных классах</h3> <p>Конструкторы не передаются производному классу при наследовании. И если в базовом классе <span class=""b"">не определен</span> конструктор по умолчанию  без параметров, а только конструкторы с параметрами (как в случае с базовым классом Person), то в производном  классе мы обязательно должны вызвать один из этих конструкторов через ключевое слово base. Например, из класса Employee уберем определение конструктора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_92614""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае мы получим ошибку, так как класс Employee не соответствует классу Person, а именно не вызывает конструктор базового класса.  Даже если бы мы добавили какой-нибудь конструктор, который бы устанавливал все те же свойства, то мы все равно бы получили ошибку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_628685""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)    </code><code class=""c# comments"">// ! Ошибка</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>То есть в классе Employee через ключевое слово <span class=""b"">base</span> надо явным образом вызвать конструктор класса Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_471936""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Либо в качестве альтернативы мы могли бы определить в базовом классе конструктор без параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_584667""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// конструктор без параметров</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person()</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Вызов конструктора без параметров""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Тогда в любом конструкторе производного класса, где нет обращения конструктору базового класса, все равно неявно вызывался бы этот конструктор по умолчанию.  Например, следующий конструктор</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_766123""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Company = company;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Фактически был бы эквивалентен следующему конструктору:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_267778""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">:</code><code class=""c# keyword"">base</code><code class=""c# plain"">()</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Company = company;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Порядок вызова конструкторов</h3> <p>При вызове конструктора класса сначала отрабатывают конструкторы базовых классов и только затем конструкторы производных.  Например, возьмем следующие классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_864236""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Person(string name)""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) : </code><code class=""c# keyword"">this</code><code class=""c# plain"">(name)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.age = age;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Person(string name, int age)""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company;</code></div><div class=""line number20 index19 alt1""> </div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name, age)</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.company = company;</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Employee(string name, int age, string company)""</code><code class=""c# plain"">);</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При создании объекта Employee:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_79575""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 22, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Мы получим следующий консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Person(string name) Person(string name, int age) Employee(string name, int age, string company) </pre> </div> <p>В итоге мы получаем следующую цепь выполнений.</p> <ol> <li><p>Вначале вызывается конструктор <code>Employee(string name, int age, string company)</code>. Он делегирует  выполнение конструктору <code>Person(string name, int age)</code></p></li> <li><p>Вызывается конструктор <code>Person(string name, int age)</code>, который сам пока не выполняется и передает  выполнение конструктору <code>Person(string name)</code></p></li> <li><p>Вызывается конструктор <code>Person(string name)</code>, который передает выполнение конструктору класса System.Object,  так как это базовый по умолчанию класс для Person.</p></li> <li><p>Выполняется конструктор <code>System.Object.Object()</code>, затем выполнение возвращается конструктору <code>Person(string name)</code></p></li> <li><p>Выполняется тело конструктора <code>Person(string name)</code>, затем выполнение возвращается конструктору  <code>Person(string name, int age)</code></p></li> <li><p>Выполняется тело конструктора <code>Person(string name, int age)</code>, затем выполнение возвращается конструктору  <code>Employee(string name, int age, string company)</code></p></li> <li><p>Выполняется тело конструктора <code>Employee(string name, int age, string company)</code>. В итоге создается объект Employee</p></li> </ol> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.3.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Преобразование типов</h2>   <p>В предыдущей главе мы говорили о преобразованиях объектов простых типов. Сейчас затронем тему преобразования объектов классов. Допустим, у нас есть  следующая иерархия классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_75951""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Person {Name}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""> </div><div class=""line number23 index22 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Client : Person</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Bank { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Client(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">bank) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Bank = bank;</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number30 index29 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этой иерархии классов мы можем проследить следующую цепь наследования: Object (все классы неявно наследуются от типа Object) -&gt; Person -&gt; Employee|Client.</p> <img alt=""Иерархия наследования в языке C#"" src=""./pics/3.12.png""/> <p>Причем в этой иерархии классов базовые типы находятся вверху, а производные типы - внизу.</p> <h3>Восходящие преобразования. Upcasting</h3> <p>Объекты производного типа (который находится внизу иерархии) в то же время представляют и базовый тип. Например, объект Employee в то же время является и  объектом класса Person. Что в принципе естественно, так как каждый сотрудник (Employee) является человеком (Person). И мы можем написать, например,  следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_100972""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee employee = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person person = employee;   </code><code class=""c# comments"">// преобразование от Employee к Person</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person.Name); </code></div></div></td></tr></tbody></table></div></div> <p>В данном случае переменной person, которая представляет тип Person, присваивается ссылка на объект Employee.  Но чтобы сохранить ссылку на объект одного класса в переменную другого класса, необходимо выполнить преобразование типов - в данном случае от типа Employee  к типу Person. И так как Employee наследуется от класса Person, то автоматически выполняется неявное восходящее преобразование - преобразование к типу,  которые находятся вверху иерархии классов, то есть к базовому классу.</p> <p>В итоге переменные employee и person будут указывать на один и тот же объект в памяти, но переменной person будет доступна только та часть, которая представляет функционал типа Person.</p> <img alt=""Преобразование типов в C#"" src=""./pics/3.15.png""/> <p>Подобным образом поизводятся и другие восходящие преобразования:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_111498""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Client(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""ContosoBank""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// преобразование от Client к Person</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменная bob, которая представляет тип Person, хранит ссылку на объект Client, поэтому также выполняется  восходящее неявное преобразование от производного класса Client к базовому типу Person.</p> <p>Восходящее неявное преобразование будет происходить и в следующем случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_930767""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">object</code> <code class=""c# plain"">person1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// от Employee к object</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">object</code> <code class=""c# plain"">person2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Client(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""ContosoBank""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// от Client к object</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">object</code> <code class=""c# plain"">person3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">);                 </code><code class=""c# comments"">// от Person к object</code></div></div></td></tr></tbody></table></div></div> <p>Так как тип object - базовый для всех остальных типов, то преобразование к нему будет производиться автоматически.</p> <h3>Нисходящие преобразования. Downcasting</h3> <p>Но кроме восходящих преобразований от производного к базовому типу есть нисходящие преобразования или downcasting - от базового типа к производному. Например,  в следующем коде переменная person хранит ссылку на объект Employee:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_257387""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee employee = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person person = employee;   </code><code class=""c# comments"">// преобразование от Employee к Person</code></div></div></td></tr></tbody></table></div></div> <p>И может возникнуть вопрос, можно ли обратиться к функционалу типа Employee через переменную типа Person. Но автоматически такие преобразования не проходят, ведь не каждый  человек (объект Person) является сотрудником предприятия (объектом Employee).  И для нисходящего преобразования необходимо применить явное преобразование, указав в скобках тип, к которому нужно выполнить преобразование:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_231495""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee employee1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person person = employee1;   </code><code class=""c# comments"">// преобразование от Employee к Person</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">//Employee employee2 = person;    // так нельзя, нужно явное преобразование</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Employee employee2 = (Employee)person;  </code><code class=""c# comments"">// преобразование от Person к Employee</code></div></div></td></tr></tbody></table></div></div> <p>Рассмотрим некоторые примеры преобразований:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_327786""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// Объект Employee также представляет тип object</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">object</code> <code class=""c# plain"">obj = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Bill""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// чтобы обратиться к возможностям типа Employee, приводим объект к типу Employee</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Employee employee = (Employee) obj;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// объект Client также представляет тип Person</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Client(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""ContosoBank""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// преобразование от типа Person к Client</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Client client = (Client)person;</code></div></div></td></tr></tbody></table></div></div> <p>В первом случае переменной obj присвоена ссылка на объект Employee, поэтому мы можем преобразовать объект obj к любому типу который располагается в иерархии  классов между типом object и Employee.</p> <p>Если нам надо обратиться к каким-то отдельным свойствам или методам объекта, то нам необязательно присваивать преобразованный объект переменной:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_138417""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// Объект Employee также представляет тип object</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">object</code> <code class=""c# plain"">obj = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Bill""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// преобразование к типу Person для вызова метода Print</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">((Person)obj).Print();</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// либо так</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// ((Employee)obj).Print();</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// преобразование к типу Employee, чтобы получить свойство Company</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">company = ((Employee)obj).Company;</code></div></div></td></tr></tbody></table></div></div> <p>В то же время необходимо соблюдать осторожность при подобных преобразованиях. Например, что будет в следующем случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_605921""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// Объект Employee также представляет тип object</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">object</code> <code class=""c# plain"">obj = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Bill""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// преобразование к типу Client, чтобы получить свойство Bank</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">bank = ((Client)obj).Bank;</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае мы получим ошибку, так как переменная obj хранит ссылку на объект Employee. Данный объект является также объектом типов object и Person,  поэтому мы можем преобразовать его к этим типам. Но к типу Client мы преобразовать не можем.</p> <p>Другой пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_708391""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee employee1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">); </code><code class=""c# comments"">// ! Ошибка</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Employee employee2 = (Employee) person; </code><code class=""c# comments"">// ! Ошибка</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае мы пытаемся преобразовать объект типа Person к типу Employee, а объект Person не является объектом Employee.  Причем в последнем случае Visual Studio не подскжет, что в данной строке ошибка, и данная строка даже нормально скомилируется, тем не менее  в процессе выполнения программы мы получим ощибку. В этом в том числе и кроектся коварство преобразований, поэтому в подобных ситуациях надо проявлять осторожность.</p> <p>Существует ряд способов, чтобы избежать подобных ошибок преобразования.</p> <h3>Способы преобразований</h3> <p>Во-первых, можно использовать ключевое слово <span class=""b"">as</span>. С помощью него программа пытается преобразовать выражение к определенному типу, при этом не  выбрасывает исключение. В случае неудачного преобразования выражение будет содержать значение null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_58865""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee? employee = person </code><code class=""c# keyword"">as</code> <code class=""c# plain"">Employee;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(employee == </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Преобразование прошло неудачно""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">else</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(employee.Company);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что переменная <code>employee</code> здесь определяется не просто как переменная Employee, а именно <span class=""b"">Employee?</span> - после названия типа ставится вопросительный знак. Что указывает,  что переменная может хранить как значение null, так и значение Employee.</p> <p>Второй способ заключается в проверке допустимости преобразования с помощью ключевого слова <span class=""b"">is</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_311161""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">значение </code><code class=""c# keyword"">is</code> <code class=""c# plain"">тип</code></div></div></td></tr></tbody></table></div></div> <p>Если значение слева от оператора представляет тип, указаный справа от оператора, то оператор is возвращает <code>true</code>, иначе возвращается <code>false</code>.</p> <p>Причем оператор <span class=""b"">is</span> позволяет автоматически преобразовать значение к типу, если это значение представляет данный тип. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_427303""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Employee employee)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(employee.Company);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">else</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Преобразование не допустимо""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Выражение <code>if (person is Employee employee)</code> проверяет, является ли переменная person объектом типа Employee. И если person является объектом  Employee, то автоматически преобразует значение переменной person в тип Employee и преобразованное значение сохраняет в переменную employee. Далее в блоке if мы можем  использовать объект employee как значение типа Employee.</p> <p>Однако, если person не является объектом Employee, как в данном случае, то такая проверка вернет значение <code>false</code>, и преобразование  не сработает.</p> <p>Оператор <span class=""b"">is</span> также можно применять и без преобразования, просто проверяя на соответствие типу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_811856""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Employee)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Представляет тип Employee""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">else</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""НЕ является объектом типа Employee""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.5.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Виртуальные методы и свойства</h2>   <p>При наследовании нередко возникает необходимость изменить в классе-наследнике функционал метода, который был унаследован  от базового класса. В этом случае класс-наследник может переопределять методы и свойства базового класса.</p> <p>Те методы и свойства, которые мы хотим сделать доступными для переопределения, в базовом классе помечается модификатором <span class=""b"">virtual</span>.  Такие методы и свойства называют виртуальными.</p> <p>А чтобы переопределить метод в классе-наследнике, этот метод определяется с модификатором <span class=""b"">override</span>.  Переопределенный метод в классе-наследнике должен иметь тот же набор параметров, что и виртуальный метод в базовом классе.</p> <p>Например, рассмотрим следующие классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_923496""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь класс Person представляет человека. Класс Employee наследуется от Person и представляет сотруднника предприятия. Этот класс кроме  унаследованного свойства Name имеет еще одно свойство - Company.</p> <p>Чтобы сделать метод Print доступным для переопределения, этот метод определен с модификатором <span class=""b"">virtual</span>. Поэтому мы можем переопределить этот метод, но можем и не переопределять.  Допустим, нас устраивает реализация метода из базового класса. В этом случае объекты Employee будут использовать реализацию метода Print из класса Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_547747""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">bob.Print(); </code><code class=""c# comments"">// вызов метода Print из класса Person</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print(); </code><code class=""c# comments"">// вызов метода Print из класса Person</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Bob Tom </pre> </div> <p>Но также можем переопределить виртуальный метод. Для этого в классе-наследнике определяется метод с модификатором <span class=""b"">override</span>,  который имеет то же самое имя и набор параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_846912""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{Name} работает в {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Возьмем те же самые объекты:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_935958""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">bob.Print(); </code><code class=""c# comments"">// вызов метода Print из класса Person</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print(); </code><code class=""c# comments"">// вызов метода Print из класса Employee</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Bob Tom работает в Microsoft </pre> </div> <p>Виртуальные методы базового класса определяют интерфейс всей иерархии, то есть в любом производном классе, который не является прямым наследником от  базового класса, можно переопределить виртуальные методы. Например, мы можем определить класс Manager, который будет производным от Employee, и в нем также переопределить  метод Print.</p> <p>При переопределении виртуальных методов следует учитывать ряд ограничений:</p> <ul> <li><p>Виртуальный и переопределенный методы должны иметь один и тот же модификатор доступа. То есть если виртуальный метод определен с помощью модификатора  public, то и переопредленный метод также должен иметь модификатор public.</p></li> <li><p>Нельзя переопределить или объявить виртуальным статический метод.</p></li> </ul> <h3>Ключевое слово base</h3> <p>Кроме конструкторов, мы можем обратиться с помощью ключевого слова <span class=""b"">base</span> к другим членам базового класса.  В нашем случае вызов <code>base.Print();</code> будет обращением к методу Print() в классе Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_389165""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces""> </code> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">:</code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces""> </code> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">base</code><code class=""c# plain"">.Print();</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""работает в {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Переопределение свойств</h3> <p>Также как и методы, можно переопределять свойства:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_877492""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 1;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; age;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code><code class=""c# plain"">{ </code><code class=""c# keyword"">if</code><code class=""c# plain"">(value &gt; 0 &amp;&amp; value &lt; 110) age = value; }</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine(Name);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; </code><code class=""c# keyword"">base</code><code class=""c# plain"">.Age;</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &gt; 17 &amp;&amp; value &lt; 110) </code><code class=""c# keyword"">base</code><code class=""c# plain"">.Age = value; }</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">base</code><code class=""c# plain"">.Age = 18; </code><code class=""c# comments"">// возраст для работников по умолчанию</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number30 index29 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в классе Person определено виртуальное свойство Age, которое устанавливает значение, если оно больше 0 и меньше 110.  В классе Employee это свойство переопределено - возраст работника должен быть не меньше 18.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_124947""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(bob.Age); </code><code class=""c# comments"">// 1</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(tom.Age); </code><code class=""c# comments"">// 18</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">tom.Age = 22;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(tom.Age); </code><code class=""c# comments"">// 22</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">tom.Age = 12;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(tom.Age); </code><code class=""c# comments"">// 22</code></div></div></td></tr></tbody></table></div></div> <h3>Запрет переопределения методов</h3> <p>Также можно запретить переопределение методов и свойств. В этом случае их надо объявлять с модификатором <span class=""b"">sealed</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_677576""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces""> </code> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">sealed</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{Name} работает в {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При создании методов с модификатором sealed надо учитывать, что sealed применяется в паре с override, то есть только в переопределяемых методах.</p> <p>И в этом случае мы не сможем переопределить метод Print в классе, унаследованном от Employee.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.11.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Скрытие методов и свойств</h2>   <p>В прошлой теме было рассмотрено определение и переопределение виртуальных методов. Другим способом изменить функциональность метода, унаследованного  от базового класса, является <span class=""b"">скрытие</span> (shadowing / hiding).</p> <p>Фактически скрытие метода/свойства представляет определение в классе-наследнике метода или свойства, которые соответствует по имени и набору  параметров методу или свойству базового класса. Для скрытия членов класса применяется ключевое слово <span class=""b"">new</span>.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_131043""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Name: {Name}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Name: {Name}   Company: {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определен класс Person, представляющий человека, и класс Employee, представляющий работника предприятия. Employee наследует от Person  все свойства и методы. Но в классе Employee кроме унаследованных свойств есть также и собственное свойство Company, которое хранит название компании.  И мы хотели бы в методе Print выводить информацию о компании вместе с именем на консоль. Для этого определяется метод Print с ключевым словом <span class=""b"">new</span>,  который скрывает реализацию данного метода из базового класса.</p> <p>В каких ситуациях можно использовать скрытие? Например, в примере выше метод Print в базовом классе не является виртуальным, мы не можем его переопределить,  но, допустим, нас не устраивает его реализация для производного класса, поэтому мы можем воспользоваться сокрытием, чтобы определить нужный нам функционал.</p> <p>Используем эти классы в программе в методе Main:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_599432""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">bob.Print();    </code><code class=""c# comments"">// Name: Bob</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom.Print();    </code><code class=""c# comments"">// Name: Tom  Company: Microsoft</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">Name: Bob Name: Tom  Company: Microsoft </pre> </div> <p>При этом если мы хотим обратиться именно к реализации свойства или метода в базовом классе, то опять же мы можем использовать  ключевое слово <span class=""b"">base</span> и через него обращаться к функциональности базового класса.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_835131""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">base</code><code class=""c# plain"">.Print();   </code><code class=""c# comments"">// вызываем метод Print из базового класса Person</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Company: {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Скрытие свойств</h3> <p>Подобным обазом мы можем организовать скрытие свойств:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_694444""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(bob.Name);    </code><code class=""c# comments"">// Bob</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(tom.Name);    </code><code class=""c# comments"">// Mr./Ms. Tom</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// скрываем свойство Name базового класса</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; $</code><code class=""c# string"">""Mr./Ms. {base.Name}""</code><code class=""c# plain"">;</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; </code><code class=""c# keyword"">base</code><code class=""c# plain"">.Name = value;</code></div><div class=""line number22 index21 alt1""> </div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number30 index29 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в классе Employee переопределено свойство Name. В блоке <code>get</code> нем мы берем значение свойства из базовового класса Person и присоединяем к нему ""Mr./Ms."". В блоке <code>set</code> передаем полученное значение в реализацию свойства Name базового класса Person</p> <h3>Скрытие переменных и констант</h3> <p>В отличие от переопределения C# позволяет применять скрытие к переменным (как к статическим, так и нестатическим) и константам, также используя ключевое слово <span class=""b"">new</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_66192""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(Person.minAge);     </code><code class=""c# comments"">// 1</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(Person.typeName);   </code><code class=""c# comments"">// Person</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(Employee.minAge);     </code><code class=""c# comments"">// 18</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(Employee.typeName);   </code><code class=""c# comments"">// Employee</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">minAge = 1;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">typeName = </code><code class=""c# string"">""Person""</code><code class=""c# plain"">;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// скрываем поля и константы базового класса</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">minAge = 18;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">const</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">typeName = </code><code class=""c# string"">""Employee""</code><code class=""c# plain"">;</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Различие переопределения и скрытия методов</h2>   <p>Ранее было рассмотрена два способа изменения функциональности методов, унаследованных от базового класса - скрытие и переопределение. В чем разница между двумя этими способами?</p> <h3>Переопределение</h3> <p>Возьмем пример с переопределением методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_496859""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""> </div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{Name} работает в {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Используем классы в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_198935""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();        </code><code class=""c# comments"">// Tom работает в Microsoft</code></div></div></td></tr></tbody></table></div></div> <p>При вызове <code>tom.Print()</code> выполняется реализация метода Print из класса Employee, несмотря на то, что переменная <code>tom</code> - переменная типа Person.</p> <p>Для работы с виртуальными методами компилятор формирует таблицу виртуальных методов (<span class=""b"">Virtual Method Table</span> или <span class=""b"">VMT</span>).  В нее записывается адреса виртуальных методов. Для каждого класса создается своя таблица.</p> <p>Когда создается объект класса, то компилятор передает в конструктор объекта специальный код, который связывает объект и таблицу VMT.</p> <p>А при вызове виртуального метода из объекта берется адрес его таблицы VMT. Затем из VMT извлекается адрес метода и ему передается управление. То есть процесс выбора реализации метода производится  во время выполнения программы. Собственно так и выполняется виртуальный метод. Следует учитывать, что так как среде выполнения вначале необходимо получить из таблицы VMT адрес нужного метода, то это немного замедляет выполнение программы.</p> <h3>Скрытие</h3> <p>Теперь возьмем те же классы Person и Employee, но вместо переопределения используем сокрытие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_68286""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(Name);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee : Person</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">company)</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{Name} работает в {Company}""</code><code class=""c# plain"">);</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И посмотрим, что будет в следующем случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_43953""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Print();        </code><code class=""c# comments"">// Tom</code></div></div></td></tr></tbody></table></div></div> <p>Переменная tom представляет тип Person, но хранит ссылку на объект Employee. Однако при вызове метода Print будет выполняться та версия метода,  которая определена именно в классе Person, а не в классе Employee. Почему? Класс Employee никак не переопределяет метод Print, унаследованный от базового класса, а фактически определяет новый метод.  Поэтому при вызове <code>tom.Print()</code> вызывается метод Print из класса Person.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Абстрактные классы и члены классов</h2>   <h3>Абстрактные классы</h3> <p>Кроме обычных классов в C# есть <span class=""b"">абстрактные классы</span>. Зачем они нужны? Классы обычно представляют некий план  определенного рода объектов или сущностей. Например, мы можем определить класс Car для преставления машин или класс Person для  представления людей, вложив в эти классы соответствующие свойства, поля, методы, которые будут описывать данные объекты.  Однако некоторые сущности, которые мы хотим выразить с помощью языка программирования, могут не иметь конкретного воплощения.  Например, в реальности не существует геометрической фигуры как таковой. Есть круг, прямоугольник, квадрат, но просто фигуры нет.  Однако же и круг, и прямоугольник имеют что-то общее и являются фигурами. И для описания подобных сущностей, которые не имеют конкретного  воплощения, предназначены абстрактные классы.</p> <p>Абстрактный класс похож на обычный класс. Он также может иметь переменные, методы, конструкторы, свойства.  Единственное, что при определении абстрактных классов используется ключевое слово <span class=""b"">abstract</span>. Например,  определим абстрактный класс, который представляет некое транспортное средство:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_999701""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Transport</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Транспортно средство движется""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Транспортное средство представляет некоторую абстракцию, которая не имеет конкретного воплощения. То есть есть легковые и грузовые машины, самолеты, морские судна, кто-то на космическом корабле любит покататься, но как такового  транспортного средства нет. Тем не менее все транспортные средства имеют нечто общее - они могут перемещаться. И для этого в классе определен метод Move, который эмулирует  перемещение.</p> <p>Но главное отличие абстрактных классов от обычных состоит в том, что мы <span class=""b"">НЕ можем</span> использовать конструктор абстрактного класса для создания экземпляра класса.  Например, следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_145930""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Transport tesla = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Transport();</code></div></div></td></tr></tbody></table></div></div> <p>Тем не менее абстрактные классы полезны для описания некоторого общего функционала, который могут наследовать и использовать производные классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_406788""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Transport car = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Car();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Transport ship = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Ship();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Transport aircraft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Aircraft();</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">car.Move();</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">ship.Move();</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">aircraft.Move();</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Transport</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Транспортное средство движется""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# comments"">// класс корабля</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Ship : Transport { }</code></div><div class=""line number17 index16 alt2""><code class=""c# comments"">// класс самолета</code></div><div class=""line number18 index17 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Aircraft : Transport { }</code></div><div class=""line number19 index18 alt2""><code class=""c# comments"">// класс машины</code></div><div class=""line number20 index19 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Car : Transport { }</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае от класса Transport наследуются три класса, которые представляют различные типы транспортных средств. Тем не менее они имеют общую черту - они могут перемещаться с помощью метода <code>Move()</code>.</p> <p>Выше писалось, что мы не можем использовать конструктор абстрактного класса для создания экземпляра этого класса. Тем не менее такой класс также может определять конструкторы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_556833""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Transport car = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Car(</code><code class=""c# string"">""машина""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Transport ship = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Ship(</code><code class=""c# string"">""корабль""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Transport aircraft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Aircraft(</code><code class=""c# string"">""самолет""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">car.Move();         </code><code class=""c# comments"">// машина движется</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">ship.Move();        </code><code class=""c# comments"">// корабль движется</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">aircraft.Move();    </code><code class=""c# comments"">// самолет движется</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Transport</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// конструктор абстрактного класса Transport</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Transport(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt;Console.WriteLine($</code><code class=""c# string"">""{Name} движется""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# comments"">// класс корабля</code></div><div class=""line number19 index18 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Ship : Transport </code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// вызываем конструктор базового класса</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Ship(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name) { }</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# comments"">// класс самолета</code></div><div class=""line number25 index24 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Aircraft : Transport</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Aircraft(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name) { }</code></div><div class=""line number28 index27 alt1""><code class=""c# plain"">}</code></div><div class=""line number29 index28 alt2""><code class=""c# comments"">// класс машины</code></div><div class=""line number30 index29 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Car : Transport</code></div><div class=""line number31 index30 alt2""><code class=""c# plain"">{</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Car(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(name) { }</code></div><div class=""line number33 index32 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в абстрактном классе Transport определен конструктор - с помощью параметра он устанавливает значение свойства Name, которое хранит название  транспортного средства. И в этом случае производные классы должны в своих конструкторах вызвать этот конструктор.</p> <h3>Абстрактные члены классов</h3> <p>Кроме обычных свойств и методов абстрактный класс может иметь абстрактные члены классов, которые определяются с помощью ключевого слова <span class=""b"">abstract</span> и  не имеют никакого функционала. В частности, абстрактными могут быть:</p> <ul> <li><p>Методы</p></li> <li><p>Свойства</p></li> <li><p>Индексаторы</p></li> <li><p>События</p></li> </ul> <p>Абстрактные члены классов не должны иметь модификатор private. При этом производный класс обязан переопределить и реализовать все абстрактные методы и свойства, которые имеются в базовом абстрактном  классе. При переопределении в производном классе такой метод или свойство также объявляются с модификатором <span class=""b"">override</span>  (как и при обычном переопределении виртуальных методов и свойств).  Также следует учесть, что если класс имеет хотя бы один абстрактный метод (или абстрактные свойство, индексатор, событие), то этот класс должен быть определен как  <span class=""b"">абстрактный</span>.</p> <p>Абстрактные члены также, как и виртуальные, являются частью полиморфного интерфейса. Но если в случае с виртуальными методами мы говорим, что класс-наследник  наследует реализацию, то в случае с абстрактными методами наследуется интерфейс, представленный этими абстрактными методами.</p> <h4>Абстрактные методы</h4> <p>Например, выше в примере с транспортными средствами метод Move описывает передвижение транспортного средства. Однако различные типы транспорта  перемещаются по разному - ездят по земле, летят по воздуху, плывут на воде и т.д. В этом случае мы можем сделать метод Move абстрактным, а его реализацию переложить на производные классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_245333""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Transport</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">abstract</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// класс корабля</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Ship : Transport </code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// мы должны реализовать все абстрактные методы и свойства базового класса</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Корабль плывет""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# comments"">// класс самолета</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Aircraft : Transport</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Самолет летит""</code><code class=""c# plain"">);</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# comments"">// класс машины</code></div><div class=""line number23 index22 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Car : Transport</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Машина едет""</code><code class=""c# plain"">);</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number29 index28 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Применение классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_579275""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Transport car = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Car();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Transport ship = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Ship();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Transport aircraft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Aircraft();</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">car.Move();         </code><code class=""c# comments"">// машина едет</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">ship.Move();        </code><code class=""c# comments"">// корабль плывет</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">aircraft.Move();    </code><code class=""c# comments"">// самолет летит</code></div></div></td></tr></tbody></table></div></div> <h4>Абстрактные свойства</h4> <p>Следует отметить использование абстрактных свойств. Их определение похоже на определение автосвойств. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_200071""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Transport</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// абстрактное свойство для хранения скорости</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">abstract</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Speed { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// класс корабля</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Ship: Transport</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">speed;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Speed </code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ </code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; speed; </code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; speed = value; </code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Aircraft : Transport</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Speed { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В классе Transport определено абстрактное свойство Speed, которое должно хранить скорость транспортного средства. Оно похоже на автосвойство, но  это не автосвойство. Так как данное свойство не должно иметь реализацию, то оно имеет только пустые блоки get и set.  В производных классах мы можем переопределить это свойство, сделав его полноценным свойством (как в классе Ship),  либо же сделав его автоматическим (как в классе Aircraft).</p> <h4>Отказ от реализации абстрактных членов</h4> <p>Производный класс обязан реализовать все абстрактные члены базового класса. Однако мы можем отказаться от реализации, но в этом случае  производный класс также должен быть определен как абстрактный:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_340941""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Transport tesla = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Auto();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tesla.Move();           </code><code class=""c# comments"">// легковая машина едет</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Transport</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">abstract</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// класс машины</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Car : Transport{}</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Auto: Car</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""легковая машина едет""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Car не реализует абстрактный метод Move базового класса Transport и поэтому также определен как абстрактный. Однако любые  неабстрактные классы, производные от Car, все равно должны реализовать все унаследованные абстрактные методы и свойства.</p> <h3>Пример абстрактного класса</h3> <p>Xрестоматийным примером является система геометрических фигур. В реальности не существует геометрической фигуры как таковой. Есть круг, прямоугольник,  квадрат, но просто фигуры нет. Однако же и круг, и прямоугольник имеют что-то общее и являются фигурами:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_123036""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// абстрактный класс фигуры</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Shape</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// абстрактный метод для получения периметра</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">abstract</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetPerimeter();</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// абстрактный метод для получения площади</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">abstract</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetArea();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// производный класс прямоугольника</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Rectangle : Shape</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">float</code> <code class=""c# plain"">Width { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">float</code> <code class=""c# plain"">Height { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// переопределение получения периметра</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetPerimeter() =&gt; Width * 2 + Height * 2;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// переопрелеление получения площади</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetArea() =&gt; Width * Height;</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# comments"">// производный класс окружности</code></div><div class=""line number21 index20 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Circle : Shape</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">{</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">Radius { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number24 index23 alt1""> </div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// переопределение получения периметра</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetPerimeter() =&gt; Radius * 2 * 3.14;</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// переопрелеление получения площади</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetArea() =&gt; Radius * Radius * 3.14;</code></div><div class=""line number29 index28 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Применение классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_559721""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var rectanle = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Rectangle { Width = 20, Height = 20 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var circle = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Circle { Radius = 200 };</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">PrintShape(rectanle); </code><code class=""c# comments"">// Perimeter: 80   Area: 400</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">PrintShape(circle); </code><code class=""c# comments"">// Perimeter: 1256  Area: 125600</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintShape(Shape shape)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Perimeter: {shape.GetPerimeter()}  Area: {shape.GetArea()}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}   </code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.12.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Класс System.Object и его методы</h2>   <p>Все классы в .NET, даже те, которые мы сами создаем, а также базовые типы, такие как  <span class=""b"">System.Int32</span>, являются неявно производными от класса Object. Даже если мы не указываем класс Object в качестве базового,  по умолчанию неявно класс Object все равно стоит на вершине иерархии наследования. Поэтому все типы и классы могут реализовать те методы,  которые определены в классе System.Object. Рассмотрим эти методы.</p> <h3>ToString</h3> <p>Метод <code>ToString</code> служит для получения строкового представления данного объекта. Для базовых типов просто будет выводиться их строковое  значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_659176""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(i.ToString()); </code><code class=""c# comments"">// выведет число 5</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">d = 3.5;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(d.ToString()); </code><code class=""c# comments"">// выведет число 3,5</code></div></div></td></tr></tbody></table></div></div> <p>Для классов же этот метод выводит полное название класса с указанием пространства имен, в котором определен этот класс. И мы можем  переопределить данный метод. Посмотрим на примере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_529576""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.ToString()); </code><code class=""c# comments"">// выведет название класса Person</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Clock clock = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Clock { Hours = 15, Minutes = 34, Seconds = 53 };</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(clock.ToString()); </code><code class=""c# comments"">// выведет 15:34:53</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Clock</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Hours { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Minutes { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Seconds { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">ToString()</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">$</code><code class=""c# string"">""{Hours}:{Minutes}:{Seconds}""</code><code class=""c# plain"">;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для переопределения метода <code>ToString()</code> в классе Clock, который представляет часы, используется ключевое слово  <span class=""b"">override</span> (как и при обычном переопределении виртуальных или абстрактных методов). В данном случае  метод <code>ToString()</code> выводит в строке значения свойств Hours, Minutes, Seconds.</p> <p>Класс Person не переопределяет метод ToString, поэтому для этого класса срабатывает стандартная реализация этого метода, которая выводит  просто название класса.</p> <p>Кстати в данном случае мы могли задействовать обе реализации:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_190279""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tom.ToString()); </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Person undefined = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(undefined.ToString()); </code><code class=""c# comments"">// Person</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">string</code><code class=""c# plain"">? ToString()</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code><code class=""c# plain"">.IsNullOrEmpty(Name))</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">base</code><code class=""c# plain"">.ToString();</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Name;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>То есть если имя - свойство Name не имеет значения, оно представляет пустую строку, то возвращается базовая реализация - название класса.  Стоит отметить, что базовая реализация возвращает не просто строку, а объект <span class=""b"">string?</span> - то есть это может  быть строка string, либо значение <span class=""b"">null</span>, которое указывает на отсутствие значения. И в реальности в качестве возвращаемого типа для метода  мы можем использовать как <span class=""b"">string</span>, так и <span class=""b"">string?</span></p> <p>Если же имя у объекта Person установлено, то возвращается значение свойства Name. Для проверки строки на наличие значения применяется метод <code>String.IsNullOrEmpty()</code>.</p> <p>Стоит отметить, что различные технологии на платформе .NET активно используют метод ToString для разных целей. В частности, тот же метод  <code>Console.WriteLine()</code> по умолчанию выводит именно строковое представление объекта. Поэтому, если нам надо вывести строковое представление объекта на консоль, то при передаче  объекта в метод Console.WriteLine необязательно использовать метод ToString() - он вызывается неявно:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_662198""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person);  </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Clock clock = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Clock { Hours = 15, Minutes = 34, Seconds = 53 };</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(clock); </code><code class=""c# comments"">// выведет 15:34:53</code></div></div></td></tr></tbody></table></div></div> <h3>Метод GetHashCode</h3> <p>Метод <span class=""b"">GetHashCode</span> позволяет возвратить некоторое числовое значение, которое будет соответствовать данному объекту или его хэш-код.  По данному числу, например, можно сравнивать объекты. Можно определять самые разные алгоритмы генерации подобного числа или взять реализацию базового типа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_339744""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">GetHashCode()</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Name.GetHashCode();</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае метод GetHashCode возвращает хеш-код для значения свойства Name. То есть два объекта Person, которые имеют одно и то же имя, будут возвращать один и тот  же хеш-код. Однако в реальности алгоритм может быть самым различным.</p> <h3>Получение типа объекта и метод GetType</h3> <p>Метод <span class=""b"">GetType</span> позволяет получить тип данного объекта:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_905916""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.GetType());    </code><code class=""c# comments"">// Person</code></div></div></td></tr></tbody></table></div></div> <p>Этот метод возвращает объект <span class=""b"">Type</span>, то есть тип объекта.</p> <p>С помощью ключевого слова <span class=""b"">typeof</span> мы получаем тип класса и сравниваем его с типом объекта. И если этот объект представляет тип Person,  то выполняем определенные действия.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_802086""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">object</code> <code class=""c# plain"">person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(person.GetType() == </code><code class=""c# keyword"">typeof</code><code class=""c# plain"">(Person))</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Это реально класс Person""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Причем поскольку класс Object является базовым типом для всех классов, то мы можем переменной типа object присвоить объект любого типа. Однако для этой переменной  метод GetType все равно вернет тот тип, на объект которого ссылается переменная. То есть в данном случае объект типа Person.</p> <p>Стоит отметить, что проверку типа в примере выше можно сократить с помощью оператора <span class=""b"">is</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_441843""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">object</code> <code class=""c# plain"">person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person)</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Это реально класс Person""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В отличие от методов ToString, Equals, GetHashCode метод <span class=""b"">GetType()</span> не переопределяется.</p> <h3>Метод Equals</h3> <p>Метод Equals позволяет сравнить два объекта на равенство. В качестве параметра он принимает объект для сравнения в виде типа <code>object</code> и возврашает  <code>true</code>, если оба объекта равны:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_121350""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">Equals(</code><code class=""c# keyword"">object</code><code class=""c# plain"">? obj) {......}</code></div></div></td></tr></tbody></table></div></div> <p>Например, реализуем данный метод в классе Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_69780""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">Equals(</code><code class=""c# keyword"">object</code><code class=""c# plain"">? obj)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// если параметр метода представляет тип Person</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// то возвращаем true, если имена совпадают</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(obj </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person person) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Name == person.Name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">false</code><code class=""c# plain"">;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// вместе с методом Equals следует реализовать метод GetHashCode</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">GetHashCode() =&gt; Name.GetHashCode();</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод Equals принимает в качестве параметра объект любого типа, который мы затем приводим к текущему классу - классу Person.</p> <p>Если переданный объект представляет тип Person, то возвращаем результат сравнения имен двух объектов Person. Если же объект представляет другой тип, то возвращается false.</p> <p>В данном случае для примера применяется довольно простой алгоритм сравнения, однако при необходимости  реализацию метода можно сделать более сложной, например, сравнивать по нескольким свойствам при их наличии.</p> <p>Стоит отметить, что вместе с методом Equals следует реализовать метод GetHashCode.</p> <p>Применение метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_501336""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var person2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var person3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">person1EqualsPerson2 = person1.Equals(person2);   </code><code class=""c# comments"">// false</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">person1EqualsPerson3 = person1.Equals(person3);   </code><code class=""c# comments"">// true</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(person1EqualsPerson2);    </code><code class=""c# comments"">// false</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(person1EqualsPerson3);    </code><code class=""c# comments"">// true</code></div></div></td></tr></tbody></table></div></div> <p>И если следует сравнивать два сложных объекта, как в данном случае, то лучше использовать метод Equals, а не стандартную операцию ==.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Обобщения</h2>   <p>Кроме обычных типов фреймворк .NET также поддерживает обобщенные типы (generics), а также создание обобщенных методов.  Чтобы разобраться в особенности данного явления, сначала посмотрим на проблему, которая могла возникнуть до появления обобщенных  типов. Посмотрим на примере. Допустим, мы определяем класс для хранения данных пользователя:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_821568""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">id, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id; </code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Person определяет два свойства: Id - уникальный идентификатор пользователя и Name - имя пользователя.</p> <p>Здесь идентификатор пользователя задан как числовое значение, то есть это будут значения 1, 2, 3, 4 и так далее.</p> <p>Однако также нередко для идентификатора используются и строковые значения. И у числовых, и у строковых значений есть свои плюсы и минусы.  И на момент написания класса мы можем точно не знать, что лучше выбрать для хранения идентификатора - строки или числа. Либо, возможно, этот класс будет использоваться другими разработчиками,  которые могут иметь свое мнение по данной проблеме, например, они могут для представления идентификатора создать специальный класс.</p> <p>И на первый взгляд, чтобы выйти из подобной ситуации, мы можем определить свойство Id как свойство типа object. Так как тип object является  универсальным типом, от которого наследуется все типы, соответственно в свойствах подобного типа мы можем сохранить и строки, и числа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_296721""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">object</code> <code class=""c# plain"">Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">object</code> <code class=""c# plain"">id, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id; </code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Затем этот класс можно было использовать для создания пользователей в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_234706""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""abc123""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">tomId = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)tom.Id;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">bobId = (</code><code class=""c# keyword"">string</code><code class=""c# plain"">) bob.Id;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(tomId);   </code><code class=""c# comments"">// 546</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(bobId);   </code><code class=""c# comments"">// abc123</code></div></div></td></tr></tbody></table></div></div> <p>Все вроде замечательно работает, но такое решение является не очень оптимальным. Дело в том, что в данном случае мы сталкиваемся с такими  явлениями как <span class=""b"">упаковка (boxing)</span> и <span class=""b"">распаковка (unboxing)</span>.</p> <p>Так, при передаче в конструктор значения типа int, происходит упаковка этого значения в тип Object:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_17732""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// упаковка в значения int в тип Object</code></div></div></td></tr></tbody></table></div></div> <p>Чтобы обратно получить данные в переменную типов int, необходимо выполнить распаковку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_726431""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">tomId = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)tom.Id;        </code><code class=""c# comments"">// Распаковка в тип int</code></div></div></td></tr></tbody></table></div></div> <p>Упаковка (boxing) предполагает преобразование объекта значимого типа (например, типа int) к типу object. При упаковке общеязыковая среда  CLR обертывает значение в объект типа <span class=""b"">System.Object</span> и сохраняет его в управляемой куче (хипе).  Распаковка (unboxing), наоборот, предполагает преобразование объекта типа object к значимому типу. Упаковка и  распаковка ведут к снижению производительности, так как системе надо осуществить необходимые преобразования.</p> <p>Кроме того, существует другая проблема - проблема безопасности типов. Так, мы получим ошибку во время выполнения программы, если  напишем следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_775557""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">tomId = (</code><code class=""c# keyword"">string</code><code class=""c# plain"">)tom.Id;  </code><code class=""c# comments"">// !Ошибка  - Исключение InvalidCastException</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tomId);   </code><code class=""c# comments"">// 546</code></div></div></td></tr></tbody></table></div></div> <p>Мы можем не знать, какой именно объект представляет Id, и при попытке получить число в данном случае мы столкнемся с исключением InvalidCastException.  Причем с исключением мы столкнемся на этапе выполнения программы.</p> <p>Для решения этих проблем в язык C# была добавлена поддержка <span class=""b"">обобщенных типов</span> (также часто называют универсальными типами). Обобщенные типы позволяют указать конкретный тип, который будет использоваться.  Поэтому определим класс Person как обощенный:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_205935""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(T id, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id; </code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Угловые скобки в описании <code>class Person&lt;T&gt;</code> указывают, что класс является обобщенным,  а тип T, заключенный в угловые  скобки, будет использоваться этим классом. Необязательно использовать именно букву T, это может быть и любая другая буква или набор символов.  Причем сейчас на этапе написания кода нам неизвестно, что это будет за тип, это может быть любой тип. Поэтому параметр <span class=""b"">T</span> в угловых скобках  еще называется <span class=""b"">универсальным параметром</span>, так как вместо него можно подставить любой тип.</p> <p>Например, вместо параметра T можно использовать объект int, то есть число, представляющее номер пользователя. Это также может быть объект string, либо или любой другой класс или  структура:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_203722""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// упаковка не нужна</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""abc123""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">tomId = tom.Id;      </code><code class=""c# comments"">// распаковка не нужна</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">bobId = bob.Id;  </code><code class=""c# comments"">// преобразование типов не нужно</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(tomId);   </code><code class=""c# comments"">// 546</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(bobId);   </code><code class=""c# comments"">// abc123</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку класс Person является обобщенным, то при определении переменной после названия типа в угловых скобках необходимо указать тот тип,  который будет использоваться вместо универсального параметра T. В данном случае объекты Person типизируются типами <code>int</code> и <code>string</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_981429""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// упаковка не нужна</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""abc123""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Поэтому у первого объекта tom свойство Id будет иметь тип int, а у объекта bob - тип string. И в случае с типом int упаковки происходить не будет.</p> <p>При попытке передать для параметра id значение другого типа мы получим ошибку компиляции:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_63129""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""546""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// ошибка компиляции</code></div></div></td></tr></tbody></table></div></div> <p>А при получении значения из Id нам больше не потребуется операция приведения типов и распаковка тоже применяться не будет:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_381272""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">tomId = tom.Id;      </code><code class=""c# comments"">// распаковка не нужна</code></div></div></td></tr></tbody></table></div></div> <p>Тем самым мы избежим проблем с типобезопасностью. Таким образом, используя обобщенный вариант класса, мы снижаем время на выполнение и  количество потенциальных ошибок.</p> <p>При этом универсальный параметр также может представлять обобщенный тип:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_395127""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// класс компании</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company&lt;P&gt;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">P CEO { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }  </code><code class=""c# comments"">// президент компании</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(P ceo)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">CEO = ceo;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person&lt;T&gt;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(T id, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id; </code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь класс компании определяет свойство CEO, которое хранит президента компании. И мы можем передать для этого свойства значение типа Person, типизированного каким-нибудь типом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_114228""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Company&lt;Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;&gt; microsoft =  </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company&lt;Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;&gt;(tom);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(microsoft.CEO.Id);  </code><code class=""c# comments"">// 546</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(microsoft.CEO.Name);  </code><code class=""c# comments"">// Tom</code></div></div></td></tr></tbody></table></div></div> <h3>Статические поля обобщенных классов</h3> <p>При типизации обобщенного класса определенным типом будет создаваться свой набор статических членов. Например, в классе Person определено следующее статическое поле:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_781284""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">T? code;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(T id, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id; </code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь типизируем класс двумя типами int и string:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_510837""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(546, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;.code = 1234;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""abc""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;.code = </code><code class=""c# string"">""meta""</code><code class=""c# plain"">;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;.code);       </code><code class=""c# comments"">// 1234</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;.code);   </code><code class=""c# comments"">// meta</code></div></div></td></tr></tbody></table></div></div> <p>В итоге для Person&lt;string&gt; и для Person&lt;int&gt; будет создана своя переменная code.</p> <h3>Использование нескольких универсальных параметров</h3> <p>Обобщения могут использовать несколько универсальных параметров одновременно, которые могут представлять одинаковые или различные типы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_357832""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person&lt;T, K&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">K Password { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(T id, K password, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id; </code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Password = password;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь класс Person использует два универсальных параметра: один параметр для идентификатора, другой параметр - для свойства-пароля. Применим данный класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_5063""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(546, </code><code class=""c# string"">""qwerty""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tom.Id);  </code><code class=""c# comments"">// 546</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tom.Password);</code><code class=""c# comments"">// qwerty</code></div></div></td></tr></tbody></table></div></div> <p>Здесь объект Person типизируется типами int и string. То есть в качестве универсального параметра T используется  тип <code>int</code>, а для параметра K - тип <code>string</code>.</p> <h3>Обобщенные методы</h3> <p>Кроме обобщенных классов можно также создавать обобщенные методы, которые точно также будут использовать универсальные параметры. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_130104""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 7;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 25;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Swap&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">y); </code><code class=""c# comments"">// или так Swap(ref x, ref y);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""x={x}    y={y}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// x=25   y=7</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s1 = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s2 = </code><code class=""c# string"">""bye""</code><code class=""c# plain"">;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Swap&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">s1, </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">s2); </code><code class=""c# comments"">// или так Swap(ref s1, ref s2);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""s1={s1}    s2={s2}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// s1=bye   s2=hello</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Swap&lt;T&gt;(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">T x, </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">T y)</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">T temp = x;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">x = y;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">y = temp;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определен обощенный метод Swap, который принимает параметры по ссылке и меняет их значения. При этом в данном случае не важно, какой тип представляют эти параметры.</p> <p>При вызове метода Swap типизируем его определенным типом и передаем ему соответствующие этому типу значения.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.6.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> <li><a href=""../practice/2.1.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Ограничения обобщений</h2>   <p>С помощью универсальных параметров мы можем типизировать обобщенные классы любым типом. Однако иногда возникает необходимость конкретизировать тип.  Например, у нас есть следующий класс Message, который представляет некоторое сообщение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_334755""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// текст сообщения</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Text = text;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И, допустим, мы хотим определить метод для отправки сообщений в виде объектов Message. На первый взгляд мы можем определить и использовать следующий метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_773358""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">));</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(Message message)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод SendMessage в качестве параметра message принимает объект Message и эмулирует его отправку. Вроде все нормально и что-то лучше вряд ли можно придумать.  Но у класса Message могут быть классы-наследники. Например, класс EmailMessage для email-сообщений, SmsMessage - для sms-сообщений и так далее</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_432081""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">EmailMessage : Message</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">SmsMessage : Message</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">SmsMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Что если мы хотим также отправлять сообщения, которые представляют эти классы? Проблемы вроде нет, поскольку метод SendMessage принимает объект Message и соответственно также и объекты производных классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_836880""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">));</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(Message message)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Но здесь мы сталкиваемся с преобразованием типов: от EmailMessage к Message. Кроме того, опять же возможна проблема типобезопасности, если мы  захотим преобразовать объект message в объект производных классов. И в этом случае чтобы избежать преобразований, мы можем применить обобщения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_600616""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage&lt;T&gt;(T message)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// ! Ошибка - свойство Text</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Обобщения позволяют избежать преобразований, но теперь мы сталкиваемся с другой проблемой - универсальный параметр T подразумевает любой тип. Но не любой тип  имеет свойство Text. Соответственно свойство Text для объекта типа T не определено и мы не можем это свойство использоваться. Более того для объекта T по умолчанию  нам достуны только методы типа object.</p> <p>Таким образом, возникает проблема: надо избежать преобразований типов и соответственно использовать обобщения, а с другой стороны, необходимо обращаться внутри метода к  функционалу класса Message. И ограничения обобщений позволяют решить эту проблему.</p> <h3>Ограничения методов</h3> <p>Ограничения методов указываются после списка параметров после оператора <span class=""b"">where</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_234199""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">имя_метода&lt;T&gt;(параметры) where T: тип_ограничения</code></div></div></td></tr></tbody></table></div></div> <p>После оператора <span class=""b"">where</span> указывается универсальный параметр, для которого применяется ограничение. И через двоеточие указывается тип ограничения - обычно в  качестве ограничения выступает конкретный тип.</p> <p>Например, применим ограничения к методу SendMessage, который отправляет объекты Message</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_374720""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">));</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Bye World""</code><code class=""c# plain"">));</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage&lt;T&gt;(T message) where T: Message</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// текст сообщения</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Text = text;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">EmailMessage : Message</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Выражение <code>where T: Message</code> в определении метода SendMessage говорит, что через универсальный параметр T будут передаваться объекты класса Message и  производных классов. Благодаря этому компилятор будет знать, что T будет иметь функционал класса Message, и соответственно мы сможем обратиться к методам и свойствам класса Message внутри метода без проблем.</p> <p>При вызове метода нам необязательно указывать тип в угловых скобках - компилятор на основании переданного значения сам определит каким типом типизиуется метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_49732""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Bye World""</code><code class=""c# plain"">));</code></div></div></td></tr></tbody></table></div></div> <p>Однако это можно сделать и явно</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_882169""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">SendMessage&lt;EmailMessage&gt;(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Bye World""</code><code class=""c# plain"">));</code></div></div></td></tr></tbody></table></div></div> <h3>Ограничения обобщений в типах</h3> <p>Подобным образом можно определять и ограничения обобщенных типов. Например, ограничения обобщенных классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_713937""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">имя_класса&lt;T&gt; where T: тип_ограничения</code></div></div></td></tr></tbody></table></div></div> <p>В качестве примера определим класс мессенджера, который будет отправлять сообшения в виде объектов Message:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_969288""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Messenger&lt;T&gt; where T : Message</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(T message)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// текст сообщения</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Text = text;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">EmailMessage : Message</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь для класса Messenger опять же установлено ограничение <code>where T : Message</code>. То есть внутри класса Messenger все объекты типа T можно использовать  как объекты Message. И в данном случае в классе Messenger в методе SendMessage опять эмулируется отправка сообщений.</p> <p>Применим класс для отправки сообщений:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_764993""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Messenger&lt;Message&gt; telegram = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Messenger&lt;Message&gt;(); </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">telegram.SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">));</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Messenger&lt;EmailMessage&gt; outlook = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Messenger&lt;EmailMessage&gt;();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">outlook.SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Bye World""</code><code class=""c# plain"">));</code></div></div></td></tr></tbody></table></div></div> <h3>Типы ограничений и стандартные ограничения</h3> <p>В качестве ограничений мы можем использовать следующие типы:</p> <ul> <li><p>Классы</p></li> <li><p>Интерфейсы</p></li> <li><p>class - универсальный параметр должен представлять класс</p></li> <li><p>struct - универсальный параметр должен представлять структуру</p></li> <li><p>new() - универсальный параметр должен представлять тип, который имеет общедоступный (public) конструктор без параметров</p></li> </ul> <p>Есть ряд стандартных ограничений, которые мы можем использовать. В частности, можно указать ограничение, чтобы использовались только структуры или другие типы значений:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_893310""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Messenger&lt;T&gt; where T : </code><code class=""c# keyword"">struct</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{}</code></div></div></td></tr></tbody></table></div></div> <p>При этом использовать в качестве ограничения конкретные структуры в отличие от классов нельзя.</p> <p>Также можно задать в качестве ограничения ссылочные типы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_888841""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Messenger&lt;T&gt; where T : </code><code class=""c# keyword"">class</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{}</code></div></div></td></tr></tbody></table></div></div> <p>А также можно задать с помощью слова <span class=""b"">new</span> в качестве ограничения класс или структуру, которые имеют общедоступный конструктор без параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_22178""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Messenger&lt;T&gt; where T : </code><code class=""c# keyword"">new</code><code class=""c# plain"">()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{}</code></div></div></td></tr></tbody></table></div></div> <p>Если для универсального параметра задано несколько ограничений, то они должны идти в определенном порядке:</p> <ol> <li><p>Название класса, <code>class</code>, <code>struct</code>. Причем мы можем одновременно определить только одно из этих ограничений</p></li> <li><p>Название интерфейса</p></li> <li><p><code>new()</code></p></li> </ol> <div><div class=""syntaxhighlighter c#"" id=""highlighter_764582""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Smartphone&lt;T&gt; where T: Messenger, </code><code class=""c# keyword"">new</code><code class=""c# plain"">()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces""> </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Использование нескольких универсальных параметров</h3> <p>Если класс использует несколько универсальных параметров, то последовательно можно задать ограничения к каждому из них:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_426143""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Messenger&lt;T, P&gt; </code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">where T : Message</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">where P: Person</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(P sender, P receiver, T message)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправитель: {sender.Name}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Получатель: {receiver.Name}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""> </div><div class=""line number18 index17 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// текст сообщения</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt;  Text = text;</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае для параметра P будут передаваться объекты типа Person, а для параметра T - объекты Message.</p> <p>Применим классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_762433""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Messenger&lt;Message, Person&gt; telegram = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Messenger&lt;Message, Person&gt;();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Message hello = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello, Bob!""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">telegram.SendMessage(tom, bob, hello);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Отправитель: Tom Получатель: Bob Сообщение: Hello, Bob! </pre> </div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Наследование обобщенных типов</h2>   <p>Один обобщенный класс может быть унаследован от другого обобщенного. При этом можно использовать различные варианты наследования.</p> <p>Допустим, у нас есть следующий базовый класс Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_864391""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(T id)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Id = id;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Первый вариант заключается в создание класса-наследника, который типизирован тем же типом, что и базовый:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_422651""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">UniversalPerson&lt;T&gt; : Person&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">UniversalPerson(T id) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(id) { }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Применение класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_640835""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; person1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""34""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; person3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">UniversalPerson&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(45);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">UniversalPerson&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; person2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">UniversalPerson&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(33);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person1.Id);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(person2.Id);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(person3.Id);</code></div></div></td></tr></tbody></table></div></div> <p>Второй вариант представляет создание обычного необобщенного класса-наследника. В этом случае при наследовании у базового класса надо явным образом определить используемый тип:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_359227""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">StringPerson : Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">StringPerson(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">id) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(id) { }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь в производном классе в качестве типа будет использоваться тип <code>string</code>. Применение класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_697857""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">StringPerson person4 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringPerson(</code><code class=""c# string"">""438767""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; person5 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringPerson(</code><code class=""c# string"">""43875""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// так нельзя написать</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">//Person&lt;int&gt; person6 = new StringPerson(""45545"");</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(person4.Id);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(person5.Id);</code></div></div></td></tr></tbody></table></div></div> <p>Третий вариант представляет типизацию производного класса параметром совсем другого типа, отличного от универсального параметра в базовом классе. В этом  случае для базового класса также надо указать используемый тип:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_374468""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">IntPerson&lt;T&gt; : Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Code { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IntPerson(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">id, T code) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(id) </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Code = code;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь тип IntPerson типизирован еще одним типом, который может не совпадать с типом, который используется базовым классом. Применение класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_448490""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IntPerson&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; person7 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">IntPerson&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(5, </code><code class=""c# string"">""r4556""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; person8 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">IntPerson&lt;</code><code class=""c# keyword"">long</code><code class=""c# plain"">&gt;(7, 4587);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person7.Id);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person8.Id);</code></div></div></td></tr></tbody></table></div></div> <p>И также в классах-наследниках можно сочетать использование универсального параметра из базового класса с применением своих параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_410195""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">MixedPerson&lt;T, K&gt; : Person&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">where K : </code><code class=""c# keyword"">struct</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">K Code { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">MixedPerson(T id, K code) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(id)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Code = code;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в дополнение к унаследованному от базового класса параметру T добавляется новый параметр K. Также если необходимо при этом задать ограничения,  мы их можем указать после названия базового класса. Применение класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_426138""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">MixedPerson&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; person9 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">MixedPerson&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""456""</code><code class=""c# plain"">, 356);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; person10 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">MixedPerson&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""9867""</code><code class=""c# plain"">, 35678);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person9.Id);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person10.Id);</code></div></div></td></tr></tbody></table></div></div> <p>При этом стоит учитывать, что если на уровне базового класса для универсального параметра установлено ограничение, то подобное ограничение должно быть определено и в производных классах,  которые также используют этот параметр:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_627610""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person&lt;T&gt; where T : </code><code class=""c# keyword"">class</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(T id) =&gt; Id = id;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">UniversalPerson&lt;T&gt; : Person&lt;T&gt; where T: </code><code class=""c# keyword"">class</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">UniversalPerson(T id) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(id) { }</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>То есть если в базовом классе в качестве ограничение указано <code>class</code>, то есть любой класс, то в производном классе также надо указать в качестве ограничения  class, либо же какой-то конкретный класс.</p>     </div></body></html>",
            };
            string[] tasks = new string[]
            {
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
            };
            if (form1Instance != null && comboBox4.SelectedIndex >= 0 && comboBox4.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox4.SelectedIndex;
                selectCombobox = 4;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }

        private async void comboBox5_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Обработка исключений</h1><h2>Конструкция try..catch..finally</h2>   <p>Иногда при выполнении программы возникают ошибки, которые трудно предусмотреть или предвидеть, а  иногда и вовсе невозможно. Например, при передачи файла по сети может неожиданно оборваться сетевое подключение.  такие ситуации называются <span class=""b"">исключениями</span>. Язык C# предоставляет разработчикам возможности для обработки таких ситуаций. Для этого  в C# предназначена конструкция <span class=""b"">try...catch...finally</span>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_867534""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При использовании блока <span class=""b"">try...catch..finally</span> вначале выполняются все инструкции в блоке <span class=""b"">try</span>. Если в  этом блоке не возникло исключений, то после его выполнения начинает выполняться блок <span class=""b"">finally</span>. И затем конструкция try..catch..finally  завершает свою работу.</p> <p>Если же в блоке try вдруг возникает исключение, то обычный порядок выполнения останавливается, и среда CLR  начинает искать блок <span class=""b"">catch</span>, который может обработать данное исключение. Если нужный блок  catch найден, то он выполняется, и после его завершения выполняется блок finally.</p> <p>Если нужный блок catch не найден, то при возникновении исключения программа аварийно завершает свое выполнение.</p> <p>Рассмотрим следующий пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_740385""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Конец программы""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае происходит деление числа на 0, что приведет к генерации исключения. И при запуске приложения в  режиме отладки мы увидим в Visual Studio окошко, которое информирует об исключении:</p> <img alt=""Исключения в C#"" src=""./pics/2.10.png""/> <p>В этом окошке мы видим, что возникло исключение, которое представляет тип <span class=""b"">System.DivideByZeroException</span>,  то есть попытка деления на ноль. С помощью пункта <span class=""b"">View Details</span> можно посмотреть более детальную информацию об исключении.</p> <p>И в этом случае единственное, что нам остается, это завершить выполнение программы.</p> <p>Чтобы избежать подобного аварийного завершения программы, следует использовать для обработки исключений конструкцию  <span class=""b"">try...catch...finally</span>. Так, перепишем пример следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_301038""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение!""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Конец программы""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае у нас опять же возникнет исключение в блоке try, так как мы пытаемся разделить на ноль.  И дойдя до строки</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_599768""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div></div></td></tr></tbody></table></div></div> <p>выполнение программы остановится. CLR найдет блок <span class=""b"">catch</span> и передаст управление этому блоку.</p> <p>После блока catch будет выполняться блок finally.</p> <div class=""console""> <pre class=""consoletext"">Возникло исключение! Блок finally Конец программы </pre> </div> <p>Таким образом, программа по-прежнему не будет выполнять деление на ноль и соответственно не будет выводить результат этого деления,  но теперь она не будет аварийно завершаться, а исключение будет обрабатываться в блоке catch.</p> <p>Следует отметить, что в этой конструкции обязателен блок <span class=""b"">try</span>. При наличии блока catch мы можем опустить блок finally:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_588164""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение!""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И, наоборот, при наличии блока finally мы можем опустить блок catch и не обрабатывать исключение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_981157""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако, хотя с точки зрения синтаксиса C# такая конструкция вполне корректна, тем не менее, поскольку CLR не сможет найти нужный блок  catch, то исключение не будет обработано, и программа аварийно завершится.</p> <h3>Обработка исключений и условные конструкции</h3> <p>Ряд исключительных ситуаций может быть предвиден разработчиком. Например, пусть в программе есть метод, который принимает строку, конвертирует ее в число  и вычисляет квадрат этого числа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_705656""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Square(</code><code class=""c# string"">""12""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Квадрат числа 12: 144</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Square(</code><code class=""c# string"">""ab""</code><code class=""c# plain"">); </code><code class=""c# comments"">// !Исключение</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Square(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">data)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = </code><code class=""c# keyword"">int</code><code class=""c# plain"">.Parse(data);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Квадрат числа {x}: {x * x}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Если пользователь передаст в метод не число, а строку, которая содежит нецифровые символы, то программа выпадет в ошибку. С одной стороны,  здесь как раз та ситуация, когда можно применить блок  <code>try..catch</code>, чтобы обработать возможную ошибку. Однако гораздо оптимальнее было бы проверить допустимость преобразования:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_977794""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Square(</code><code class=""c# string"">""12""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Квадрат числа 12: 144</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Square(</code><code class=""c# string"">""ab""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Некорректный ввод</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Square(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">data)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code><code class=""c# plain"">.TryParse(data, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">var x))</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Квадрат числа {x}: {x * x}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Некорректный ввод""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>int.TryParse()</code> возвращает <code>true</code>, если преобразование можно осуществить, и <code>false</code> - если нельзя. При допустимости преобразования переменная x  будет содержать введенное число. Так, не используя <code>try...catch</code> можно обработать возможную исключительную ситуацию.</p> <p>С точки зрения производительности использование блоков <code>try..catch</code> более накладно, чем применение условных конструкций. Поэтому по возможности  вместо try..catch лучше использовать условные конструкции на проверку исключительных ситуаций.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Блок catch и фильтры исключений</h2>   <h3>Определение блока catch</h3> <p>За обработку исключения отвечает блок <span class=""b"">catch</span>, который может иметь следующие формы:</p> <ul> <li><div><div class=""syntaxhighlighter c#"" id=""highlighter_454836""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">catch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// выполняемые инструкции</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Обрабатывает любое исключение, которое возникло в блоке try. Выше уже был продемонстрирован пример подобного блока.</p></li> <li><div><div class=""syntaxhighlighter c#"" id=""highlighter_457315""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(тип_исключения)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// выполняемые инструкции</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Обрабатывает только те исключения, которые соответствуют типу, указаному в скобках после оператора catch.</p> <p>Например, обработаем только исключения типа DivideByZeroException:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_42407""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code><code class=""c# plain"">(DivideByZeroException)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение DivideByZeroException""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако если в блоке try возникнут исключения каких-то других типов, отличных от DivideByZeroException, то они не будут обработаны.</p> </li> <li><div><div class=""syntaxhighlighter c#"" id=""highlighter_903959""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(тип_исключения имя_переменной)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// выполняемые инструкции</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Обрабатывает только те исключения, которые соответствуют типу, указаному в скобках после оператора catch. А вся информация  об исключении помещается в переменную данного типа. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_493399""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code><code class=""c# plain"">(DivideByZeroException ex)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Возникло исключение {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Фактически этот случай аналогичен предыдущему за тем исключением, что здесь используется переменная. В данном случае в переменную <code>ex</code>, которая представляет тип DivideByZeroException, помещается  информация о возникшем исключени. И с помощью свойства <code>Message</code> мы можем получить сообщение об ошибке.</p> <p>Если нам не нужна информация об исключении, то переменную можно не использовать как в предыдущем случае.</p> </li> </ul> <h3>Фильтры исключений</h3> <p>Фильтры исключений позволяют обрабатывать исключения в зависимости от определенных условий. Для их применения  после выражения catch идет выражение <span class=""b"">when</span>, после которого в скобках указывается  условие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_707653""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">when(условие)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае обработка исключения в блоке catch производится только в том случае, если условие в выражении when истинно.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_650679""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 0;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">try</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = x / y;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = y / x;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException) when (y == 0)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""y не должен быть равен 0""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">catch</code><code class=""c# plain"">(DivideByZeroException ex)</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(ex.Message);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае будет выброшено исключение, так как y=0. Здесь два блока catch, и оба они обрабатывают исключения типа  DivideByZeroException, то есть по сути все исключения, генерируемые при делении на ноль. Но поскольку для первого блока указано условие  <span class=""b"">y == 0</span>, то именно этот блок будет обрабатывать данное исключение - условие, указанное после оператора <span class=""b"">when</span>  возвращает true.</p> <p>Противоположная ситуация:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_192237""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 0;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 1;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">try</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = x / y;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = y / x;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException) when (y == 0)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""y не должен быть равен 0""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">catch</code><code class=""c# plain"">(DivideByZeroException ex)</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(ex.Message);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае будет выброшено исключение, так как x=0. Условие первого блока catch - <span class=""b"">y == 0</span>  теперь возвращает  false. Поэтому CLR будет дальше искать соответствующие блоки catch далее и для обработки исключения  выберет второй блок catch. В итоге если мы уберем второй блок catch, то исключение вообще не будет обрабатываться.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Типы исключений. Класс Exception</h2>   <p>Базовым для всех типов исключений является тип <span class=""b"">Exception</span>. Этот тип определяет ряд свойств, с помощью которых можно получить информацию об исключении.</p> <ul> <li><p><span class=""b"">InnerException</span>: хранит информацию об исключении, которое послужило причиной текущего исключения</p></li> <li><p><span class=""b"">Message</span>: хранит сообщение об исключении, текст ошибки</p></li> <li><p><span class=""b"">Source</span>: хранит имя объекта или сборки, которое вызвало исключение</p></li> <li><p><span class=""b"">StackTrace</span>: возвращает строковое представление стека вызывов, которые привели к возникновению исключения</p></li> <li><p><span class=""b"">TargetSite</span>: возвращает метод, в котором и было вызвано исключение</p></li> </ul> <p>Например, обработаем исключения типа Exception:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_951579""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(Exception ex)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Исключение: {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Метод: {ex.TargetSite}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Трассировка стека: {ex.StackTrace}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <img alt=""Обработка исключений и класс Exception в C#"" src=""./pics/2.11.png""/> <p>Однако так как тип Exception является базовым типом для всех исключений, то выражение <code>catch (Exception ex)</code>  будет обрабатывать все исключения, которые могут возникнуть.</p> <p>Но также есть более специализированные типы исключений, которые предназначены для обработки каких-то определенных видов исключений.  Их довольно много, я приведу лишь некоторые:</p> <ul> <li><p><span class=""b"">DivideByZeroException</span>: представляет исключение, которое генерируется при делении на ноль</p></li> <li><p><span class=""b"">ArgumentOutOfRangeException</span>: генерируется, если значение аргумента находится вне диапазона  допустимых значений</p></li> <li><p><span class=""b"">ArgumentException</span>: генерируется, если в метод для параметра передается некорректное значение</p></li> <li><p><span class=""b"">IndexOutOfRangeException</span>: генерируется, если индекс элемента массива или коллекции находится вне диапазона  допустимых значений</p></li> <li><p><span class=""b"">InvalidCastException</span>: генерируется при попытке произвести недопустимые преобразования типов</p></li> <li><p><span class=""b"">NullReferenceException</span>: генерируется при попытке обращения к объекту, который равен null (то есть по сути неопределен)</p></li> </ul> <p>И при необходимости мы можем разграничить обработку различных типов исключений, включив дополнительные блоки catch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_686878""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">try</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[4];</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">numbers[7] = 9;     </code><code class=""c# comments"">// IndexOutOfRangeException</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;  </code><code class=""c# comments"">// DivideByZeroException</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {y}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение DivideByZeroException""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">catch</code> <code class=""c# plain"">(IndexOutOfRangeException ex)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(ex.Message);</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code> </div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Read();</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае блоки catch обрабатывают исключения типов IndexOutOfRangeException и DivideByZeroException. Когда в блоке try возникнет исключение,  то CLR будет искать нужный блок catch для обработки исключения. Так, в данном случае на строке</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_348854""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">numbers[7] = 9;</code></div></div></td></tr></tbody></table></div></div> <p>происходит обращение к 7-му элементу массива. Однако поскольку в массиве только 4 элемента, то мы получим исключение типа  IndexOutOfRangeException. CLR найдет блок catch, который обрабатывает данное исключение, и передаст ему управление.</p> <p>Следует отметить, что в данном случае в блоке try есть ситуация для генерации второго исключения - деление на ноль.  Однако поскольку после генерации IndexOutOfRangeException управление переходит в соответствующий блок catch, то деление на ноль <code>int y = x / 0</code>  в принципе не будет выполняться, поэтому исключение типа DivideByZeroException никогда не будет сгенерировано.</p> <p>Однако рассмотрим другую ситуацию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_950045""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">object</code> <code class=""c# plain"">obj = </code><code class=""c# string"">""you""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">num = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)obj;     </code><code class=""c# comments"">// System.InvalidCastException</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {num}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение DivideByZeroException""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(IndexOutOfRangeException)</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение IndexOutOfRangeException""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в блоке try генерируется исключение типа InvalidCastException, однако соответствующего блока catch для  обработки данного исключения нет. Поэтому программа аварийно завершит свое выполнение.</p> <p>Мы также можем определить для InvalidCastException свой блок catch, однако суть в том, что теоретически в коде  могут быть сгенерированы самые разные типы исключений. А определять для всех типов исключений блоки catch,  если обработка исключений однотипна, не имеет смысла. И в этом случае мы можем определить блок catch для базового типа Exception:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_623927""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">object</code> <code class=""c# plain"">obj = </code><code class=""c# string"">""you""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">num = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)obj;     </code><code class=""c# comments"">// System.InvalidCastException</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Результат: {num}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение DivideByZeroException""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(IndexOutOfRangeException)</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Возникло исключение IndexOutOfRangeException""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(Exception ex)</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Исключение: {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И в данном случае блок <code>catch (Exception ex){}</code> будет обрабатывать все исключения кроме DivideByZeroException  и IndexOutOfRangeException. При этом блоки catch для более общих, более базовых исключений следует помещать  в конце - после блоков catch для более конкретный, специализированных типов. Так как CLR выбирает для обработки исключения  первый блок catch, который соответствует типу сгенерированного исключения.  Поэтому в данном случае сначала обрабатывается исключение DivideByZeroException и IndexOutOfRangeException, и только потом  Exception (так как DivideByZeroException и IndexOutOfRangeException наследуется от класса Exception).</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Генерация исключения и оператор throw</h2>   <p>Обычно система сама генерирует исключения при определенных ситуациях, например, при делении числа на ноль. Но язык C#  также позволяет генерировать исключения вручную с помощью оператора <span class=""b"">throw</span>. То есть с помощью  этого оператора мы сами можем создать исключение и вызвать его в процессе выполнения.</p> <p>Например, в нашей программе происходит ввод имени пользователя, и мы хотим, чтобы, если длина имени меньше 2 символов, то  возникало исключение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_293851""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write(</code><code class=""c# string"">""Введите имя: ""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">? name = Console.ReadLine();</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(name== </code><code class=""c# keyword"">null</code> <code class=""c# plain"">|| name.Length &lt; 2)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Exception(</code><code class=""c# string"">""Длина имени меньше 2 символов""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ваше имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(Exception e)</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ошибка: {e.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После оператора <span class=""b"">throw</span> указывается объект исключения, через конструктор которого мы можем передать сообщение  об ошибке. Естественно вместо типа Exception мы можем использовать объект любого другого типа исключений.</p> <p>Затем в блоке catch сгенерированное нами исключение будет обработано.</p> <p>Подобным образом мы можем генерировать исключения в любом месте программы. Но существует также и другая форма  использования оператора throw, когда после данного оператора не указывается объект исключения. В подобном виде оператор throw  может использоваться только в блоке catch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_239568""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">try</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.Write(</code><code class=""c# string"">""Введите имя: ""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">string</code><code class=""c# plain"">? name = Console.ReadLine();</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(name == </code><code class=""c# keyword"">null</code> <code class=""c# plain"">|| name.Length &lt; 2)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Exception(</code><code class=""c# string"">""Длина имени меньше 2 символов""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ваше имя: {name}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">catch</code> <code class=""c# plain"">(Exception e)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ошибка: {e.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">throw</code><code class=""c# plain"">;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(Exception ex)</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">{</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(ex.Message);</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае при вводе имени с длиной меньше 2 символов возникнет исключение, которое будет обработано внутренним блоком catch.  Однако поскольку в этом блоке используется оператор throw, то исключение будет передано дальше внешнему блоку catch, который получит то же самое исключение и выведет то же самое сообщение на консоль.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Создание классов исключений</h2>   <p>Если нас не устраивают встроенные типы исключений, то мы можем создать свои типы. Базовым классом  для всех исключений является класс Exception, соответственно для создания своих типов мы можем унаследовать данный класс.</p> <p>Допустим, у нас в программе будет ограничение по возрасту:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_161227""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, Age = 17 };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(Exception ex)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ошибка: {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; age;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &lt; 18)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Exception(</code><code class=""c# string"">""Лицам до 18 регистрация запрещена""</code><code class=""c# plain"">);</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">else</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">age = value;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В классе Person при установке возраста происходит проверка, и если возраст меньше 18, то выбрасывается исключение. Класс Exception принимает  в конструкторе в качестве параметра строку, которое затем передается в его свойство Message.</p> <p>Но иногда удобнее использовать свои классы исключений. Например, в какой-то ситуации мы хотим обработать определенным образом только те исключения,  которые относятся к классу Person. Для этих целей мы можем сделать специальный класс PersonException:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_224946""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">PersonException : Exception</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">PersonException(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(message) { }</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>По сути класс кроме пустого конструктора ничего не имеет, и то в конструкторе мы просто обращаемся к конструктору базового класса  Exception, передавая в него строку message. Но теперь мы можем изменить класс Person, чтобы он выбрасывал исключение именно этого типа и  соответственно в основной программе обрабатывать это исключение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_462570""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, Age = 17 };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(PersonException ex)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ошибка: {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; age;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &lt; 18)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">PersonException(</code><code class=""c# string"">""Лицам до 18 регистрация запрещена""</code><code class=""c# plain"">);</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">else</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">age = value;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако необязательно наследовать свой класс исключений именно от типа Exception, можно взять какой-нибудь другой  производный тип. Например, в данном случае мы можем взять тип ArgumentException, который представляет исключение,  генерируемое в результате передачи аргументу метода некорректного значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_575962""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">PersonException : ArgumentException</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">PersonException(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(message)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ }</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Каждый тип исключений может определять какие-то свои свойства. Например, в данном случае мы можем определить в классе свойство для хранения устанавливаемого значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_607219""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">PersonException : ArgumentException</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Value { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">PersonException(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">val)</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">: </code><code class=""c# keyword"">base</code><code class=""c# plain"">(message)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Value = val;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В конструкторе класса мы устанавливаем это свойство и при обработке исключения мы его можем получить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_193713""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, Age = 17 };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(PersonException ex)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Ошибка: {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Некорректное значение: {ex.Value}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; age;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &lt; 18)</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">PersonException(</code><code class=""c# string"">""Лицам до 18 регистрация запрещена""</code><code class=""c# plain"">, value);</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">else</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">age = value;</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И в данном случае мы получим следующий консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Ошибка: Лицам до 18 регистрация запрещена Некорректное значение: 17 </pre> </div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Поиск блока catch при обработке исключений</h2>   <p>Если код, который вызывает исключение, не размещен в блоке try или помещен в конструкцию try..catch, которая не  содержит соответствующего блока catch для обработки возникшего исключения, то система производит поиск соответствующего обработчика исключения в стеке вызовов.</p> <p>Например, рассмотрим следующую программу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_360232""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div><div class=""line number37 index36 alt2"">37</div><div class=""line number38 index37 alt1"">38</div><div class=""line number39 index38 alt2"">39</div><div class=""line number40 index39 alt1"">40</div><div class=""line number41 index40 alt2"">41</div><div class=""line number42 index41 alt1"">42</div><div class=""line number43 index42 alt2"">43</div><div class=""line number44 index43 alt1"">44</div><div class=""line number45 index44 alt2"">45</div><div class=""line number46 index45 alt1"">46</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">TestClass.Method1();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException ex)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Catch в Main : {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Main""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Конец метода Main""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">TestClass</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Method1()</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">try</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Method2();</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">catch</code> <code class=""c# plain"">(IndexOutOfRangeException ex)</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Catch в Method1 : {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">finally</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Method1""</code><code class=""c# plain"">);</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Конец метода Method1""</code><code class=""c# plain"">);</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Method2()</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number35 index34 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">try</code></div><div class=""line number36 index35 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number37 index36 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 8;</code></div><div class=""line number38 index37 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number39 index38 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number40 index39 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">finally</code></div><div class=""line number41 index40 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number42 index41 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Method2""</code><code class=""c# plain"">);</code></div><div class=""line number43 index42 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number44 index43 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Конец метода Method2""</code><code class=""c# plain"">);</code></div><div class=""line number45 index44 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number46 index45 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае стек вызовов выглядит следующим образом: метод Main вызывает метод Method1, который, в свою очередь, вызывает метод Method2. И в методе  Method2 генерируется исключение DivideByZeroException. Визуально стек вызовов можно представить следующим образом:</p> <img alt=""Поиск блока catch при обработке исключения в C#"" src=""./pics/2.12.png""/> <p>Внизу стека метод Main, с которого началось выполнение, и на самом верху метод Method2.</p> <p>Что будет происходить в данном случае при генерации исключения?</p> <ol> <li><p>Метод Main вызывает метод Method1, а тот вызывает метод Method2, в котором генерируется исключение DivideByZeroException.</p></li> <li><p>Система видит, что код, который вызывал исключение, помещен в конструкцию try..catch</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_341219""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 8;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y = x / 0;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">finally</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Method2""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Система ищет в этой конструкции блок catch, который обрабатывает исключение DivideByZeroException. Однако такого блока catch нет.</p></li> <li><p>Система опускается в стеке вызовов в метод Method1, который вызывал Method2. Здесь вызов Method2 помещен в  конструкцию try..catch</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_932993""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Method2();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(IndexOutOfRangeException ex)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Catch в Method1 : {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Method1""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Система также ищет в этой конструкции блок catch, который обрабатывает исключение DivideByZeroException. Однако  здесь также подобный блок catch отсутствует.</p> </li> <li><p>Система далее опускается в стеке вызовов в метод Main, который вызывал Method1. Здесь вызов Method1 помещен в  конструкцию try..catch</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_239603""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">try</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">TestClass.Method1();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException ex)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Catch в Main : {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Main""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Система снова ищет в этой конструкции блок catch, который обрабатывает исключение DivideByZeroException. И в  данном случае такой блок найден.</p> </li> <li><p>Система наконец нашла нужный блок catch в методе Main, для обработки исключения, которое возникло  в методе Method2 - то есть к начальному методу, где непосредственно возникло исключение. Но пока данный блок catch НЕ выполняется. Система поднимается обратно по стеку вызовов в самый верх в метод  Method2 и выполняет в нем блок finally:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_430631""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Method2""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Далее система возвращается по стеку вызовов вниз в метод Method1 и выполняет в нем блок finally:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_500013""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Method1""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Затем система переходит по стеку вызовов вниз в метод Main и выполняет в нем найденный блок catch и последующий блок finally:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_383066""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">catch</code> <code class=""c# plain"">(DivideByZeroException ex)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Catch в Main : {ex.Message}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">finally</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Блок finally в Main""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> </li> <li><p>Далее выполняется код, который идет в методе Main после конструкции try..catch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_21692""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Конец метода Main""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что код, который идет после конструкции try...catch в методах Method1 и Method2, не выполняется, потому что обработчик исключения найден именно в методе Main.</p> </li> </ol> <p>Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">Блок finally в Method2 Блок finally в Method1 Catch в Main: Attempted to divide by zero Блок finally в Main Конец метода Main </pre> </div>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: Обработка исключений\r\n //1. Создайте метод, который принимает два числа и делит одно на другое. Обработайте возможное деление на ноль с помощью try...catch.",
                "//Задание 1: Блок catch и фильтры исключений\r\n //1. Создайте метод, который принимает два целых числа и делит одно на другое. Используйте блок catch, чтобы обрабатывать исключения DivideByZeroException и ArgumentException отдельно, выводя различные сообщения для каждого случая.",
                "//Задание 1: Типы исключений и класс Exception\r\n //1. Создайте метод, который включает различные потенциально опасные операции, такие как деление на ноль, преобразование типов и доступ к несуществующему индексу массива.",
                "//Задание 1: Генерация исключения и оператор throw\r\n //1. Напишите метод, который принимает строку и проверяет её длину. Если длина строки меньше 3 символов, используйте оператор throw для генерации исключения с сообщением \"Строка слишком короткая\".",
                "//Задание 1: Создание классов исключений\r\n //1. Создайте класс AgeRestrictionException, наследующий от ArgumentException, который будет использоваться для случаев, когда возраст не соответствует установленным ограничениям.\r\n ",
                "//Задание 1: Поиск блока catch при обработке исключений\r\n //1. Создайте программу с классом TestClass, содержащим методы Method1 и Method2, как в примере.\r\n",
            };
            if (form1Instance != null && comboBox5.SelectedIndex >= 0 && comboBox5.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox5.SelectedIndex;
                selectCombobox = 5;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }

        private async void comboBox6_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Делегаты, события и лямбды</h1><h2>Делегаты</h2>   <p>Делегаты представляют такие объекты, которые указывают на методы. То есть делегаты - это указатели на методы и с  помощью делегатов мы можем вызвать данные методы.</p> <h3>Определение делегатов</h3> <p>Для объявления делегата используется ключевое слово <span class=""b"">delegate</span>, после которого идет возвращаемый тип, название и параметры. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_595234""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div></div></td></tr></tbody></table></div></div> <p>Делегат Message в качестве возвращаемого типа имеет тип void (то есть ничего не возвращает) и не принимает никаких параметров.  Это значит, что этот делегат может указывать на любой метод, который не принимает никаких параметров и ничего не возвращает.</p> <p>Рассмотрим применение этого делегата:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_586027""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message mes;            </code><code class=""c# comments"">// 2. Создаем переменную делегата</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">mes = Hello;            </code><code class=""c# comments"">// 3. Присваиваем этой переменной адрес метода</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">mes();                  </code><code class=""c# comments"">// 4. Вызываем метод</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello METANIT.COM""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message(); </code><code class=""c# comments"">// 1. Объявляем делегат</code></div></div></td></tr></tbody></table></div></div> <p>Прежде всего сначала необходимо определить сам делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_940219""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message(); </code><code class=""c# comments"">// 1. Объявляем делегат</code></div></div></td></tr></tbody></table></div></div> <p>Для использования делегата объявляется переменная этого делегата:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_762542""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message mes; </code><code class=""c# comments"">// 2. Создаем переменную делегата</code></div></div></td></tr></tbody></table></div></div> <p>Далее в делегат передается адрес определенного метода (в нашем случае метода Hello). Обратите внимание, что данный метод имеет тот же  возвращаемый тип и тот же набор параметров (в данном случае отсутствие параметров), что и делегат.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_488711""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">mes = Hello; </code><code class=""c# comments"">// 3. Присваиваем этой переменной адрес метода</code></div></div></td></tr></tbody></table></div></div> <p>Затем через делегат вызываем метод, на который ссылается данный делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_968699""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">mes(); </code><code class=""c# comments"">// 4. Вызываем метод</code></div></div></td></tr></tbody></table></div></div> <p>Вызов делегата производится подобно вызову метода.</p> <p>При этом делегаты необязательно могут указывать только на методы, которые определены в том же классе, где определена переменная делегата.  Это могут быть также методы из других классов и структур.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_788784""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message message1 = Welcome.Print;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Message message2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Hello().Display;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">message1(); </code><code class=""c# comments"">// Welcome</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">message2(); </code><code class=""c# comments"">// Привет</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Welcome</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine(</code><code class=""c# string"">""Welcome""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Hello</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Display() =&gt; Console.WriteLine(</code><code class=""c# string"">""Привет""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Место определения делегата</h3> <p>Если мы определяем делегат в прогаммах верхнего уровня (top-level program), которую по умолчанию представляет файл Program.cs начиная с версии C# 10, как в примере выше, то, как и другие типы, делегат определяется в конце кода. Но в принцие делегат можно определять внутри класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_541464""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message(); </code><code class=""c# comments"">// 1. Объявляем делегат</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Message mes;            </code><code class=""c# comments"">// 2. Создаем переменную делегата</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">mes = Hello;            </code><code class=""c# comments"">// 3. Присваиваем этой переменной адрес метода</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">mes();                  </code><code class=""c# comments"">// 4. Вызываем метод</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello METANIT.COM""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Либо вне класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_446814""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message(); </code><code class=""c# comments"">// 1. Объявляем делегат</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Message mes;            </code><code class=""c# comments"">// 2. Создаем переменную делегата</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">mes = Hello;            </code><code class=""c# comments"">// 3. Присваиваем этой переменной адрес метода</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">mes();                  </code><code class=""c# comments"">// 4. Вызываем метод</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello METANIT.COM""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Параметры и результат делегата</h3> <p>Рассмотрим определение и применение делегата, который принимает параметры и возвращает результат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_379346""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation = Add;      </code><code class=""c# comments"">// делегат указывает на метод Add</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = operation(4, 5);   </code><code class=""c# comments"">// фактически Add(4, 5)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result);      </code><code class=""c# comments"">// 9</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">operation = Multiply;           </code><code class=""c# comments"">// теперь делегат указывает на метод Multiply</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">result = operation(4, 5);       </code><code class=""c# comments"">// фактически Multiply(4, 5)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(result);      </code><code class=""c# comments"">// 20</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x * y;</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае делегат Operation возвращает значение типа int и имеет два параметра типа int. Поэтому этому делегату  соответствует любой метод, который возвращает значение типа int и принимает два параметра типа int. В данном случае это методы Add и Multiply.  То есть мы можем присвоить переменной делегата любой из этих методов и вызывать.</p> <p>Поскольку делегат принимает два параметра типа int, то при его вызове необходимо передать значения для этих параметров: <code>operation(4,5)</code>.</p> <h3>Присвоение ссылки на метод</h3> <p>Выше переменной делегата напрямую присваивался метод. Есть еще один способ - создание объекта делегата с помощью конструктора,  в который передается нужный метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_884443""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation1 = Add;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Operation operation2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Operation(Add);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>Оба способа равноценны.</p> <h3>Соответствие методов делегату</h3> <p>Как было написано выше, методы соответствуют делегату, если они имеют один и тот же возвращаемый тип и один и тот же набор параметров.  Но надо учитывать, что во внимание также принимаются модификаторы <span class=""b"">ref</span>, <span class=""b"">in</span> и <span class=""b"">out</span>. Например, пусть у нас есть делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_972809""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SomeDel(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">b);</code></div></div></td></tr></tbody></table></div></div> <p>Этому делегату соответствует, например, следующий метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_744092""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SomeMethod1(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">g, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">n) { }</code></div></div></td></tr></tbody></table></div></div> <p>А следующие методы НЕ соответствуют:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_220793""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">SomeMethod2(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">g, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">n) { </code><code class=""c# keyword"">return</code> <code class=""c# plain"">g + n; }</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">SomeMethod3(</code><code class=""c# keyword"">double</code> <code class=""c# plain"">n, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">g) { }</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SomeMethod4(</code><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">g, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">n) { }</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">SomeMethod5(</code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">g, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">n) { g = 6; }</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод SomeMethod2 имеет другой возвращаемый тип, отличный от типа делегата. SomeMethod3 имеет другой набор параметров.  Параметры SomeMethod4 и SomeMethod5 также отличаются от параметров делегата, поскольку имеют модификаторы ref и out.</p> <h3>Добавление методов в делегат</h3> <p>В примерах выше переменная делегата указывала на один метод. В реальности же делегат может указывать на множество методов,  которые имеют ту же сигнатуру и возвращаемые тип. Все методы в делегате попадают в специальный список - список вызова или invocation list. И при вызове делегата  все методы из этого списка последовательно вызываются. И мы можем добавлять в этот список не один, а несколько методов. Для добавления методов в делегат применяется операция <span class=""b"">+=</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_631876""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message message = Hello;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">message += HowAreYou;  </code><code class=""c# comments"">// теперь message указывает на два метода</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">message();              </code><code class=""c# comments"">// вызываются оба метода - Hello и HowAreYou</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">HowAreYou() =&gt; Console.WriteLine(</code><code class=""c# string"">""How are you?""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в список вызова делегата message добавляются два метода - Hello и HowAreYou. И при вызове message вызываются сразу оба этих метода.</p> <p>Однако стоит отметить, что в реальности будет происходить создание нового объекта  делегата, который получит методы старой копии делегата и новый метод, и новый созданный объект делегата будет присвоен переменной message.</p> <p>При добавлении делегатов следует учитывать, что мы можем добавить ссылку на один и тот же метод несколько раз, и в списке вызова делегата тогда будет несколько ссылок на один и то же метод.  Соответственно при вызове делегата добавленный метод будет вызываться столько раз, сколько он был добавлен:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_758024""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message message = Hello;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">message += HowAreYou;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">message += Hello;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">message += Hello;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">message();</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Hello How are you? Hello Hello </pre> </div> <p>Подобным образом мы можем удалять методы из делегата с помощью операций <span class=""b"">-=</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_895889""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message? message = Hello; </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">message += HowAreYou;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">message();  </code><code class=""c# comments"">// вызываются все методы из message</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">message -= HowAreYou;   </code><code class=""c# comments"">// удаляем метод HowAreYou</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(message != </code><code class=""c# keyword"">null</code><code class=""c# plain"">) message(); </code><code class=""c# comments"">// вызывается метод Hello</code></div></div></td></tr></tbody></table></div></div> <p>При удалении методов из делегата фактически будет создаваться новый делегат, который в списке вызова методов будет содержать на один метод меньше.</p> <p>Стоит отметить, что при удалении метода может сложиться ситуация, что в делегате не будет методов, и тогда переменная будет иметь значение null. Поэтому в данном случае переменная определена  не просто как переменная типа <code>Message</code>, а именно <span class=""b"">Message?</span>, то есть типа, который может представлять как делегат Message, так и значение null.</p> <p>Кроме того, перед вторым вызовом мы проверяем переменную на значение null.</p> <p>При удалении следует учитывать, что если делегат содержит несколько ссылок на один и тот же метод, то операция -= начинает  поиск с конца списка вызова делегата и удаляет только первое найденное вхождение. Если подобного метода в списке вызова делегата нет,  то операция -= не имеет никакого эффекта.</p> <h4>Объединение делегатов</h4> <p>Делегаты можно объединять в другие делегаты. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_727253""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message mes1 = Hello;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Message mes2 = HowAreYou;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Message mes3 = mes1 + mes2; </code><code class=""c# comments"">// объединяем делегаты</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">mes3(); </code><code class=""c# comments"">// вызываются все методы из mes1 и mes2</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">HowAreYou() =&gt; Console.WriteLine(</code><code class=""c# string"">""How are you?""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае объект mes3 представляет объединение делегатов mes1 и mes2. Объединение делегатов значит, что в список вызова  делегата mes3 попадут все методы из делегатов mes1 и mes2. И при вызове делегата mes3 все эти методы одновременно будут вызваны.</p> <h3>Вызов делегата</h3> <p>В примерах выше делегат вызывался как обычный метод. Если делегат принимал параметры, то при его вызове для параметров передавались  необходимые значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_983572""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message mes = Hello;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">mes();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Operation op = Add;</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">n = op(3, 4);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(n);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div></div></td></tr></tbody></table></div></div> <p>Другой способ вызова делегата представляет метод <span class=""b"">Invoke()</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_74341""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message mes = Hello;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">mes.Invoke(); </code><code class=""c# comments"">// Hello</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Operation op = Add;</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">n = op.Invoke(3, 4);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(n);   </code><code class=""c# comments"">// 7</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Hello() =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div></div></td></tr></tbody></table></div></div> <p>Если делегат принимает параметры, то в метод Invoke передаются значения для этих параметров.</p> <p>Следует учитывать, что если делегат пуст, то есть в его списке вызова нет ссылок ни на один из методов (то есть делегат равен Null), то при вызове  такого делегата мы получим исключение, как, например, в следующем случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_47222""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message? mes;</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">//mes();        // ! Ошибка: делегат равен null</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Operation? op = Add;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">op -= Add;      </code><code class=""c# comments"">// делегат op пуст</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">n = op(3, 4);       </code><code class=""c# comments"">// !Ошибка: делегат равен null</code></div></div></td></tr></tbody></table></div></div> <p>Поэтому при вызове делегата всегда лучше проверять, не равен ли он null. Либо можно использовать метод Invoke и оператор  условного null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_473607""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message? mes = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">mes?.Invoke();        </code><code class=""c# comments"">// ошибки нет, делегат просто не вызывается</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Operation? op = Add;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">op -= Add;          </code><code class=""c# comments"">// делегат op пуст</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">? n = op?.Invoke(3, 4);   </code><code class=""c# comments"">// ошибки нет, делегат просто не вызывается, а n = null</code></div></div></td></tr></tbody></table></div></div> <p>Если делегат возвращает некоторое значение, то возвращается значение последнего метода из списка вызова (если в списке вызова несколько методов). Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_711437""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation op = Subtract;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">op += Multiply;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">op += Add;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(op(7, 2));    </code><code class=""c# comments"">// Add(7,2) = 9</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Subtract(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x - y;</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x * y;</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <h3>Обобщенные делегаты</h3> <p>Делегаты, как и другие типы, могут быть обобщенными, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_57745""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation&lt;</code><code class=""c# keyword"">decimal</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; squareOperation = Square;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">result1 = squareOperation(5);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result1);  </code><code class=""c# comments"">// 25</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Operation&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; doubleOperation = Double;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = doubleOperation(5);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(result2);  </code><code class=""c# comments"">// 10</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">Square(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n) =&gt; n * n;</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Double(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n) =&gt; n + n;</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# plain"">T Operation&lt;T, K&gt;(K val);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь делегат Operation типизируется двумя параметрами типов. Параметр T представляет тип возвращаемого значения. А параметр K представляет  тип передаваемого в делегат параметра. Таким образом, этому делегату соответствует метод, который принимает параметр любого типа и возвращает значение любого типа.</p> <p>В прогамме мы можем определить переменные делегата под определенный метод. Например, делегату <code>Operation&lt;decimal, int&gt;</code>  соответствует метод, который принимает число int и возвращает число типа decimal. А делегату <code>Operation&lt;int, int&gt;</code>  соответствует метод, который принимает и возвращает число типа int.</p> <h3>Делегаты как параметры методов</h3> <p>Также делегаты могут быть параметрами методов. Благодаря этому один метод в качестве параметров может получать действия - другие методы. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_4003""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DoOperation(5, 4, Add);         </code><code class=""c# comments"">// 9</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">DoOperation(5, 4, Subtract);    </code><code class=""c# comments"">// 1</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">DoOperation(5, 4, Multiply);    </code><code class=""c# comments"">// 20</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b, Operation op)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(op(a,b));</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Subtract(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x - y;</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x * y;</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод <span class=""b"">DoOperation</span> в качестве параметров принимает два числа и некоторое действие в виде делегата Operation. В внутри метода  вызываем делегат Operation, передавая ему числа из первых двух параметров.</p> <p>При вызове метода DoOperation мы можем передать в него в качестве третьего параметра метод, который соответствует делегату Operation.</p> <h3>Возвращение делегатов из метода</h3> <p>Также делегаты можно возвращать из методов. То есть мы можем возвращать из метода какое-то действие в виде другого метода. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_889561""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation = SelectOperation(OperationType.Add);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 14</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">operation = SelectOperation(OperationType.Subtract);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 6</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">operation = SelectOperation(OperationType.Multiply);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 40</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">Operation SelectOperation(OperationType opType)</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(opType)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">OperationType.Add: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Add;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">OperationType.Subtract: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Subtract;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Multiply;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""> </div><div class=""line number20 index19 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number21 index20 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Subtract(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x - y;</code></div><div class=""line number22 index21 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x * y;</code></div><div class=""line number23 index22 alt2""> </div><div class=""line number24 index23 alt1""><code class=""c# keyword"">enum</code> <code class=""c# plain"">OperationType</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">{</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Add, Subtract, Multiply</code></div><div class=""line number27 index26 alt2""><code class=""c# plain"">}</code></div><div class=""line number28 index27 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае метод <code>SelectOperation()</code> в качестве параметра принимает перечисление типа OperationType. Это перечисление хранит три константы,  каждая из которых соответствует определенной арифметической операции. И в самом методе в зависимости от значения параметра возвращаем определенный метод.  Причем поскольку возвращаемый тип метода - делегат Operation, то метод должен возвратить метод, который соответствует этому делегату - в нашем случае это методы  Add, Subtract, Multiply. То есть если параметр метода SelectOperation равен <code>OperationType.Add</code>, то возвращается метод Add, который выполняет сложение двух чисел:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_13313""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">case</code> <code class=""c# plain"">OperationType.Add: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Add;</code></div></div></td></tr></tbody></table></div></div> <p>При вызове метода SelectOperation мы можем получить из него нужное действие в переменную operation:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_570442""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation = SelectOperation(OperationType.Add);</code></div></div></td></tr></tbody></table></div></div> <p>И при вызове переменной operation фактически будет вызываться полученный из SelectOperation метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_240479""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation = SelectOperation(OperationType.Add);   </code><code class=""c# comments"">// Здесь operation = Add</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 14</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.17.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Применение делегатов</h2>   <p>В прошлой теме подробно были рассмотрены делегаты. Однако данные примеры, возможно, не показывают истинной силы делегатов, так как нужные нам методы в данном случае мы можем вызвать и напрямую  без всяких делегатов. Однако наиболее сильная сторона делегатов состоит в том, что они позволяют <span class=""b"">делегировать</span> выполнение  некоторому коду извне. И на момент написания программы мы можем не знать, что за код будет выполняться.  Мы просто вызываем делегат. А какой метод будет непосредственно выполняться при вызове делегата, будет решаться потом.</p> <p>Рассмотрим подробный пример. Пусть у нас есть класс, описывающий счет в банке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_821150""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum; </code><code class=""c# comments"">// Переменная для хранения суммы</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// через конструктор устанавливается начальная сумма на счете</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum = sum;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// добавить средства на счет</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum += sum;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// взять деньги с счета</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# comments"">// берем деньги, если на счете достаточно средств</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum &gt;=sum) </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum -= sum;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В переменной sum хранится сумма на счете. С помощью конструктора устанавливается начальная сумма на счете. Метод <code>Add()</code> служит для добавления на счет,  а метод <code>Take</code> - для снятия денег со счета.</p> <p>Допустим, в случае вывода денег с помощью метода <code>Take</code> нам надо как-то уведомлять об этом самого владельца счета и, может  быть, другие объекты. Если речь идет о консольной программе, и класс будет применяться в том же проекте, где он создан, то мы можем написать просто:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_566023""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum = sum;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum += sum;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum &gt;= sum)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum -= sum;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Со счета списано {sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Но что если наш класс планируется использовать в других проектах, например, в графическом приложении на Windows Forms или WPF, в мобильном приложении, в веб-приложении. Там строка уведомления</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_801004""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Со счета списано {sum} у.е.""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>не будет иметь большого смысла.</p> <p>Более того, наш класс Account будет использоваться другими разработчиками в виде отдельной библиотеки классов. И эти разработчики захотят уведомлять о снятии средств каким-то другим образом, о которых мы даже можем не догадываться на  момент написания класса. Поэтому примитивое уведомление в виде строки кода</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_199591""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Со счета списано {sum} у.е.""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>не самое лучшее решение в данном случае. И делегаты позволяют делегировать определение действия из класса во внешний код, который будет использовать этот класс.</p> <p>Изменим класс, применив делегаты:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_620353""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// Объявляем делегат</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// Создаем переменную делегата</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">AccountHandler? taken;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum = sum;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// Регистрируем делегат</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">RegisterHandler(AccountHandler del)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">taken = del;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum += sum;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum &gt;= sum)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum -= sum;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# comments"">// вызываем делегат, передавая ему сообщение</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">taken?.Invoke($</code><code class=""c# string"">""Со счета списано {sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">taken?.Invoke($</code><code class=""c# string"">""Недостаточно средств. Баланс: {this.sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number28 index27 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для делегирования действия здесь определен делегат <span class=""b"">AccountHandler</span>. Этот делегат соответствует любым методам, которые имеют  тип <span class=""b"">void</span> и принимают параметр типа <span class=""b"">string</span>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_988126""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div></div></td></tr></tbody></table></div></div> <p>В классе Account определяем переменную <code>taken</code>, которая представляет этот делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_640306""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">AccountHandler? taken;</code></div></div></td></tr></tbody></table></div></div> <p>Теперь надо связать эту переменную с конкретным действием, которое будет выполняться. Мы можем использовать разные способы для передачи делегата в  класс. В данном случае определяется специальный метод RegisterHandler, в котором в переменную taken передается реальное действие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_445178""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">RegisterHandler(AccountHandler del)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">taken = del;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, делегат установлен, и теперь его можно вызывать. Вызов делегата производится в методе Take:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_222092""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum &gt;= sum)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum -= sum;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# comments"">// вызываем делегат, передавая ему сообщение</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">taken?.Invoke($</code><code class=""c# string"">""Со счета списано {sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">taken?.Invoke($</code><code class=""c# string"">""Недостаточно средств. Баланс: {this.sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку делегат AccountHandler в качестве параметра принимает строку, то при вызове переменной <code>taken()</code> мы можем передать в этот вызов  конкретное сообщение. В зависимости от того, произошло снятие денег или нет, в вызов делегата передаются разные сообщения.</p> <p>То есть фактически вместо делегата будут выполняться действия, которые переданы делегату в методе RegisterHandler.  Причем опять же подчеркну, при вызове делегата мы не знаем, что это будут за действия. Здесь мы только передаем в эти действия сообщение об успешно или неудачном снятии.</p> <p>Теперь протестируем класс в основной программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_943956""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// создаем банковский счет</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Account account = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(200);</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// Добавляем в делегат ссылку на метод PrintSimpleMessage</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">account.RegisterHandler(PrintSimpleMessage);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// Два раза подряд пытаемся снять деньги</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">account.Take(100);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">account.Take(150);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintSimpleMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message) =&gt; Console.WriteLine(message);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь через метод RegisterHandler переменной taken в классе Account передается ссылка на метод <code>PrintSimpleMessage</code>. Этот метод  соответствует делегату AccountHandler. Соответственно там, где в классе Account вызывается делегат taken, в реальности будет выполняться метод  PrintSimpleMessage.</p> <p>Через параметр <code>message</code> метод PrintSimpleMessage получит переданное из делегата сообщение и выведет его на консоль:</p> <div class=""console""> <pre class=""consoletext"">Со счета списано 100 у.е. Недостаточно средств. Баланс: 100 у.е. </pre> </div> <p>Таким образом, мы создали механизм обратного вызова для класса Account, который срабатывает в случае снятия денег.  Здесь мы выводим сообщение на консоль. Да, мы могли бы просто выводить сообщение на консоль и без делегатов. Однако с делегатом для класса Account не важно, как это сообщение выводится. Классу Account даже не известно, что вообще будет делаться в результате списания денег. Он просто посылает уведомление об этом через делегат.</p> <p>В результате, если мы создаем консольное приложение, мы можем через делегат выводить сообщение на консоль. Если мы создаем графическое приложение  Windows Forms или WPF, то можно выводить сообщение в виде графического окна. А можно не просто выводить сообщение. А, например, записать при списании информацию об этом действии в файл  или отправить уведомление на электронную почту. В общем любыми способами обработать вызов делегата. И способ обработки не будет зависеть от класса Account.</p> <h3>Добавление и удаление методов в делегате</h3> <p>Хотя в примере наш делегат принимал адрес на один метод, в действительности он может указывать сразу на несколько методов.  Кроме того, при необходимости мы можем удалить ссылки на адреса определенных методов, чтобы они не вызывались при вызове делегата.  Итак, изменим в классе Account метод RegisterHandler и добавим новый метод UnregisterHandler, который будет удалять методы из списка  методов делегата:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_671033""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">AccountHandler? taken;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum = sum;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// Регистрируем делегат</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">RegisterHandler(AccountHandler del)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">taken += del;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// Отмена регистрации делегата</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">UnregisterHandler(AccountHandler del)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">taken -= del; </code><code class=""c# comments"">// удаляем делегат</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum += sum;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(</code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum &gt;= sum)</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">this</code><code class=""c# plain"">.sum -= sum;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">taken?.Invoke($</code><code class=""c# string"">""Со счета списано {sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">taken?.Invoke($</code><code class=""c# string"">""Недостаточно средств. Баланс: {this.sum} у.е.""</code><code class=""c# plain"">);</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number28 index27 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В первом методе объединяет делегаты <code>taken</code> и <code>del</code> в один, который потом  присваивается переменной <code>taken</code>. Во втором методе из переменной <code>taken</code> удаляется делегат <code>del</code>.</p> <p>Применим новые методы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_62169""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account account = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(200);</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// Добавляем в делегат ссылку на методы</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">account.RegisterHandler(PrintSimpleMessage);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">account.RegisterHandler(PrintColorMessage);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// Два раза подряд пытаемся снять деньги</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">account.Take(100);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">account.Take(150);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// Удаляем делегат</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">account.UnregisterHandler(PrintColorMessage);</code></div><div class=""line number11 index10 alt2""><code class=""c# comments"">// снова пытаемся снять деньги</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">account.Take(50);</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintSimpleMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message) =&gt; Console.WriteLine(message);</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintColorMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// Устанавливаем красный цвет символов</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.ForegroundColor = ConsoleColor.Red;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(message);</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// Сбрасываем настройки цвета</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.ResetColor();</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В целях тестирования мы создали еще один метод - PrintColorMessage, который выводит то же самое сообщение только красным цветом. Ссылка на этот метод также  передается в метод RegisterHandler, и таким образом ее получит переменная taken.</p> <p>В строке <code>account.UnregisterHandler(PrintColorMessage);</code> этот метод удаляется из списка вызовов делегата, поэтому этот метод  больше не будет срабатывать. Консольный вывод будет иметь следующую форму:</p> <div class=""console""> <pre class=""consoletext"">Со счета списано 100 у.е. <span style=""color:red;"">Со счета списано 100 у.е.</span> Недостаточно средств. Баланс: 100 у.е. <span style=""color:red;"">Недостаточно средств. Баланс: 100 у.е.</span> Со счета списано 50 у.е. </pre> </div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Анонимные методы</h2>   <p>С делегатами тесно связаны <span class=""b"">анонимные методы</span>. Анонимные методы используются для создания экземпляров делегатов.</p> <p>Определение анонимных методов начинается с ключевого слова <span class=""b"">delegate</span>, после которого идет в скобках список параметров и тело метода  в фигурных скобках:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_216917""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code><code class=""c# plain"">(параметры)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// инструкции</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_492003""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">MessageHandler handler = </code><code class=""c# keyword"">delegate</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">mes)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(mes);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">};</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">handler(</code><code class=""c# string"">""hello world!""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MessageHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div></div></td></tr></tbody></table></div></div> <p>Анонимный метод не может существовать сам по себе, он используется для инициализации экземпляра делегата, как в данном случае переменная  handler представляет анонимный метод. И через эту переменную делегата можно вызвать данный анонимный метод.</p> <p>Другой пример анонимных методов - передача в качестве аргумента для параметра, который представляет делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_771258""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">ShowMessage(</code><code class=""c# string"">""hello!""</code><code class=""c# plain"">, </code><code class=""c# keyword"">delegate</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">mes)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(mes);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">});</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">ShowMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message, MessageHandler handler)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">handler(message);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MessageHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div></div></td></tr></tbody></table></div></div> <p>Если анонимный метод использует параметры, то они должны соответствовать параметрам делегата.  Если для анонимного метода не требуется параметров, то скобки с параметрами опускаются. При этом даже если делегат принимает несколько параметров,  то в анонимном методе можно вовсе опустить параметры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_337482""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">MessageHandler handler = </code><code class=""c# keyword"">delegate</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""анонимный метод""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">};</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">handler(</code><code class=""c# string"">""hello world!""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// анонимный метод</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MessageHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div></div></td></tr></tbody></table></div></div> <p>То есть если анонимный метод содержит параметры, они обязательно должны соответствовать параметрам делегата. Либо анонимный метод вообще может не содержать никаких параметров, тогда он соответствует любому делегату,  который имеет тот же тип возвращаемого значения.</p> <p>При этом параметры анонимного метода не могут быть опущены, если один или несколько параметров определены с модификатором <span class=""b"">out</span>.</p> <p>Также, как и обычные методы, анонимные могут возвращать результат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_884294""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation = </code><code class=""c# keyword"">delegate</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x + y;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">};</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = operation(4, 5);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(result);       </code><code class=""c# comments"">// 9</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>При этом анонимный метод имеет доступ ко всем переменным, определенным во внешнем коде:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_518146""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Operation operation = </code><code class=""c# keyword"">delegate</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x + y + z;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = operation(4, 5);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(result);       </code><code class=""c# comments"">// 17</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>В каких ситуациях используются анонимные методы? Когда нам надо определить однократное действие, которое не имеет много инструкций и нигде больше не используется. В частности, их можно использовать для обработки событий, которые будут рассмотрены далее.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Лямбды</h2>   <p>Лямбда-выражения представляют упрощенную запись анонимных методов. Лямбда-выражения позволяют создать емкие лаконичные методы, которые могут  возвращать некоторое значение и которые можно передать в качестве параметров в другие методы.</p> <p>Ламбда-выражения имеют следующий синтаксис: слева от лямбда-оператора <code>=&gt;</code> определяется список параметров, а справа блок выражений, использующий эти параметры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_782110""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">(список_параметров) =&gt; выражение</code></div></div></td></tr></tbody></table></div></div> <p>С точки зрения типа данных лямбда-выражение представляет делегат. Например, определим простейшее лямбда-выражение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_485698""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message hello = () =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Message();</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае переменная hello представляет делегат Message - то есть некоторое действие, которое ничего не возвращает и не принимает никаких  параметров. В качестве значения этой переменной присваивается лямбда-выражение. Это лямбда-выражение должно соответствовать делегату Message - оно тоже  не принимает никаких параметров, поэтому слева от лямбда-оператора  идут пустые скобки. А справа от лямбда-оператора идет выполняемое выражение - <code>Console.WriteLine(""Hello"")</code></p> <p>Затем в программе можно вызывать эту переменную как метод.</p> <p>Если лямбда-выражение содержит несколько действий, то они помещаются в фигурные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_843948""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message hello = () =&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write(</code><code class=""c# string"">""Hello ""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""World""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello World</code></div></div></td></tr></tbody></table></div></div> <p>Выше мы определили переменную hello, которая представляет делегат Message. Но начиная с версии <span class=""b"">C# 10</span> мы можем применять неявную типизацию   (определение переменной с помощью оператора <span class=""b"">var</span>) при определении лямбда-выражения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_267957""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var hello = () =&gt; Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">hello();       </code><code class=""c# comments"">// Hello</code></div></div></td></tr></tbody></table></div></div> <p>Но какой тип в данном случае представляет переменная hello?  При неявной типизации  компилятор сам пытается сопоставить лямбда-выражение на основе его опеределения с каким-нибудь делегатом.  Например, выше определенное лямбда-выражение hello по умолчанию компилятор будет рассматривать как переменную встроенного делегата <span class=""b"">Action</span>, который не принимает  никаких параметров и ничего не возвращает.</p> <h3>Параметры лямбды</h3> <p>При определении списка параметров мы можем не указывать для них тип данных:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_48453""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation sum = (x, y) =&gt; Console.WriteLine($</code><code class=""c# string"">""{x} + {y} = {x + y}""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">sum(1, 2);       </code><code class=""c# comments"">// 1 + 2 = 3</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">sum(22, 14);    </code><code class=""c# comments"">// 22 + 14 = 36</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае компилятор видит, что лямбда-выражение sum представляет тип Operation, а значит оба параметра лямбды представляют тип <code>int</code>.  Поэтому никак проблем не возникнет.</p> <p>Однако если мы применяем неявную типизацию, то у компилятора могут возникнуть трудности, чтобы вывести тип делегата для лямбда-выражения, например, в следующем случае</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_805313""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sum = (x, y) =&gt; Console.WriteLine($</code><code class=""c# string"">""{x} + {y} = {x + y}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// ! Ошибка</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае можно указать тип параметров</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_685497""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sum = (</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; Console.WriteLine($</code><code class=""c# string"">""{x} + {y} = {x + y}""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">sum(1, 2);       </code><code class=""c# comments"">// 1 + 2 = 3</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">sum(22, 14);    </code><code class=""c# comments"">// 22 + 14 = 36</code></div></div></td></tr></tbody></table></div></div> <p>Если лямбда имеет один параметр, для которого не требуется указывать тип данных, то скобки можно опустить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_18024""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">PrintHandler print = message =&gt; Console.WriteLine(message);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">print(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);         </code><code class=""c# comments"">// Hello</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">print(</code><code class=""c# string"">""Welcome""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// Welcome</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">PrintHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div></div></td></tr></tbody></table></div></div> <p>Начиная с C# 12 параметры лямбда-выражений могут иметь значения по умолчанию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_934124""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var welcome = (</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">)=&gt; Console.WriteLine(message);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">welcome(</code><code class=""c# string"">""hello world""</code><code class=""c# plain"">); </code><code class=""c# comments"">// hello world</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">welcome();              </code><code class=""c# comments"">// hello</code></div></div></td></tr></tbody></table></div></div> <h3>Возвращение результата</h3> <p>Лямбда-выражение может возвращать результат. Возвращаемый результат можно указать после лямбда-оператора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_910409""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sum = (</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; x + y;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">sumResult = sum(4, 5);                  </code><code class=""c# comments"">// 9</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(sumResult);               </code><code class=""c# comments"">// 9</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Operation multiply = (x, y) =&gt; x * y;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">multiplyResult = multiply(4, 5);        </code><code class=""c# comments"">// 20</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(multiplyResult);          </code><code class=""c# comments"">// 20</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>Если лямбда-выражение содержит несколько выражений (или одно выражение в фигурных скобках), тогда нужно использовать оператор <span class=""b"">return</span>, как в обычных методах:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_760211""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var subtract = (</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(x &gt; y) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">x - y;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">y - x;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = subtract(10, 6);  </code><code class=""c# comments"">// 4 </code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(result1);     </code><code class=""c# comments"">// 4</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = subtract(-10, 6);  </code><code class=""c# comments"">// 16</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(result2);      </code><code class=""c# comments"">// 16</code></div></div></td></tr></tbody></table></div></div> <h3>Добавление и удаление действий в лямбда-выражении</h3> <p>Поскольку лямбда-выражение представляет делегат, тот как и в делегат, в переменную, которая представляет лямбда-выражение  можно добавлять методы и другие лямбды:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_383327""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var hello = () =&gt; Console.WriteLine(</code><code class=""c# string"">""METANIT.COM""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var message = () =&gt; Console.Write(</code><code class=""c# string"">""Hello ""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">message += () =&gt; Console.WriteLine(</code><code class=""c# string"">""World""</code><code class=""c# plain"">); </code><code class=""c# comments"">// добавляем анонимное лямбда-выражение</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">message += hello;   </code><code class=""c# comments"">// добавляем лямбда-выражение из переменной hello</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">message += Print;   </code><code class=""c# comments"">// добавляем метод</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">message();</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""--------------""</code><code class=""c# plain"">); </code><code class=""c# comments"">// для разделения вывода</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">message -= Print;   </code><code class=""c# comments"">// удаляем метод</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">message -= hello;   </code><code class=""c# comments"">// удаляем лямбда-выражение из переменной hello</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# plain"">message?.Invoke();  </code><code class=""c# comments"">// на случай, если в message больше нет действий</code></div><div class=""line number15 index14 alt2""> </div><div class=""line number16 index15 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine(</code><code class=""c# string"">""Welcome to C#""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p></p> <div class=""console""> <pre class=""consoletext"">Hello World METANIT.COM Welcome to C# -------------- Hello World </pre> </div> <h3>Лямбда-выражение как аргумент метода</h3> <p>Как и делегаты, лямбда-выражения можно передавать параметрам метода, которые представляют делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_491158""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] integers = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// найдем сумму чисел больше 5</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = Sum(integers, x =&gt; x &gt; 5);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(result1); </code><code class=""c# comments"">// 30</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// найдем сумму четных чисел</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = Sum(integers, x =&gt; x % 2 == 0);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(result2);  </code><code class=""c# comments"">//20</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Sum(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers, IsEqual func)</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">result = 0;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(func(i))</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">result += i;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""> </div><div class=""line number22 index21 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">IsEqual(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x);</code></div></div></td></tr></tbody></table></div></div> <p>Метод Sum принимает в качестве параметра массив чисел и делегат IsEqual и возвращает сумму чисел массива в виде объекта int.  В цикле проходим по всем числам и складываем их. Причем складываем только те числа, для которых делегат <code>IsEqual func</code>  возвращает true. То есть делегат IsEqual здесь фактически задает условие, которому должны соответствовать значения массива. Но на момент написания метода  Sum нам неизвестно, что это за условие.</p> <p>При вызове метода Sum ему передается массив и лямбда-выражение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_542816""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = Sum(integers, x =&gt; x &gt; 5);</code></div></div></td></tr></tbody></table></div></div> <p>То есть параметр x здесь будет представлять число, которое передается в делегат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_337315""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(func(i))</code></div></div></td></tr></tbody></table></div></div> <p>А выражение <code>x &gt; 5</code> представляет условие, которому должно соответствовать число. Если число соответствует этому условию, то  лямбда-выражение возвращает true, а переданное число складывается с другими числами.</p> <p>Подобным образом работает второй вызов метода Sum, только здесь уже идет проверка числа на четность, то есть если остаток от деления на 2 равен нулю:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_437502""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = Sum(integers, x =&gt; x % 2 == 0);</code></div></div></td></tr></tbody></table></div></div> <h3>Лямбда-выражение как результат метода</h3> <p>Метод также может возвращать лямбда-выражение. В этом случае возвращаемым типом метода выступает делегат, которому соответствует возвращаемое лямбда-выражение.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_239224""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Operation operation = SelectOperation(OperationType.Add);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 14</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">operation = SelectOperation(OperationType.Subtract);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 6</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">operation = SelectOperation(OperationType.Multiply);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(operation(10, 4));    </code><code class=""c# comments"">// 40</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">Operation SelectOperation(OperationType opType)</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(opType)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">OperationType.Add: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">(x, y) =&gt; x + y;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">OperationType.Subtract: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">(x, y) =&gt; x - y;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">(x, y) =&gt; x * y;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# keyword"">enum</code> <code class=""c# plain"">OperationType</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Add, Subtract, Multiply</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае метод SelectOperation() в качестве параметра принимает перечисление типа OperationType. Это перечисление хранит три константы,  каждая из которых соответствует определенной арифметической операции. И в самом методе в зависимости от значения параметра возвращаем  определенное лямбда-выражение.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>События</h2>   <p><span class=""b"">События</span> сигнализируют системе о том, что произошло определенное  действие. И если нам надо отследить эти действия, то как раз мы можем применять события.</p> <p>Например, возьмем следующий класс, который описывает банковский счет:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_18897""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// сумма на счете</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// в конструкторе устанавливаем начальную сумму на счете</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; Sum = sum;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// добавление средств на счет</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Put(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; Sum += sum;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// списание средств со счета</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(Sum &gt;= sum)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Sum -= sum;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В конструкторе устанавливаем начальную сумму, которая хранится в свойстве Sum. С помощью метода Put мы можем добавить средства на счет, а с помощью метода Take,  наоборот, снять деньги со счета. Попробуем использовать класс в программе - создать счет, положить и снять с него деньги:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_214697""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account account = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">account.Put(20);    </code><code class=""c# comments"">// добавляем на счет 20</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма на счете: {account.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">account.Take(70);   </code><code class=""c# comments"">// пытаемся снять со счета 70</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма на счете: {account.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">account.Take(180);  </code><code class=""c# comments"">// пытаемся снять со счета 180</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма на счете: {account.Sum}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Сумма на счете: 120 Сумма на счете: 50 Сумма на счете: 50 </pre> </div> <p>Все операции работают как и положено. Но что если мы хотим уведомлять пользователя о результатах его операций. Мы могли бы, например, для этого изменить метод  Put следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_193267""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Put(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)    </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Sum += sum;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""На счет поступило: {sum}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Казалось, теперь мы будем извещены об операции, увидев соответствующее сообщение на консоли. Но тут есть ряд замечаний. На момент определения класса  мы можем точно не знать, какое действие мы хотим произвести в методе Put в ответ на добавление денег. Это может вывод на консоль, а может быть мы захотим  уведомить пользователя по email или sms. Более того мы можем создать отдельную библиотеку классов, которая будет содержать этот класс, и  добавлять ее в другие проекты. И уже из этих проектов решать, какое действие должно выполняться. Возможно, мы захотим использовать класс Account в  графическом приложении и выводить при добавлении на счет в графическом сообщении, а не консоль. Или нашу библиотеку классов будет использовать другой разработчик, у которого  свое мнение, что именно делать при добавлении на счет. И все эти вопросы мы можем решить, используя события.</p> <h3>Определение и вызов событий</h3> <p>События объявляются в классе с помощью ключевого слова <span class=""b"">event</span>, после которого указывается тип делегата, который представляет событие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_536576""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">event</code> <code class=""c# plain"">AccountHandler Notify;</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае вначале определяется делегат AccountHandler, который принимает один параметр типа string. Затем с помощью ключевого слова <span class=""b"">event</span>  определяется событие с именем Notify, которое представляет делегат AccountHandler. Название для события может быть произвольным, но в любом случае оно должно представлять некоторый делегат.</p> <p>Определив событие, мы можем его вызвать в программе как метод, используя имя события:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_673441""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Notify(</code><code class=""c# string"">""Произошло действие""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку событие Notify представляет делегат AccountHandler, который принимает один параметр типа string - строку, то при вызове события нам надо передать в  него строку.</p> <p>Однако при вызове событий мы можем столкнуться с тем, что событие равно null в случае, если для его не определен обработчик. Поэтому при вызове события лучше его всегда  проверять на null. Например, так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_10485""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(Notify !=</code><code class=""c# keyword"">null</code><code class=""c# plain"">) Notify(</code><code class=""c# string"">""Произошло действие""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Или так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_317123""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Notify?.Invoke(</code><code class=""c# string"">""Произошло действие""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае поскольку событие представляет делегат, то мы можем его вызвать с помощью метода <span class=""b"">Invoke()</span>, передав в него необходимые значения  для параметров.</p> <p>Объединим все вместе и создадим и вызовем событие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_800721""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">AccountHandler? Notify;              </code><code class=""c# comments"">// 1.Определение события</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; Sum = sum;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Put(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Sum += sum;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Notify?.Invoke($</code><code class=""c# string"">""На счет поступило: {sum}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 2.Вызов события </code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(Sum &gt;= sum)</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Sum -= sum;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Notify?.Invoke($</code><code class=""c# string"">""Со счета снято: {sum}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 2.Вызов события</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Notify?.Invoke($</code><code class=""c# string"">""Недостаточно денег на счете. Текущий баланс: {Sum}""</code><code class=""c# plain"">); ;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь с помощью события Notify мы уведомляем систему о том, что были добавлены средства и о том, что средства сняты со счета или на счете недостаточно средств.</p> <h3>Добавление обработчика события</h3> <p>С событием может быть связан один или несколько обработчиков. Обработчики событий - это именно то, что выполняется при вызове событий. Нередко в качестве обработчиков событий применяются  методы. Каждый обработчик событий по списку параметров и возвращаемому типу должен соответствовать делегату, который представляет событие. Для добавления обработчика  события применяется операция <span class=""b"">+=</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_603117""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Notify += обработчик события;</code></div></div></td></tr></tbody></table></div></div> <p>Определим обработчики для события Notify, чтобы получить в программе нужные уведомления:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_879163""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account account = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">account.Notify += DisplayMessage;   </code><code class=""c# comments"">// Добавляем обработчик для события Notify</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">account.Put(20);    </code><code class=""c# comments"">// добавляем на счет 20</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма на счете: {account.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">account.Take(70);   </code><code class=""c# comments"">// пытаемся снять со счета 70</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма на счете: {account.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">account.Take(180);  </code><code class=""c# comments"">// пытаемся снять со счета 180</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма на счете: {account.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">DisplayMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message) =&gt; Console.WriteLine(message);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в качестве обработчика используется метод DisplayMessage, который соответствует по списку параметров и возвращаемому типу делегату AccountHandler.  В итоге при вызове события <code>Notify?.Invoke()</code> будет вызываться метод DisplayMessage, которому для параметра message будет передаваться строка, которая передается  в <code>Notify?.Invoke()</code>. В DisplayMessage просто выводим полученное от события сообщение, но можно было бы определить любую логику.</p> <p>Если бы в данном случае обработчик не был бы установлен, то при вызове события <code>Notify?.Invoke()</code> ничего не происходило, так как событие Notify было бы равно null.</p> <p>Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">На счет поступило: 20 Сумма на счете: 120 Со счета снято: 70 Сумма на счете: 50 Недостаточно денег на счете. Текущий баланс: 50 Сумма на счете: 50 </pre> </div> <p>Теперь мы можем выделить класс Account в отдельную библиотеку классов и добавлять в любой проект.</p> <h3>Добавление и удаление обработчиков</h3> <p>Для одного события можно установить несколько обработчиков и потом в любой момент времени их удалить. Для удаления обработчиков применяется операция  <span class=""b"">-=</span>. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_478552""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account account = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">account.Notify += DisplayMessage;       </code><code class=""c# comments"">// добавляем обработчик DisplayMessage</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">account.Notify += DisplayRedMessage;    </code><code class=""c# comments"">// добавляем обработчик DisplayRedMessage</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">account.Put(20);    </code><code class=""c# comments"">// добавляем на счет 20</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">account.Notify -= DisplayRedMessage;     </code><code class=""c# comments"">// удаляем обработчик DisplayRedMessage</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">account.Put(50);    </code><code class=""c# comments"">// добавляем на счет 50</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">DisplayMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message) =&gt; Console.WriteLine(message);</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">DisplayRedMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// Устанавливаем красный цвет символов</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.ForegroundColor = ConsoleColor.Red;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(message);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// Сбрасываем настройки цвета</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.ResetColor();</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">На счет поступило: 20 <span style=""color:red;"">На счет поступило: 20</span> На счет поступило: 50 </pre> </div> <p>В качестве обработчиков могут использоваться не только обычные методы, но также делегаты, анонимные методы и лямбда-выражения.  Использование делегатов и методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_161834""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account acc = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// установка делегата, который указывает на метод DisplayMessage</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">acc.Notify += </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account.AccountHandler(DisplayMessage);</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// установка в качестве обработчика метода DisplayMessage</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">acc.Notify += DisplayMessage;       </code><code class=""c# comments"">// добавляем обработчик DisplayMessage</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">acc.Put(20);    </code><code class=""c# comments"">// добавляем на счет 20</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">DisplayMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message) =&gt; Console.WriteLine(message);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае разницы между двумя обработчиками никакой не будет.</p> <p>Установка в качестве обработчика анонимного метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_397026""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account acc = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">acc.Notify += </code><code class=""c# keyword"">delegate</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">mes)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(mes);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">acc.Put(20);</code></div></div></td></tr></tbody></table></div></div> <p>Установка в качестве обработчика лямбда-выражения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_630777""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account account = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">account.Notify += message =&gt; Console.WriteLine(message);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">account.Put(20);</code></div></div></td></tr></tbody></table></div></div> <h3>Управление обработчиками</h3> <p>С помощью специальных акссесоров <span class=""b"">add/remove</span> мы можем управлять добавлением и удалением обработчиков. Как правило, подобная функциональность  редко требуется, но тем не менее мы ее можем использовать. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_685324""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div><div class=""line number37 index36 alt2"">37</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">AccountHandler? notify;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">AccountHandler Notify</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">add</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">notify += value;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{value.Method.Name} добавлен""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">remove</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">notify -= value;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{value.Method.Name} удален""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; Sum = sum;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Put(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Sum += sum;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">notify?.Invoke($</code><code class=""c# string"">""На счет поступило: {sum}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 2.Вызов события </code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(Sum &gt;= sum)</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Sum -= sum;</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">notify?.Invoke($</code><code class=""c# string"">""Со счета снято: {sum}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 2.Вызов события</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">notify?.Invoke($</code><code class=""c# string"">""Недостаточно денег на счете. Текущий баланс: {Sum}""</code><code class=""c# plain"">); ;</code></div><div class=""line number35 index34 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number36 index35 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number37 index36 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь опредление события разбивается на две части. Вначале просто определяется переменная делегата, через которую мы можем вызывать связанные обработчики:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_957165""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">AccountHandler notify;</code></div></div></td></tr></tbody></table></div></div> <p>Во второй части определяем акссесоры add и remove. Аксессор <span class=""b"">add</span> вызывается при добавлении обработчика, то есть при операции +=.  Добавляемый обработчик доступен через ключевое слово <span class=""b"">value</span>. Здесь мы можем получить информацию об обработчике (например,  имя метода через value.Method.Name) и определить некоторую логику. В данном случае для простоты просто выводится сообщение на консоль:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_91110""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">add</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">notify += value;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{value.Method.Name} добавлен""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Блок remove вызывается при удалении обработчика. Аналогично здесь можно задать некоторую дополнительную логику:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_166051""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">remove</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">notify -= value;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{value.Method.Name} удален""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Внутри класса событие вызывается также через переменную notify. Но для добавления и удаления обработчиков в программе используется как раз Notify:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_184113""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account acc = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">acc.Notify += DisplayMessage;       </code><code class=""c# comments"">// добавляем обработчик DisplayMessage</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">acc.Put(20);    </code><code class=""c# comments"">// добавляем на счет 20</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">acc.Notify -= DisplayMessage;     </code><code class=""c# comments"">// удаляем обработчик DisplayMessage</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">acc.Put(20);    </code><code class=""c# comments"">// добавляем на счет 20</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">DisplayMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message) =&gt; Console.WriteLine(message);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">DisplayMessage добавлен На счет поступило: 20 DisplayMessage удален </pre> </div> <h3>Передача данных события</h3> <p>Нередко при возникновении события обработчику события требуется передать некоторую информацию о событии. Например, добавим и в нашу программу  новый класс <span class=""b"">AccountEventArgs</span> со следующим кодом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_779553""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">AccountEventArgs</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// Сообщение</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Message{</code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// Сумма, на которую изменился счет</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum {</code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">AccountEventArgs(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Message = message;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Sum = sum;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Данный класс имеет два свойства: Message - для хранения выводимого сообщения и Sum - для хранения суммы, на которую изменился счет.</p> <p>Теперь применим класс AccoutEventArgs, изменив класс Account следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_194852""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Account</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">AccountHandler(Account sender, AccountEventArgs e);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">AccountHandler? Notify;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Sum { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Account(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum) =&gt; Sum = sum;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Put(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Sum += sum;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Notify?.Invoke(</code><code class=""c# keyword"">this</code><code class=""c# plain"">, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">AccountEventArgs($</code><code class=""c# string"">""На счет поступило {sum}""</code><code class=""c# plain"">, sum));</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Take(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum)</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(Sum &gt;= sum)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Sum -= sum;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Notify?.Invoke(</code><code class=""c# keyword"">this</code><code class=""c# plain"">, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">AccountEventArgs($</code><code class=""c# string"">""Сумма {sum} снята со счета""</code><code class=""c# plain"">, sum));</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Notify?.Invoke(</code><code class=""c# keyword"">this</code><code class=""c# plain"">, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">AccountEventArgs(</code><code class=""c# string"">""Недостаточно денег на счете""</code><code class=""c# plain"">, sum));</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>По сравнению с предыдущей версией класса Account здесь изменилось только количество параметров у делегата и соответственно количество параметров  при вызове события. Теперь делегат AccountHandler в качестве первого параметра принимает объект, который вызвал событие, то есть текущий объект Account.  А в качестве второго параметра принимает объект AccountEventArgs, который хранит информацию о событии, получаемую через конструктор.</p> <p>Теперь изменим основную программу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_175194""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Account acc = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Account(100);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">acc.Notify += DisplayMessage;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">acc.Put(20);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">acc.Take(70);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">acc.Take(150);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">DisplayMessage(Account sender, AccountEventArgs e)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Сумма транзакции: {e.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(e.Message);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Текущая сумма на счете: {sender.Sum}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>По сравнению с предыдущим вариантом здесь мы только изменяем количество параметров и их использования в обработчике DisplayMessage. Благодаря первому параметру в методе  можно получить информацию об отправителе события - счете, с которым производится операция. А через второй параметр можно получить инфомацию о состоянии операции.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Ковариантность и контравариантность делегатов</h2>   <p>Делегаты могут быть ковариантными и контравариантными. <span class=""b"">Ковариантность</span> делегата  предполагает, что возвращаемым типом может быть производный тип. <span class=""b"">Контрвариантность</span>  делегата предполагает, что типом параметра может быть более универсальный тип.</p> <p>Рассмотрим ковариантность и контравариантность на примере следующих классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_369698""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; Text = text;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Message: {Text}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">EmailMessage: Message</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text): </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Email: {Text}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">SmsMessage : Message</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">SmsMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) : </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine($</code><code class=""c# string"">""Sms: {Text}""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Message представляет некоторое сообщение и определяет свойство Text для хранения текста сообщения, который устанавливается  через конструктор. А в методе Print сообщение выводится на консоль. Класс EmailMessage представляет email-сообщение, а SmsMessage - смс-сообщение, и  оба класса является производными от Message.</p> <h3>Ковариантность</h3> <p>Ковариантность позволяет передать делегату метод, возвращаемый тип которого является производный от возвращаемого типа делегат.  То есть если возвращаемый тип делегата Message, то у метод может иметь в качестве возвращаемого типа класс EmailMessage:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_661796""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// делегату с базовым типом передаем метод с производным типом</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">MessageBuilder messageBuilder = WriteEmailMessage; </code><code class=""c# comments"">// ковариантность</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Message message = messageBuilder(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">message.Print();    </code><code class=""c# comments"">// Email: Hello</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">EmailMessage WriteEmailMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(text);</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# plain"">Message MessageBuilder(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь делегат MessageBuilder возвращает объект Message. Однако благодаря ковариантности данный делегат может указывать на метод,  который возвращает объект производного типа, например, на метод WriteEmailMessage.</p> <h3>Контрвариантность</h3> <p>Контрвариантность позволяет присваить делегату метод, тип параметра которого является более универсальным по отношению к типу параметра  делегата. Например, возьмем выше определенные классы Message и EmailMessage и используем их в следующем примере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_372372""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// делегату с производным типом передаем метод с базовым типом</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">EmailReceiver emailBox = ReceiveMessage; </code><code class=""c# comments"">// контравариантность</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">emailBox(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Welcome""</code><code class=""c# plain"">));  </code><code class=""c# comments"">// Email: Welcome</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">ReceiveMessage(Message message) =&gt; message.Print();</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">EmailReceiver(EmailMessage message);</code></div></div></td></tr></tbody></table></div></div> <p>Несмотря на то, что делегат в качестве параметра принимает объект EmailMessage, ему можно присвоить метод, у которого параметр представляет базовый тип Message.  Может показаться на первый взгляд, что здесь есть некоторое противоречие, то есть использование более универсального тип вместо более  производного. Однако в реальности в делегат при его вызове мы все равно можем передать только объекты типа EmailMessage, а любой объект типа EmailMessage является объектом типа Message, который используется в методе.</p> <h3>Ковариантность и контравариантность в обобщенных делегатах</h3> <p>Обобщенные делегаты также могут быть ковариантными и контравариантными, что дает нам больше гибкости в их использовании.</p> <h4>Ковариантность</h4> <p>Например, объявим и используем <span class=""b"">ковариантный обобщенный делегат</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_469918""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// возвращает EmailMessage - более конкретный тип</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">MessageBuilder&lt;EmailMessage&gt; EmailMessageWriter = (</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(text);</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// возвращает более общий тип Message</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">MessageBuilder&lt;Message&gt; messageBuilder = EmailMessageWriter;     </code><code class=""c# comments"">// ковариантность</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Message message = messageBuilder(</code><code class=""c# string"">""hello Tom""</code><code class=""c# plain"">); </code><code class=""c# comments"">// вызов делегата</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">message.Print(); </code><code class=""c# comments"">// Email: hello Tom</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# plain"">T MessageBuilder&lt;</code><code class=""c# keyword"">out</code> <code class=""c# plain"">T&gt;(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text);</code></div></div></td></tr></tbody></table></div></div> <p>Благодаря использованию <span class=""b"">out</span> мы можем присвоить делегату типа <code>MessageBuilder&lt;Message&gt;</code> (более общий тип) делегат типа  <code>MessageBuilder&lt;EmailMessage&gt;</code> (более конкретный тип).</p> <h4>Контравариантность</h4> <p>Рассмотрим <span class=""b"">контравариантный обобщенный делегат</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_470516""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// принимает объект более общего типа</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">MessageReceiver&lt;Message&gt; messageReceiver = (Message message) =&gt; message.Print();</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// принимает объект более конкретного типа</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">MessageReceiver&lt;EmailMessage&gt; emailMessageReceiver = messageReceiver; </code><code class=""c# comments"">// контравариантность</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">messageReceiver(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello World!""</code><code class=""c# plain"">));       </code><code class=""c# comments"">// Message: Hello World!</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">messageReceiver(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Hello World!""</code><code class=""c# plain"">));  </code><code class=""c# comments"">// Email: Hello World!</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MessageReceiver&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T&gt;(T message);</code></div></div></td></tr></tbody></table></div></div> <p>Использование ключевого слова <span class=""b"">in</span> позволяет присвоить делегату с производным типом (<code>MessageReceiver&lt;EmailMessage&gt;</code>)  делегат с базовым типом (<code>MessageReceiver&lt;Message&gt;</code>).</p> <p>Как и в случае с обобщенными интерфейсами параметр ковариантного типа применяется только к типу значения, которые возвращается делегатом. А  параметр контравариантного типа применяется только к параметрам делегата.</p> <p>То есть, если грубо обобщить, <span class=""b"">ковариантность</span> - это от более производного к более общему типу (EmailMessage -&gt; Message),  а <span class=""b"">контрвариантность</span> - от более общего к более производному типу (Message -&gt; EmailMessage).</p> <h4>Совмещение ковариантности и контрвариантности</h4> <p>Причем делегат может одновременно использовать оба оператора: <span class=""b"">in</span> и <span class=""b"">out</span>. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_456471""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">MessageConverter&lt;Message, EmailMessage&gt; toEmailConverter = (Message message) =&gt; </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(message.Text);</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">MessageConverter&lt;SmsMessage, Message&gt; converter = toEmailConverter;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Message message = converter(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">SmsMessage(</code><code class=""c# string"">""Hello work""</code><code class=""c# plain"">));</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">message.Print();    </code><code class=""c# comments"">// Email: Hello work</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# plain"">E MessageConverter&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">M, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">E&gt;(M message);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь делегат MessageConverter представляет условное действие, которое конвертирует объект типа M в тип E.</p> <p>В программе определена переменная converter, которая представляет тип <code>MessageConverter&lt;SmsMessage, Message&gt;</code> - то есть конвертер из типа  SmsMessage в любой тип Message, грубо говоря преобразует смс в любой другой тип сообщения.</p> <p>Этой переменной можно передать действие - toEmailConverter, которое из сообщений любого типа создает объект Email-сообщения. Здесь применяется контравариантность: для параметра вместо производного типа SmsMessage  применяется базовый тип Message. И также есть ковариантность: вместо возвращаемого типа Message используется производный тип EmailMessage.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.18.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Делегаты Action, Predicate и Func</h2>   <p>В .NET есть несколько встроенных делегатов, которые используются в различных ситуациях. И наиболее используемыми, с которыми часто приходится сталкиваться, являются  <span class=""b"">Action</span>, <span class=""b"">Predicate</span> и <span class=""b"">Func</span>.</p> <h3>Action</h3> <p>Делегат <span class=""b"">Action</span> представляет некоторое действие, которое ничего не возвращает, то есть в качестве возвращаемого типа имеет  тип  <span class=""b"">void</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_289203""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Action()</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Action&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T&gt;(T obj)</code></div></div></td></tr></tbody></table></div></div> <p>Данный делегат имеет ряд перегруженных версий. Каждая версия принимает разное число параметров: от <code>Action&lt;in T1&gt;</code> до  <code>Action&lt;in T1, in T2,....in T16&gt;</code>. Таким образом можно передать до 16 значений в метод.</p> <p>Как правило, этот делегат передается в качестве параметра метода и предусматривает вызов определенных действий в ответ на произошедшие действия. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_17226""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DoOperation(10, 6, Add);        </code><code class=""c# comments"">// 10 + 6 = 16</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">DoOperation(10, 6, Multiply);   </code><code class=""c# comments"">// 10 * 6 = 60</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b, Action&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; op) =&gt; op(a, b);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Add(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; Console.WriteLine($</code><code class=""c# string"">""{x} + {y} = {x + y}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">y) =&gt; Console.WriteLine($</code><code class=""c# string"">""{x} * {y} = {x * y}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <h3>Predicate</h3> <p>Делегат <code>Predicate&lt;T&gt;</code> принимает один параметр и возвращает значение типа <span class=""b"">bool</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_728558""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">Predicate&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T&gt;(T obj);</code></div></div></td></tr></tbody></table></div></div> <p>Как правило, используется для сравнения, сопоставления некоторого объекта T определенному условию.  В качестве выходного результата возвращается значение true, если условие соблюдено, и false, если не соблюдено:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_549081""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Predicate&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; isPositive = (</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x) =&gt; x &gt; 0;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(isPositive(20));</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(isPositive(-20));</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае возвращается true или false в зависимости от того, больше нуля число или нет.</p> <h3>Func</h3> <p>Еще одним распространенным делегатом является <span class=""b"">Func</span>. Он возвращает результат действия и может принимать параметры.  Он также имеет различные формы: от <code>Func&lt;out T&gt;()</code>, где T - тип возвращаемого значения, до <code>Func&lt;in T1, in T2,...in T16, out TResult&gt;()</code>,  то есть может принимать до 16 параметров.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_246363""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">TResult Func&lt;</code><code class=""c# keyword"">out</code> <code class=""c# plain"">TResult&gt;()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">TResult Func&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">TResult&gt;(T arg)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">TResult Func&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T1, </code><code class=""c# keyword"">in</code> <code class=""c# plain"">T2, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">TResult&gt;(T1 arg1, T2 arg2)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">TResult Func&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T1, </code><code class=""c# keyword"">in</code> <code class=""c# plain"">T2, </code><code class=""c# keyword"">in</code> <code class=""c# plain"">T3, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">TResult&gt;(T1 arg1, T2 arg2, T3 arg3)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">TResult Func&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T1, </code><code class=""c# keyword"">in</code> <code class=""c# plain"">T2, </code><code class=""c# keyword"">in</code> <code class=""c# plain"">T3, </code><code class=""c# keyword"">in</code> <code class=""c# plain"">T4, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4)</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">//...........................................</code></div></div></td></tr></tbody></table></div></div> <p>Данный делегат также часто используется в качестве параметра в методах:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_367572""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">result1 = DoOperation(6, DoubleNumber); </code><code class=""c# comments"">// 12</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(result1);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result2 = DoOperation(6, SquareNumber); </code><code class=""c# comments"">// 36</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(result2);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoOperation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n, Func&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; operation) =&gt; operation(n);</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">DoubleNumber(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n) =&gt; 2 * n;</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">SquareNumber(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n) =&gt; n * n;</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>DoOperation()</code> в качестве параметра принимает делегат <code>Func&lt;int, int&gt;</code>, то есть ссылку на метод,  который принимает число int и возвращает также значение int.</p> <p>При первом вызове метода <code>DoOperation()</code> ему передается ссылка на метод DoubleNumber, который увеличивает число в два раза.  Во втором случае передается метод SquareNumber - опять же метод, который принимает параметр типа int и возвращает результат в виде значения int.</p> <p>Другой пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_27720""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Func&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; createString = (a, b) =&gt; $</code><code class=""c# string"">""{a}{b}""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(createString(1, 5));  </code><code class=""c# comments"">// 15</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(createString(3, 5));  </code><code class=""c# comments"">// 35</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменная createString представляет лямбда-выражение, которое принимает два числа int и возвращает строку, то есть представляет делегат <code>Func&lt;int, int, string&gt;</code>.</p>     </div></body></html>",
               @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Замыкания</h2>   <p><span class=""b"">Замыкание</span> (closure) представляет объект функции, который запоминает свое лексическое окружение даже в том случае,  когда она выполняется вне своей области видимости.</p> <p>Технически замыкание включает три компонента:</p> <ul> <li><p>внешняя функция, которая определяет некоторую область видимости и в которой определены некоторые переменные и параметры - лексическое окружение</p></li> <li><p>переменные и параметры (лексическое окружение), которые определены во внешней функции</p></li> <li><p>вложенная функция, которая использует переменные и параметры внешней функции</p></li> </ul> <p>В языке C# реализовать замыкания можно разными способами - с помощью локальных функций и лямбда-выражений.</p> <p>Рассмотрим создание замыканий через локальные функции:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_312742""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var fn = Outer();   </code><code class=""c# comments"">// fn = Inner, так как метод Outer возвращает функцию Inner</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// вызываем внутреннюю функцию Inner</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 6</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 7</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 8</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Action Outer()  </code><code class=""c# comments"">// метод или внешняя функция</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;  </code><code class=""c# comments"">// лексическое окружение - локальная переменная</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Inner()    </code><code class=""c# comments"">// локальная функция</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">x++;        </code><code class=""c# comments"">// операции с лексическим окружением</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(x);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Inner;   </code><code class=""c# comments"">// возвращаем локальную функцию</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод <code>Outer</code> в качестве возвращаемого типа имеет тип <code>Action</code>, то есть метод возвратить функцию, которая не  принимает параметров и имеет тип void.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_991702""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Action Outer()</code></div></div></td></tr></tbody></table></div></div> <p>Внутри метода Outer определена переменная x - это и есть лексическое окружение для внутренней функции:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_850223""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div></div></td></tr></tbody></table></div></div> <p>Также внутри метода Outer определена внутренняя функция - локальная функция Inner, которая обращается к своему лексическому окружению - переменной x - увеличивает ее значение на единицу и выводит на консоль:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_456485""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">Inner()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">x++;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(x);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Эта локальная функция возвращается методом Outer:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_982246""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# plain"">Inner;</code></div></div></td></tr></tbody></table></div></div> <p>В программе вызываем метод Outer и получаем в переменную <code>fn</code> локальную функцию Inner:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_39333""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var fn = Outer();</code></div></div></td></tr></tbody></table></div></div> <p>Переменная <code>fn</code> и представляет собой замыкание, то есть объединяет две вещи: функцию и  окружение, в котором функция была создана. И несмотря на то, что мы получили локальную функцию и можем ее вызывать вне ее метода, в котором она определена, тем не менее она запомнила свое лексическое  окружение и может к нему обращаться и изменять, что мы увидим по консольному выводу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_591323""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 6</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 7</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 8</code></div></div></td></tr></tbody></table></div></div> <h3>Реализация с помощью лямбда-выражений</h3> <p>С помощью лямбд можно сократить определение замыкания:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_259235""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var outerFn = () =&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 10;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">var innerFn = () =&gt; Console.WriteLine(++x);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">innerFn;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">var fn = outerFn();   </code><code class=""c# comments"">// fn = innerFn, так как outerFn возвращает innerFn</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// вызываем innerFn</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 11</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 12</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">fn();   </code><code class=""c# comments"">// 13</code></div></div></td></tr></tbody></table></div></div> <h3>Применение параметров</h3> <p>Кроме внешних переменных к лексическому окружению также относятся параметры окружающего метода. Рассмотрим использование параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_299624""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var fn = Multiply(5);  </code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(fn(5));   </code><code class=""c# comments"">// 25</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(fn(6));   </code><code class=""c# comments"">// 30</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(fn(7));   </code><code class=""c# comments"">// 35</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Operation Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Inner(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">m)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">n * m;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Inner;</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n);</code></div></div></td></tr></tbody></table></div></div> <p>Здесь внешняя функция - метод Multiply возвращает функцию, которая принимает число int и возвращает число int. Для этого определен делегат Operation,  который будет представлять возвращаемый тип:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_250524""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Operation(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n);</code></div></div></td></tr></tbody></table></div></div> <p>Хотя также можно было бы использовать встроенный делегат <code>Func&lt;int, int&gt;</code>.</p> <p>Вызов метода <code>Multiply()</code> возвращает локальную функцию, которая соответствует сигнатуре делегата Operation:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_458837""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">Inner(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">m)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">n * m;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Эта функция запоминает окружение, в котором она была создана, в частности, значение параметра n. Кроме того, сама принимает параметр и возвращает произведение  параметров n и m.</p> <p>В итоге при вызове метода Multiply определяется переменная fn, которая получает локальную функцию Inner и ее лексическое окружение - значение параметра n:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_807778""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var fn = Multiply(5);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае параметр n равен 5.</p> <p>При вызове локальной функции, например, в случае:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_20395""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(fn(6));   </code><code class=""c# comments"">// 30</code></div></div></td></tr></tbody></table></div></div> <p>Число 6 передается для параметра m локальной функции, которая возвращает произведение n и m, то есть 5 * 6 = 30.</p> <p>Также можно было бы сократить весь этот код с помощью лямбд:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_687702""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var multiply = (</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n) =&gt; (</code><code class=""c# keyword"">int</code> <code class=""c# plain"">m) =&gt; n * m; </code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var fn = multiply(5);  </code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(fn(5));   </code><code class=""c# comments"">// 25</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(fn(6));   </code><code class=""c# comments"">// 30</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(fn(7));   </code><code class=""c# comments"">// 35</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
            };
            if (form1Instance != null && comboBox6.SelectedIndex >= 0 && comboBox6.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox6.SelectedIndex;
                selectCombobox = 6;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }

        private async void comboBox7_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Pattern matching</h1><h2>Паттерн типов</h2>   <p><span class=""b"">Pattern matching</span> фактически выполняет сопоставление некоторого значения с некоторым шаблоном. И если  сопоставление прошло успешно, то выполняются определенные действия. Язык C# позволяет выполнять различные типы сопоставлений.</p> <p>Паттерн типов или <span class=""b"">type pattern</span> позволяет проверить некоторое значение на соответствие некоторому типу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_580713""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">значение </code><code class=""c# keyword"">is</code> <code class=""c# plain"">тип переменная_типа</code></div></div></td></tr></tbody></table></div></div> <p>Например, у нас есть следующие классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_568324""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Work() =&gt; Console.WriteLine(</code><code class=""c# string"">""Employee works""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Manager : Employee</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Work() =&gt; Console.WriteLine(</code><code class=""c# string"">""Manager works""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">IsOnVacation { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Employee представляет работника, а класс Manager - менеджера. Оба класса реализуют метод Work. Кроме того, класс Manager определяет свойство IsOnVacation.</p> <p>С помощью паттерна типов проверим, представляет ли объект Employee класс Manager:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_587006""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">UseEmployee(tom);   </code><code class=""c# comments"">// Manager works</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee emp)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(emp </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Manager manager &amp;&amp; manager.IsOnVacation == </code><code class=""c# keyword"">false</code><code class=""c# plain"">)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">manager.Work();</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Преобразование не допустимо""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в методе UseEmployee значение <code>emp</code> сопоставляется с типом Manager. То есть в данном случае в качестве шаблона выступает тип Manager.  Если сопоставление прошло успешно (то есть значение emp представляет тип Manager), в переменной manager оказывается объект emp.  И далее мы можем вызвать у него методы и свойства.</p> <p>Также мы можем использовать <span class=""b"">constant pattern</span> - сопоставление с некоторой константой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_219035""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var message = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// проверяем, соответствует ли значение message строке ""hello""</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(message </code><code class=""c# keyword"">is</code> <code class=""c# string"">""hello""</code><code class=""c# plain"">)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">   </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""hello""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Подобным образом, например, можно проверить значение на null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_241882""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee? bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee? tom = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">UseEmployee(bob);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">UseEmployee(tom);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee? emp)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(emp </code><code class=""c# keyword"">is</code> <code class=""c# plain"">not </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">emp.Work();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Кроме конструкции if сопоставление паттернов может применяться в конструкции switch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_638324""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">UseEmployee(tom);   </code><code class=""c# comments"">// Manager works</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">UseEmployee(bob);   </code><code class=""c# comments"">// Object is not manager</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee? emp)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(emp)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">Manager manager:</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">manager.Work();</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# keyword"">null</code><code class=""c# plain"">:</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Object is null""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Object is not manager""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>С помощью выражения <span class=""b"">when</span> можно вводить дополнительные условия в конструкцию case:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_322353""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager() { IsOnVacation = </code><code class=""c# keyword"">true</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager() { IsOnVacation = </code><code class=""c# keyword"">false</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">UseEmployee(tom);   </code><code class=""c# comments"">// Manager works</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">UseEmployee(bob);   </code><code class=""c# comments"">// Employee does not work</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee? emp)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(emp)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">Manager manager when !manager.IsOnVacation:</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">manager.Work();</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# keyword"">null</code><code class=""c# plain"">:</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Employee is null""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Employee does not work""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае опять же преобразуем объект emp в объект типа Manager и в случае удачного преобразования смотрим на значение свойства IsOnVacation:  если оно равно false, то выполняется данный блок case.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Pattern matching</h1><h2>Паттерн типов</h2>   <p><span class=""b"">Pattern matching</span> фактически выполняет сопоставление некоторого значения с некоторым шаблоном. И если  сопоставление прошло успешно, то выполняются определенные действия. Язык C# позволяет выполнять различные типы сопоставлений.</p> <p>Паттерн типов или <span class=""b"">type pattern</span> позволяет проверить некоторое значение на соответствие некоторому типу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_465278""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">значение </code><code class=""c# keyword"">is</code> <code class=""c# plain"">тип переменная_типа</code></div></div></td></tr></tbody></table></div></div> <p>Например, у нас есть следующие классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_814870""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Work() =&gt; Console.WriteLine(</code><code class=""c# string"">""Employee works""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Manager : Employee</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Work() =&gt; Console.WriteLine(</code><code class=""c# string"">""Manager works""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">IsOnVacation { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Employee представляет работника, а класс Manager - менеджера. Оба класса реализуют метод Work. Кроме того, класс Manager определяет свойство IsOnVacation.</p> <p>С помощью паттерна типов проверим, представляет ли объект Employee класс Manager:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_210054""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">UseEmployee(tom);   </code><code class=""c# comments"">// Manager works</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee emp)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(emp </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Manager manager &amp;&amp; manager.IsOnVacation == </code><code class=""c# keyword"">false</code><code class=""c# plain"">)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">manager.Work();</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Преобразование не допустимо""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в методе UseEmployee значение <code>emp</code> сопоставляется с типом Manager. То есть в данном случае в качестве шаблона выступает тип Manager.  Если сопоставление прошло успешно (то есть значение emp представляет тип Manager), в переменной manager оказывается объект emp.  И далее мы можем вызвать у него методы и свойства.</p> <p>Также мы можем использовать <span class=""b"">constant pattern</span> - сопоставление с некоторой константой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_237826""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var message = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// проверяем, соответствует ли значение message строке ""hello""</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(message </code><code class=""c# keyword"">is</code> <code class=""c# string"">""hello""</code><code class=""c# plain"">)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">   </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""hello""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Подобным образом, например, можно проверить значение на null:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_799893""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee? bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee? tom = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">UseEmployee(bob);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">UseEmployee(tom);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee? emp)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(emp </code><code class=""c# keyword"">is</code> <code class=""c# plain"">not </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">emp.Work();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Кроме конструкции if сопоставление паттернов может применяться в конструкции switch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_469144""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">UseEmployee(tom);   </code><code class=""c# comments"">// Manager works</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">UseEmployee(bob);   </code><code class=""c# comments"">// Object is not manager</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee? emp)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(emp)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">Manager manager:</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">manager.Work();</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# keyword"">null</code><code class=""c# plain"">:</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Object is null""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Object is not manager""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>С помощью выражения <span class=""b"">when</span> можно вводить дополнительные условия в конструкцию case:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_403964""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Employee bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager() { IsOnVacation = </code><code class=""c# keyword"">true</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Employee tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Manager() { IsOnVacation = </code><code class=""c# keyword"">false</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">UseEmployee(tom);   </code><code class=""c# comments"">// Manager works</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">UseEmployee(bob);   </code><code class=""c# comments"">// Employee does not work</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">UseEmployee(Employee? emp)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(emp)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">Manager manager when !manager.IsOnVacation:</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">manager.Work();</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# keyword"">null</code><code class=""c# plain"">:</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Employee is null""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">default</code><code class=""c# plain"">:</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Employee does not work""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае опять же преобразуем объект emp в объект типа Manager и в случае удачного преобразования смотрим на значение свойства IsOnVacation:  если оно равно false, то выполняется данный блок case.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Паттерн свойств</h2>   <p>Паттерн свойств позволяет сравнивать со значениями определенных свойств объекта. Например, пусть у нас будет следующий класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_916954""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;        </code><code class=""c# comments"">// имя пользователя</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Status { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;     </code><code class=""c# comments"">// статус пользователя</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Language { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;   </code><code class=""c# comments"">// язык пользователя</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Например, в зависимости от языка пользователя выведем ему определенное сообщение, применив паттерн свойств:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_684368""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""english""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person pierre = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""french""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Pierre""</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">SayHello(tom);      </code><code class=""c# comments"">// Hello</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">SayHello(pierre);   </code><code class=""c# comments"">// Salut</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello(Person person)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code><code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person { Language: </code><code class=""c# string"">""french""</code> <code class=""c# plain"">})</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Salut""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод SayHello в качестве параметра принимает объект Person и сопоставляет его с некоторым паттерном. В качестве паттерна выступает выражение  <code>Person { Language: ""french"" }</code>. То есть параметр person должен представлять объект Person, у которого значение свойства Language равно ""french"".</p> <p>При этом можно задействовать набор свойств. Например, добавим проверку по свойству Status:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_441891""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""english""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Person pierre = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""french""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Pierre""</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Person admin = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""english""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""admin""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Admin""</code> <code class=""c# plain"">};</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">SayHello(admin);    </code><code class=""c# comments"">// Hello, admin</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">SayHello(tom);      </code><code class=""c# comments"">// Hello</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">SayHello(pierre);   </code><code class=""c# comments"">// Salut</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">SayHello(Person person)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code><code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person { Language: </code><code class=""c# string"">""english""</code><code class=""c# plain"">, Status: </code><code class=""c# string"">""admin""</code> <code class=""c# plain"">})</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello, admin""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person { Language: </code><code class=""c# string"">""french""</code><code class=""c# plain"">})</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Salut""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">);</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь выражение if проверяет, соответствует ли параметр person объекту Person, у которого свойства Language и Status имеют определенные значения.</p> <p>Подобным образом можно применять паттерн свойств в конструкции switch:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_281540""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage(Person? p) =&gt; p </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ Language: </code><code class=""c# string"">""english""</code> <code class=""c# plain"">} =&gt; </code><code class=""c# string"">""Hello!""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{ Language: </code><code class=""c# string"">""german""</code><code class=""c# plain"">, Status: </code><code class=""c# string"">""admin""</code> <code class=""c# plain"">} =&gt; </code><code class=""c# string"">""Hallo, admin!""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ Language: </code><code class=""c# string"">""french""</code> <code class=""c# plain"">} =&gt; </code><code class=""c# string"">""Salut!""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{ } =&gt; </code><code class=""c# string"">""undefined""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">null</code> <code class=""c# plain"">=&gt; </code><code class=""c# string"">""null""</code>       <code class=""c# comments"">// если Person p = null</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Паттерны свойств предполагают использование фигурных скобок, внутри которых указываются свойства и через двоеточие их значение <code>{свойство: значение}</code>.  И со значением свойства в фигурных скобках сравнивается свойство передаваемого объекта. При этом в фигурных скобках мы можем указать несколько свойств и их значений <code>{ Language: ""german"", Status: ""admin"" }</code> - тогда  свойства передаваемого объекта должны соответствовать всем этим значениям.</p> <p>Можно оставить пустые фигурные скобки, как в последнем случае <code>{ } =&gt; ""undefined!""</code> - передаваемый объект будет  соответствовать пустым фигурным скобкам, если он не соответствует всем предыдущим значениям, или например, если его свойства не указаны или имеют значение null.</p> <p>То есть в данном случае, если у объекта Person p выполняется равенство Language = ""english"", будет возвращаться строка ""Hello!"".</p> <p>Если у объекта Person p одновременно выполняются два равенства Language = ""german"" и Role=""admin"",  будет возвращаться строка ""Hallo, admin!"".</p> <p>Если у объекта Person p выполняется равенство Language = ""french"", будет возвращаться строка ""Salut!"".</p> <p>Если объект Person будет сопоставляться с пустыми фигурными скобками <code>{}</code>, и будет возвращаться строка ""undefined"".</p> <p>Последняя проверка проверяет значение на null.</p> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_746888""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person pierre = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""french""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Pierre""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetMessage(pierre);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(message);     </code><code class=""c# comments"">// Salut!</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Person tomas = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""german""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""admin""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Tomas""</code> <code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(GetMessage(tomas));     </code><code class=""c# comments"">// Hallo, admin!</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">Person pablo = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""spanish""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Pablo""</code> <code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(GetMessage(pablo));     </code><code class=""c# comments"">// undefined</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine(GetMessage(</code><code class=""c# keyword"">null</code><code class=""c# plain"">));     </code><code class=""c# comments"">// null</code></div></div></td></tr></tbody></table></div></div> <p>Кроме того, мы можем определять в паттерных свойств переменные, передавать этим переменным значения объекта и использовать при возвращении значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_925044""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetMessage(Person? p) =&gt; p </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ Language: </code><code class=""c# string"">""german""</code><code class=""c# plain"">, Status: </code><code class=""c# string"">""admin""</code> <code class=""c# plain"">} =&gt; </code><code class=""c# string"">""Hallo, admin!""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{ Language: </code><code class=""c# string"">""french""</code><code class=""c# plain"">, Name: var name } =&gt; $</code><code class=""c# string"">""Salut, {name}!""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ Language: var lang} =&gt; $</code><code class=""c# string"">""Unknown language: {lang}""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">null</code> <code class=""c# plain"">=&gt; </code><code class=""c# string"">""null""</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Так, подвыражение <code>Name: var name</code> говорит, что надо передать в переменную name значение свойства Name. Затем ее можно применить  при генерации выходного значения: <code>=&gt; $""Salut, {name}!""</code></p> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_996251""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person pierre = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""french""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Pierre""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetMessage(pierre);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(message);             </code><code class=""c# comments"">// Salut, Pierre!</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Person tomas = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""german""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""admin""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Tomas""</code> <code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(GetMessage(tomas));     </code><code class=""c# comments"">// Hallo, admin!</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">Person pablo = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person { Language = </code><code class=""c# string"">""spanish""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code><code class=""c# plain"">, Name = </code><code class=""c# string"">""Pablo""</code> <code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(GetMessage(pablo));     </code><code class=""c# comments"">// Unknown language: spanish</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">Person? bob = </code><code class=""c# keyword"">null</code><code class=""c# plain"">;</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(GetMessage(bob));         </code><code class=""c# comments"">// null</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что начиная с версии C# 10 было упрощено сопоставление со свойствами вложенных объектов. Допустим, у нас есть следующие классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_720828""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Employee</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, Company company)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Company = company;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Title { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">title) =&gt; Title = title;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Company определяет свойство Title, которое хранит название компании. Класс Employee определяет сотрудника компании и в  свойстве Company хранит компанию. Применим паттерн свойств на основе свойств вложенного объекта Company:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_51715""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var microsoft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(</code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var google = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(</code><code class=""c# string"">""Google""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, microsoft);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">var bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, google);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">PrintCompany(tom);    </code><code class=""c# comments"">// </code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">PrintCompany(bob);    </code><code class=""c# comments"">// </code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintCompany(Employee employee)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(employee </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Employee { Company:{Title: </code><code class=""c# string"">""Microsoft""</code> <code class=""c# plain"">} })</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{employee.Name} works in Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{employee.Name} works someware""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В методе PrintCompany объект employee сопоставляется с паттерном <code>Employee { Company:{Title: ""Microsoft"" } }</code>. То есть  сотрудник компании должен представлять объект Employee, у которого название компании равно ""Microsoft""</p> <p>Однако мы также можем сократить данный паттерн следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_222154""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintCompany(Employee employee)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(employee </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Employee { Company.Title: </code><code class=""c# string"">""Microsoft""</code> <code class=""c# plain"">})</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{employee.Name} works in Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{employee.Name} works someware""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Паттерны кортежей</h2>   <p>Паттерны кортежей позволяют сравнивать значения кортежей. Например, передадим в конструкцию switch кортеж с названием языка и времени дня и в  зависимости от переданных данных возвратим определенное сообщение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_398714""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetWelcome(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">lang, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">daytime) =&gt; (lang, daytime) </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Good morning""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Good evening""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Guten Morgen""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Guten Abend""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; </code><code class=""c# string"">""Здрасьть""</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в метод передаются два значения, из которых создается кортеж (можно и сразу передать в метод кортеж). Далее в конструкции switch с  помощью круглых скобок определяются значения, которым должны соответствовать элементы кортежа. Например, выражение <code>(""english"", ""morning"") =&gt; ""Good morning""</code>  будет выполняться, если одновременно lang=""english"" и datetime=""morning"".</p> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_477173""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetWelcome(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// Good evening</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">message = GetWelcome(</code><code class=""c# string"">""french""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// Здрасьть</code></div></div></td></tr></tbody></table></div></div> <p>Нам не обязательно сравнивать все значения кортежа, мы можем использовать только некоторые элементы кортежа. В случае, если мы не хотим использовать  элемент кортежа, то вместо него ставим прочерк:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_651506""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetWelcome(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">lang, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">daytime, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">status) =&gt; (lang, daytime, status) </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Good morning""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Good evening""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Guten Morgen""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Guten Abend""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(_, _, </code><code class=""c# string"">""admin""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Hello, Admin""</code><code class=""c# plain"">,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; </code><code class=""c# string"">""Здрасьть""</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Теперь кортеж состоит из трех элементов. Но первые четыре выражения не используют последний элемент кортежа, допустим, он не важен,  поэтому вместо него ставится прочерк <code>(""english"", ""morning"", _)</code>.</p> <p>А в предпоследнем примере, наоборот, не важны первые два элемента, а важен третий элемент: <code>(_, _, ""admin"") =&gt;</code>.</p> <p>Но в любом случае нам надо указать конкретные значения или прочерки для всех элементов кортежа.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_298667""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetWelcome(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, </code><code class=""c# string"">""user""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// Good evening</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">message = GetWelcome(</code><code class=""c# string"">""french""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, </code><code class=""c# string"">""admin""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// Hello, Admin</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Позиционный паттерн</h2>   <p>Позиционный паттерн применяется к типу, у которого определен метод деконструктора. Например, определим следующий класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_260520""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">MessageDetails</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Language { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// язык пользователя</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">DateTime { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// время суток</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Status { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;     </code><code class=""c# comments"">// статус пользователя</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Deconstruct(</code><code class=""c# keyword"">out</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">lang, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">datetime, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">status)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">lang = Language;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">datetime = DateTime;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">status = Status;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь используем позиционный паттерн и в зависимости от значений объекта MessageDetails возвратим определенное сообщение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_595919""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetWelcome(MessageDetails details) =&gt; details </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Good morning""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Good evening""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Guten Morgen""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Guten Abend""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(_, _, </code><code class=""c# string"">""admin""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Hello, Admin""</code><code class=""c# plain"">,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; </code><code class=""c# string"">""Здрасьть""</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Фактически этот паттерн похож на пример с кортежами выше, только теперь вместо кортежа в конструкцию switch передается объект MessageDetails.  Через метод деконструктора мы можем получить набор выходных параметров в виде кортежа и опять же по позиции сравнивать их с некоторыми значениями в  конструкции switch.</p> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_511322""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">MessageDetails details1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">MessageDetails { Language = </code><code class=""c# string"">""english""</code><code class=""c# plain"">, DateTime = </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""user""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetWelcome(details1);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// Good evening</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">MessageDetails details2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">MessageDetails { Language = </code><code class=""c# string"">""french""</code><code class=""c# plain"">, DateTime = </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, Status = </code><code class=""c# string"">""admin""</code> <code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">message = GetWelcome(details2);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// Hello, Admin</code></div></div></td></tr></tbody></table></div></div> <p>Также мы можем взять значения объекта MessageDetails и использовать их при создании результата метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_309622""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetWelcome(MessageDetails details) =&gt; details </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Good morning""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""english""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Good evening""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""morning""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Guten Morgen""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(</code><code class=""c# string"">""german""</code><code class=""c# plain"">, </code><code class=""c# string"">""evening""</code><code class=""c# plain"">, _) =&gt; </code><code class=""c# string"">""Guten Abend""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">(_, _, </code><code class=""c# string"">""admin""</code><code class=""c# plain"">) =&gt; </code><code class=""c# string"">""Hello, Admin""</code><code class=""c# plain"">,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">(var lang, var datetime, var status) =&gt; $</code><code class=""c# string"">""{lang} not found, {datetime} unknown, {status} undefined""</code><code class=""c# plain"">,</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; </code><code class=""c# string"">""Здрасьть""</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>В предпоследней инструкции в конструкции switch получаем по позиции значения из MessageDetails в переменные lang, datetime и status и используем  их для создания сообщения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_353752""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">MessageDetails details1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">MessageDetails </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{ </code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Language = </code><code class=""c# string"">""chinese""</code><code class=""c# plain"">, </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">DateTime = </code><code class=""c# string"">""night""</code><code class=""c# plain"">, </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Status = </code><code class=""c# string"">""moderator""</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = GetWelcome(details1);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(message);  </code><code class=""c# comments"">// chinese not found, night unknown, moderator undefined</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Реляционный и логический паттерны</h2>   <p>В C# 9.0 в язык были добавлены дополнительные паттерны - реляционный (relational pattern) и логический (logical pattern) паттерны.</p> <p>Реляционный паттерн позволяет сравнить передаваемое в конструкцию значение с некоторыми значениями с помощью операций сравнения.  Например, в зависимости от суммы вклада проценты по этому вкладу могут отличаться. Рассчитаем сумму процентов в зависимости от суммы вклада с  использованием реляционного паттерна:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_257064""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">Calculate(</code><code class=""c# keyword"">decimal</code> <code class=""c# plain"">sum)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">sum </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">&lt;= 0 =&gt; 0,              </code><code class=""c# comments"">// если sum меньше или равно 0, возвращаем 0</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">&lt; 50000 =&gt; sum * 0.05m, </code><code class=""c# comments"">// если sum меньше 50000, возвращаем sum * 0.05m</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">&lt; 100000 =&gt; sum * 0.1m, </code><code class=""c# comments"">// если sum меньше 100000, возвращаем sum * 0.1m</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">_ =&gt; sum * 0.2m        </code><code class=""c# comments"">// в остальных случаях возвращаем sum * 0.2m</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_206165""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(Calculate(-200));     </code><code class=""c# comments"">// 0</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(Calculate(0));        </code><code class=""c# comments"">// 0 </code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(Calculate(10000));    </code><code class=""c# comments"">// 500</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(Calculate(60000));    </code><code class=""c# comments"">// 6000</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(Calculate(200000));   </code><code class=""c# comments"">// 40000</code></div></div></td></tr></tbody></table></div></div> <p>Логический паттерн позволяет использовать логические операторы <span class=""b"">and</span> (логическое умножение или операция  логического И) и <span class=""b"">or</span> (логическое сложение или операция логического ИЛИ) для объединения операций сравнения.  Например, передадим в метод возраст и возвратим соответствующее сообщение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_703043""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">CheckAge(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">age </code><code class=""c# keyword"">switch</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">&lt;1 or &gt;110 =&gt; </code><code class=""c# string"">""Недействительный возраст""</code><code class=""c# plain"">,   </code><code class=""c# comments"">// если age больше 110 и меньше 1</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">&gt;=1 and &lt;18 =&gt; </code><code class=""c# string"">""Доступ запрещен""</code><code class=""c# plain"">,           </code><code class=""c# comments"">// если age равно или больше 1 и меньше 18</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">_ =&gt; </code><code class=""c# string"">""Доступ разрешен""</code>                      <code class=""c# comments"">// в остальных случаях</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_792626""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(CheckAge(200));     </code><code class=""c# comments"">// Недействительный возраст</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(CheckAge(0));      </code><code class=""c# comments"">// Недействительный возраст </code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(CheckAge(17));    </code><code class=""c# comments"">// Доступ запрещен</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(CheckAge(18));   </code><code class=""c# comments"">// Доступ разрешен</code></div></div></td></tr></tbody></table></div></div> <p>Еще один логический оператор - <span class=""b"">not</span> используется для отрицания и возвращает <code>true</code>, если его аргумент равен <code>false</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_171668""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">CheckAge(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) =&gt; age </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">not 33 =&gt; </code><code class=""c# string"">""Обычный возраст""</code><code class=""c# plain"">,   </code><code class=""c# comments"">// если age НЕ равен 33</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; </code><code class=""c# string"">""Вам 33 года""</code>             <code class=""c# comments"">// в остальных случаях, то есть если age = 33</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Паттерны списков</h2>   <p>Паттерны списков (list pattern) позволяют сопоставлять выражения со списками и массивами.  Данный паттерн пока доступен начиная с версии  C# 11.</p> <p>Полное совпадение с массивом/списком:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_717705""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3, 4, 5 }));  </code><code class=""c# comments"">// 1</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2}));            </code><code class=""c# comments"">// 3</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] {}));             </code><code class=""c# comments"">// 4</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 5 }));        </code><code class=""c# comments"">// 5</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">GetNumber(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values)=&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">[1, 2, 3, 4, 5] =&gt; 1,</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">[1, 2, 3] =&gt; 2,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">[1, 2] =&gt; 3,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">[] =&gt; 4,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">_ =&gt; 5</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Аналогично вместо массивов можно применять списки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_784023""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; numbers = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;{1, 2, 3};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(numbers));  </code><code class=""c# comments"">// 2</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">GetNumber(List&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; values) =&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[1, 2, 3, 4, 5] =&gt; 1,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[1, 2, 3] =&gt; 2,</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[1, 2] =&gt; 3,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[] =&gt; 4,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; 5</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Аналогичным образом паттерны списков можно использовать в конструкции <span class=""b"">if</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_811145""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code><code class=""c# plain"">(numbers </code><code class=""c# keyword"">is</code> <code class=""c# plain"">[1, 2, 3, 4, 5])</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""[1, 2, 3, 4, 5]""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h4>Подстановка _</h4> <p>С помощью паттерна <span class=""b"">_</span> можно обозначить одиночный элемент, который имеет любое значение. Например, паттерн  <span class=""b"">[2, _, 5]</span> соответствует любому массиву из трех элементов, в котором между 2 и 5 располагается произвольное значение.  А массив <span class=""b"">[_, _]</span> соответствует любому массиву из двух произвольных элементов</p> <p>Несколько примеров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_877564""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 3, 5}));       </code><code class=""c# comments"">// 1</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 4, 6 }));      </code><code class=""c# comments"">// 2</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 5 }));      </code><code class=""c# comments"">// 3</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3}));      </code><code class=""c# comments"">// 4</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { }));         </code><code class=""c# comments"">// 5</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">GetNumber(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values) =&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[2, _, 5] =&gt; 1,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[2, _, _] =&gt; 2,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[_, _, 5] =&gt; 3,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[_, _, _] =&gt; 4,</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">_ =&gt; 5</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <h4>slice-паттерн</h4> <p>Для передачи произвольного количества элементов массива/списка применяется slice-паттерн <span class=""b"">..</span>.  Например, паттерн <span class=""b"">[1, 2, .., 5]</span>  соответствует массиву, в который начинается на 1, за которым идет 2. А последний элемент в массиве - 5. При этом между 2 и 5 может располагаться произвольное количество  произвольных целых чисел. То есть паттерн <span class=""b"">[1, 2, .., 5]</span> будет соответствовать таким массивам как</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_2458""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] arr1 = {  1, 2, 3, 4, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[] arr2 = { 1, 2, 5 };</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] arr3 = { 1, 2, 66, 77, 88, 5 };</code></div></div></td></tr></tbody></table></div></div> <p>С помощью паттерна <span class=""b"">..</span> можно задавать произвольное количество элементов как в начале, так и в конце массива/списка.  Например, паттерн <span class=""b"">[2,..]</span> представляет массив, который начинается на 2. А паттерн <span class=""b"">[.., 5]</span>  представляет массив, который заканчивается элементом 5. Паттерн <span class=""b"">[..]</span> представляет массив, который содержит  произвольное количество элементов. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_381299""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 5 }));           </code><code class=""c# comments"">// 1</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 3, 4, 5 }));     </code><code class=""c# comments"">// 1</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2}));               </code><code class=""c# comments"">// 2</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 3, 4}));         </code><code class=""c# comments"">// 2</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] {3, 4, 5}));          </code><code class=""c# comments"">// 3</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 5 }));              </code><code class=""c# comments"">// 3</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] {  }));           </code><code class=""c# comments"">// 4</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1 }));              </code><code class=""c# comments"">// 4</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3 }));        </code><code class=""c# comments"">// 4</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">GetNumber(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values)=&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[2, .., 5] =&gt; 1,    </code><code class=""c# comments"">// если первый элемент - 2, а последний - 5</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[2,..] =&gt; 2,        </code><code class=""c# comments"">// если первый элемент - 2</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[.., 5] =&gt; 3,       </code><code class=""c# comments"">// если последний элемент - 5</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[..] =&gt; 4          </code><code class=""c# comments"">// произвольное количество элементов</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>slice-паттерн можно сочетать с символов подстановки _, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_429411""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">GetNumber(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values) =&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[_, .., _] =&gt; 1,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[..] =&gt; 2</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае паттерн <span class=""b"">[_, .., _]</span> предполагает массив, который состоит как минимум из двух произвольных элементов, и между первым и последним  элементром может находиться произвольное количество других элементов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_835005""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3, 4}));   </code><code class=""c# comments"">// 1</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3}));     </code><code class=""c# comments"">// 1</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2}));        </code><code class=""c# comments"">// 1</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1 }));          </code><code class=""c# comments"">// 2</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(GetNumber(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { }));       </code><code class=""c# comments"">// 2</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">GetNumber(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values) =&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[_, .., _] =&gt; 1,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[..] =&gt; 2</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <h3>Получение элементов в переменные</h3> <p>Отдельные значения массива/списка можно получить в переменные, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_511869""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code><code class=""c# plain"">(numbers </code><code class=""c# keyword"">is</code> <code class=""c# plain"">[var first, var second, .., var last])</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""first: {first}, second: {second}  last: {last}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае получаем первый элемент массива в переменную first, второй элемент - в переменную second, а последний элемент - в  переменную last.</p> <p>Пример с различными массивами:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_279806""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(GetData(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3 }));        </code><code class=""c# comments"">// First: 1  Second: 2  Last: 3</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(GetData(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 4, 6, 8 }));    </code><code class=""c# comments"">// First: 2  Second: 4  Last: 8</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(GetData(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2 }));          </code><code class=""c# comments"">// Array has less than 3 elements</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetData(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values) =&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[var first, var second, .., var last] =&gt; $</code><code class=""c# string"">""First: {first}  Second: {second}  Last: {last}""</code><code class=""c# plain"">,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[..] =&gt; </code><code class=""c# string"">""Array has less than 3 elements""</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае получаем первый элемент массива в переменную first, второй элемент - в переменную second, а последний элемент - в  переменную last.</p> <p>При этом значения, которые проектируются на паттерн <span class=""b"">..</span>, также можно получить в переменную. Например, в паттерне  <span class=""b"">[2, .. var middle, 5]</span> элементы, которые проектируются на <span class=""b"">..</span>, можно передаются в переменную  middle. Несколько примеров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_875690""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(GetSlice(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 3, 4, 5}));       </code><code class=""c# comments"">// Middle: 3, 4</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(GetSlice(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 2, 4, 6, 8 }));      </code><code class=""c# comments"">// End: 4, 6, 8</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(GetSlice(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3, 5 }));      </code><code class=""c# comments"">// Start: 1, 2, 3</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(GetSlice(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { 1, 2, 3, 4 }));      </code><code class=""c# comments"">// All: 1, 2, 3, 4</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(GetSlice(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { }));             </code><code class=""c# comments"">// All: </code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">GetSlice(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] values) =&gt; values </code><code class=""c# keyword"">switch</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[2, .. var middle, 5] =&gt; $</code><code class=""c# string"">""Middle: {string.Join(""</code><code class=""c# plain"">, </code><code class=""c# string"">"", middle)}""</code><code class=""c# plain"">,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[2, .. var end] =&gt; $</code><code class=""c# string"">""End: {string.Join(""</code><code class=""c# plain"">, </code><code class=""c# string"">"", end)}""</code><code class=""c# plain"">,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[.. var start, 5] =&gt; $</code><code class=""c# string"">""Start: {string.Join(""</code><code class=""c# plain"">, </code><code class=""c# string"">"", start)}""</code><code class=""c# plain"">,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[.. var all] =&gt; $</code><code class=""c# string"">""All: {string.Join(""</code><code class=""c# plain"">, </code><code class=""c# string"">"", all)}""</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <h3>Свойства коллекций</h3> <p>Стоит отметить, что, поскольку массивы и списки - обычные классы C#, которые имеют свойства, то для них мы также можем применять  паттерн свойств. Объединение паттерна свойств и паттерна списков позволяет упростить решение некоторых задач. Например, у нас есть задача:  если массив имеет три элемента, то разложить его на три переменных:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_176543""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 2, 3, 5 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code><code class=""c# plain"">(numbers </code><code class=""c# keyword"">is</code> <code class=""c# plain"">{ Length:3} and [var first, var second, var third])</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""first: {first}, second: {second}  third: {third}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
            };
            string[] tasks = new string[]
            {
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
            };
            if (form1Instance != null && comboBox7.SelectedIndex >= 0 && comboBox7.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox7.SelectedIndex;
                selectCombobox = 7;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 2);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }

        private async void comboBox8_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Дополнительные возможности ООП в C#</h1><h2>Определение операторов</h2>   <p>Наряду с методами в классах и структурах мы можем также определять операторы. Например, пусть у нас есть следующий класс Counter:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_590940""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Counter</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Value { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Данный класс представляет некоторый счетчик, значение которого хранится в свойстве Value.</p> <p>И допустим, у нас есть два объекта класса Counter - два счетчика, которые мы хотим сравнивать или складывать на основании их свойства Value,  используя стандартные операции сравнения и сложения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_31489""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = 23 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Counter counter2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = 45 };</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">bool</code> <code class=""c# plain"">result = counter1 &gt; counter2;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Counter c3 = counter1 + counter2;</code></div></div></td></tr></tbody></table></div></div> <p>Но на данный момент ни операция сравнения, ни операция сложения для объектов Counter не доступны. Эти операции могут использоваться  для ряда примитивных типов. Например, по умолчанию мы можем складывать числовые значения, но как складывать объекты комплексных типов -  классов и структур компилятор не знает. И для этого нам надо выполнить перегрузку нужных нам операторов.</p> <p>Определение операторов заключается в определении в классе, для объектов которого мы хотим определить оператор, специального метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_517805""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">возвращаемый_тип </code><code class=""c# keyword"">operator</code> <code class=""c# plain"">оператор(параметры)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{  }</code></div></div></td></tr></tbody></table></div></div> <p>Этот метод должен иметь модификаторы <span class=""b"">public static</span>, так как перегружаемый оператор будет  использоваться для всех объектов данного класса. Далее идет название возвращаемого типа. Возвращаемый тип представляет тот тип, объекты которого мы хотим получить.  К примеру, в результате сложения двух объектов Counter мы ожидаем получить новый объект Counter. А в результате сравнения двух мы хотим  получить объект типа bool, который указывает истинно ли условное выражение или ложно. Но в зависимости от задачи возвращаемые типы могут быть любыми.</p> <p>Затем вместо названия метода идет ключевое слово <span class=""b"">operator</span> и собственно сам оператор. И далее в скобках перечисляются  параметры. Бинарные операторы принимают два параметра, унарные - один параметр. И в любом случае один из параметров должен  представлять тот тип - класс или структуру, в котором определяется оператор.</p> <p>Например, перегрузим ряд операторов для класса Counter:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_862792""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Counter</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Value { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">        </code> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">Counter </code><code class=""c# keyword"">operator</code> <code class=""c# plain"">+(Counter counter1, Counter counter2)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = counter1.Value + counter2.Value };</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">&gt;(Counter counter1, Counter counter2)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value &gt; counter2.Value;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">&lt;(Counter counter1, Counter counter2)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value &lt; counter2.Value;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку все определенные операторы - бинарные - то есть проводятся над двумя объектами, то для каждой перегрузки предусмотрено  по два параметра.</p> <p>Так как в случае с операцией сложения мы хотим сложить два объекта класса Counter, то оператор принимает два объекта этого класса. И так как мы хотим в результате сложения  получить новый объект Counter, то данный класс также используется в качестве возвращаемого типа. Все действия этого оператора сводятся к созданию, нового объекта, свойство Value  которого объединяет значения свойства Value обоих параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_687813""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">Counter </code><code class=""c# keyword"">operator</code> <code class=""c# plain"">+(Counter counter1, Counter counter2)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = counter1.Value + counter2.Value };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также определены две операции сравнения. Если мы определяем одну из этих операций сравнения, то мы также должны определить вторую из этих операций.  Сами операторы сравнения сравнивают значения свойств Value и в зависимости от результата сравнения возвращают либо true, либо false.</p> <p>Теперь используем перегруженные операторы в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_102070""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = 23 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Counter counter2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = 45 };</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">result = counter1 &gt; counter2;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// false</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Counter counter3 = counter1 + counter2;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(counter3.Value);  </code><code class=""c# comments"">// 23 + 45 = 68</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что так как по сути определение оператора представляет собой метод, то этот метод мы также можем перегрузить, то есть  создать для него еще одну версию. Например, добавим в класс Counter еще один оператор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_992364""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">+(Counter counter1, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">val)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value + val;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Данный метод складывает значение свойства Value и некоторое число, возвращая их сумму. И также мы можем применить этот оператор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_224496""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = 23 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = counter1 + 27; </code><code class=""c# comments"">// 50</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result);</code></div></div></td></tr></tbody></table></div></div> <p>Следует учитывать, что не все операторы можно определить.  В частности, мы можем определить логику для следующих операторов:</p> <ul> <li><p>унарные операторы +x, -x, !x, ~x, ++, --, true, false 	</p></li> <li><p>бинарные операторы +, -, *, /, %</p></li> <li><p>операции сравнения  ==, !=, &lt;, &gt;, &lt;=, &gt;=</p></li> <li><p>поразрядные операторы  &amp;, |, ^, &lt;&lt;, &gt;&gt;</p></li> <li><p>логические операторы &amp;&amp;, ||</p></li> </ul> <p>Кроме того, есть несколько операторов, которые надо определять парами:</p> <ul> <li><p>== и !=</p></li> <li><p>&lt; и &gt;</p></li> <li><p>&lt;= и &gt;=</p></li> </ul> <p>И есть ряд операторов, которые нельзя перегрузить, например, операцию равенства <code>=</code> или тернарный оператор <code>?:</code>, а также ряд других. Полный список перегружаемых операторов можно найти в <a href=""https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading#overloadable-operators"" rel=""nofollow"">документации msdn</a></p> <h3>Определение инкремента и декремента</h3> <p>Следует учитывать, что в коде оператора не должны изменяться те объекты, которые передаются в оператор через параметры. Например, мы можем определить для класса  Counter оператор инкремента:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_26826""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">Counter </code><code class=""c# keyword"">operator</code> <code class=""c# plain"">++(Counter counter1)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">counter1.Value += 10;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку оператор унарный, он принимает только один параметр - объект того класса, в котором данный оператор определен. Но это  <span class=""b"">неправильное</span> определение инкремента, так как оператор не должен менять значения своих параметров.</p> <p>И более корректное определение оператора инкремента будет выглядеть так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_418816""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">Counter </code><code class=""c# keyword"">operator</code> <code class=""c# plain"">++(Counter counter1)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Value = counter1.Value + 10 };</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>То есть возвращается новый объект, который содержит в свойстве Value инкрементированное значение. При этом нам не надо определять отдельно операторы для префиксного и для постфиксного инкремента (а также декремента), так как одна реализация  будет работать в обоих случаях.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_835706""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter() { Value = 10 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Counter counter2 = counter1++;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(counter1.Value);      </code><code class=""c# comments"">// 20</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(counter2.Value);      </code><code class=""c# comments"">// 10</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Counter counter3 = ++counter1;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(counter1.Value);      </code><code class=""c# comments"">// 30</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(counter3.Value);      </code><code class=""c# comments"">// 30</code></div></div></td></tr></tbody></table></div></div> <p>При операции постфиксного инкремента (counter1++) компилятор сначала создает временную переменную, в которую сохраняет текущий объект. Затем текущий объект замещает значением, полученным из функции оператора.  В качестве результата операции возвращается значение временной переменной. При префиксном инкременте (++counter1) компилятор возвращает новое значение, полученное из функции оператора.</p> <h3>Определение операций true и false</h3> <p>Отдельно стоит отметить определение операторов <span class=""b"">true</span> и <span class=""b"">false</span>. Эти операторы определяются, когда мы хотим использовать объект типа в качестве условия.  Например, определим данные операторы в классе Counter:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_655727""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Counter</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Value { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# keyword"">true</code><code class=""c# plain"">(Counter counter1)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value != 0;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# keyword"">false</code><code class=""c# plain"">(Counter counter1)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value == 0;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p> Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_375945""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter() { Value = 0 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(counter)</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# keyword"">true</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">else</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# keyword"">false</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Также стоит отметить, что если мы хотим использовать операцию отрицания, типа <code>if (!counter)</code>, то нам также необходимо определить для типа операцию <span class=""b"">!</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_907280""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter() { Value = 2 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(!counter)</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# keyword"">true</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">else</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# keyword"">false</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Counter</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Value { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">!(Counter counter1)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value == 0;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""> </div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# keyword"">true</code><code class=""c# plain"">(Counter counter1)</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value != 0;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">bool</code> <code class=""c# keyword"">operator</code> <code class=""c# keyword"">false</code><code class=""c# plain"">(Counter counter1)</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter1.Value == 0;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Операция отрицания фактически синонимична операции <code>false</code>, поэтому содержит аналогичное условие.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.15.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> <li><a href=""../practice/2.4.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Перегрузка операций преобразования типов</h2>   <p>В прошлой теме была рассмотрена тема перегрузки операторов. И с этой темой тесно связана тема перегрузки операторов преобразования типов.</p> <p>Ранее мы рассматривали явные и неявные преобразования примитивных типов. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_546852""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 50;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">byte</code> <code class=""c# plain"">y = (</code><code class=""c# keyword"">byte</code><code class=""c# plain"">)x; </code><code class=""c# comments"">// явное преобразование от int к byte</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">z = y;  </code><code class=""c# comments"">// неявное преобразование от byte к int</code></div></div></td></tr></tbody></table></div></div> <p>И было бы не плохо иметь возможность определять логику преобразования одних типов в другие. И с помощью перегрузки операторов мы можем это делать.  Для этого в классе определяется метод следующей формы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_665204""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">implicit</code><code class=""c# plain"">|</code><code class=""c# keyword"">explicit</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">Тип_в_который_надо_преобразовать(исходный_тип param)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// логика преобразования</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После модификаторов <span class=""b"">public static</span> идет ключевое слово <span class=""b"">explicit</span> (если преобразование явное, то есть нужна операция приведения типов) или  <span class=""b"">implicit</span> (если преобразование неявное). Затем идет ключевое слово <span class=""b"">operator</span> и далее возвращаемый тип, в который надо преобразовать объект.  В скобках в качестве параметра передается объект, который надо преобразовать.</p> <p>Например, пусть у нас есть следующий класс Counter, который представляет счетчик-секундомер и который хранит количество секунд в свойстве Seconds:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_50721""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Counter</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Seconds { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">implicit</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">Counter(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Seconds = x };</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">explicit</code> <code class=""c# keyword"">operator</code> <code class=""c# keyword"">int</code><code class=""c# plain"">(Counter counter)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter.Seconds;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Первый оператор преобразует число - объект типа int к типу Counter. Его логика проста - создается новый объект Counter, у которого устанавливается  свойство Seconds.</p> <p>Второй оператор преобразует объект Counter к типу int, то есть получает из Counter число.</p> <p>Примение операторов преобразования в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_72109""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Seconds = 23 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)counter1;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(x);   </code><code class=""c# comments"">// 23</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Counter counter2 = x;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(counter2.Seconds);  </code><code class=""c# comments"">// 23</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку операция преобразования из Counter в int определена с ключевым словом explicit, то есть как явное преобразование, то в этом случае необходимо применить операцию приведения типов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_946511""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = (</code><code class=""c# keyword"">int</code><code class=""c# plain"">)counter1;</code></div></div></td></tr></tbody></table></div></div> <p>В случае с операцией преобразования от int к Counter ничего подобного делать не надо, поскольку данная операция определена с ключевым словом implicit,  то есть как неявная. Какие операции преобразования делать явными, а какие неявные, в данном случае не столь важно, это решает разработчик по своему усмотрению.</p> <p>Следует учитывать, что оператор преобразования типов должен преобразовывать из типа или в тип, в котором этот оператор определен. То есть  оператор преобразования, определенный в типе Counter, должен либо принимать в качестве параметра объект типа Counter, либо возвращать объект типа Counter.</p> <p>Рассмотрим также более сложные преобразования, к примеру, из одного составного типа в другой составной тип. Допустим, у нас есть еще класс Timer:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_99318""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Timer</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Hours { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Minutes { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }    </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Seconds { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Counter</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Seconds { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">implicit</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">Counter(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">x)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Seconds = x };</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">explicit</code> <code class=""c# keyword"">operator</code> <code class=""c# keyword"">int</code><code class=""c# plain"">(Counter counter)</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter.Seconds;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">explicit</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">Counter(Timer timer)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">h = timer.Hours * 3600;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">m = timer.Minutes * 60;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Seconds = h + m + timer.Seconds };</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">implicit</code> <code class=""c# keyword"">operator</code> <code class=""c# plain"">Timer(Counter counter)</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">h = counter.Seconds / 3600;</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">m = (counter.Seconds % 3600) / 60;</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">s = counter.Seconds % 60;</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Timer { Hours = h, Minutes = m, Seconds = s };</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number32 index31 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Timer представляет условный таймер, который хранит часы, минуты и секунды. Класс Counter представляет условный счетчик-секундомер, который хранит количество секунд.  Исходя из этого мы можем определить некоторую логику преобразования из одного типа к другому, то есть получение из секунд в объекте Counter часов, минут и секунд в  объекте Timer. Например, 3675 секунд по сути это 1 час, 1 минута и 15 секунд</p> <p>Применение операций преобразования:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_507510""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Counter counter1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Counter { Seconds = 115 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Timer timer = counter1;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{timer.Hours}:{timer.Minutes}:{timer.Seconds}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 0:1:55</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Counter counter2 = (Counter)timer;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(counter2.Seconds);  </code><code class=""c# comments"">//115</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.14.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> <li><a href=""../practice/2.3.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Индексаторы</h2>   <p><span class=""b"">Индексаторы</span> позволяют индексировать объекты и обращаться к данным по индексу. Фактически с помощью индексаторов  мы можем работать с объектами как с массивами. По форме они напоминают свойства со стандартными блоками <code>get</code> и  <code>set</code>, которые возвращают и присваивают значение.</p> <p>Формальное определение индексатора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_808561""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">возвращаемый_тип </code><code class=""c# keyword"">this</code> <code class=""c# plain"">[Тип параметр1, ...]</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ ... }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">set</code> <code class=""c# plain"">{ ... }</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В отличие от свойств индексатор не имеет названия. Вместо него указывается ключевое слово <span class=""b"">this</span>,  после которого в квадратных скобках идут параметры. Индексатор должен иметь как минимум один параметр.</p> <p>Посмотрим на примере. Допустим, у нас есть класс <span class=""b"">Person</span>, который представляет человека, и класс <span class=""b"">Company</span>,  который представляет некоторую компанию, где работают люди. Используем индексаторы для определения класса Company:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_73226""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name=name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Person[] personal;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(Person[] people) =&gt; personal = people;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// индексатор</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person </code><code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">index]</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; personal[index];</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; personal[index] = value;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для хранения персонала компании в классе определен массив <code>personal</code>, который состоит из объектов Person. Для доступа к этим объектам определен индексатор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_565133""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">Person </code><code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">index]</code></div></div></td></tr></tbody></table></div></div> <p>Индексатор в принципе подобен стандартному свойству. Во-первых, для индексатора определяется тип в данном случае тип Person. Тип индексатора определяет, какие объекты будет получать и возвращать индексатор.</p> <p>Во-вторых, для индексатора определен параметр <code>int index</code>, через который обращаемся к элементам внутри объекта Company.</p> <p>Для возвращения объекта в индексаторе определен блок <span class=""b"">get</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_620098""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; personal[index];</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку индексатор имеет тип Person, то в блоке get нам надо возвратить объект этого типа с помощью оператора return. Здесь мы  можем определить разнообразную логику. В данном случае просто возвращаем объект из массива personal.</p> <p>В блоке <span class=""b"">set</span>, как и в обычном свойстве, получаем через параметр <span class=""b"">value</span> переданный объект  Person и сохраняем его в массив по индексу.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_492923""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; personal[index] = value;</code></div></div></td></tr></tbody></table></div></div> <p>После этого мы можем работать с объектом Company как с набором объектов Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_673740""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var microsoft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[]</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">), </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">), </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">), </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Alice""</code><code class=""c# plain"">)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">});</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// получаем объект из индексатора</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Person firstPerson = microsoft[0];</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(firstPerson.Name);  </code><code class=""c# comments"">// Tom</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// переустанавливаем объект</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">microsoft[0] = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Mike""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(microsoft[0].Name);  </code><code class=""c# comments"">// Mike</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что если индексатору будет передан некорректный индекс, который отсутствует в массиве person, то мы получим исключение, как и в случае обращения напрямую к элементам  массива. В этом случае можно предусмотреть какую-то дополнительную логику. Например, проверять переданный индекс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_795337""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Person[] personal;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(Person[] people) =&gt; personal = people;</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// индексатор</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person </code><code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">index]</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">            </code><code class=""c# comments"">// если индекс имеется в массиве</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(index &gt;= 0 &amp;&amp; index &lt; personal.Length)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">return</code> <code class=""c# plain"">personal[index]; </code><code class=""c# comments"">// то возвращаем объект Person по индексу</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">else</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentOutOfRangeException(); </code><code class=""c# comments"">// иначе генерируем исключение</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# comments"">// если индекс есть в массиве</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(index &gt;= 0 &amp;&amp; index &lt; personal.Length)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">personal[index] = value;    </code><code class=""c# comments"">// переустанавливаем значение по индексу</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в блоке get если переданный индекс имеется в массиве, то возвращаем объект по индексу. Если индекса нет в массиве, то генерируем исключение.  Аналогично в блоке set устанавливаем значение по индексу, если индекс есть в массиве.</p> <h3>Индексы</h3> <p>Индексатор получает набор индексов в виде параметров. Однако индексы необязательно должны представлять тип int, устанавливаемые/возвращаемые значения  необязательно хранить в массиве. Например, мы можем рассматривать объект как хранилище атрибутов/свойств и передавать имя атрибута в виде строки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_97087""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div><div class=""line number37 index36 alt2"">37</div><div class=""line number38 index37 alt1"">38</div><div class=""line number39 index38 alt2"">39</div><div class=""line number40 index39 alt1"">40</div><div class=""line number41 index40 alt2"">41</div><div class=""line number42 index41 alt1"">42</div><div class=""line number43 index42 alt2"">43</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">User tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User();</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// устанавливаем значения</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom[</code><code class=""c# string"">""name""</code><code class=""c# plain"">] = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom[</code><code class=""c# string"">""email""</code><code class=""c# plain"">] = </code><code class=""c# string"">""tom@gmail.ru""</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">tom[</code><code class=""c# string"">""phone""</code><code class=""c# plain"">] = </code><code class=""c# string"">""+1234556767""</code><code class=""c# plain"">;</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// получаем значение</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(tom[</code><code class=""c# string"">""name""</code><code class=""c# plain"">]); </code><code class=""c# comments"">// Tom</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">User</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">email = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">phone = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">string</code> <code class=""c# plain"">propname]</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(propname)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">case</code> <code class=""c# string"">""name""</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">name;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">case</code> <code class=""c# string"">""email""</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">email;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">case</code> <code class=""c# string"">""phone""</code><code class=""c# plain"">: </code><code class=""c# keyword"">return</code> <code class=""c# plain"">phone;</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">default</code><code class=""c# plain"">: </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Exception(</code><code class=""c# string"">""Unknown Property Name""</code><code class=""c# plain"">);</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(propname)</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">case</code> <code class=""c# string"">""name""</code><code class=""c# plain"">:</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">                    </code><code class=""c# plain"">name = value;</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">                    </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">                </code><code class=""c# keyword"">case</code> <code class=""c# string"">""email""</code><code class=""c# plain"">:</code></div><div class=""line number35 index34 alt2""><code class=""c# spaces"">                    </code><code class=""c# plain"">email = value;</code></div><div class=""line number36 index35 alt1""><code class=""c# spaces"">                    </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number37 index36 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">case</code> <code class=""c# string"">""phone""</code><code class=""c# plain"">:</code></div><div class=""line number38 index37 alt1""><code class=""c# spaces"">                    </code><code class=""c# plain"">phone = value;</code></div><div class=""line number39 index38 alt2""><code class=""c# spaces"">                    </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number40 index39 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number41 index40 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number42 index41 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number43 index42 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае индексатор в классе User в качестве индекса получает строку, которая хранит название атрибута (в данном случае название поля класса).</p> <p>В блоке <span class=""b"">get</span> в зависимости от значения строкового индекса возвращается значение того или иного поля класса. Если передано неизвестное название,  то генерируется исключение. В блоке <span class=""b"">set</span> похожая логика - по индексу узнаем, для какого поля надо установить значение.</p> <h3>Применение нескольких параметров</h3> <p>Также индексатор может принимать несколько параметров. Допустим, у нас есть класс, в котором хранилище определено в виде двухмерного массива или матрицы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_762382""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Matrix</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code><code class=""c# plain"">[,] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[,] { { 1, 2, 4 }, { 2, 3, 6 }, { 3, 4, 8 } };</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">j]</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; numbers[i, j];</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; numbers[i, j] = value;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Теперь для определения индексатора используются два индекса - i и j. И в программе мы уже должны обращаться к объекту, используя два индекса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_914292""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Matrix matrix = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Matrix();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(matrix[0, 0]);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">matrix[0, 0] = 111;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(matrix[0, 0]);</code></div></div></td></tr></tbody></table></div></div> <p>Следует учитывать, что индексатор не может быть статическим и применяется только к экземпляру класса. Но при этом индексаторы могут быть виртуальными и абстрактными и  могут переопределяться в произодных классах.</p> <h3>Блоки get и set</h3> <p>Как и в свойствах, в индексаторах можно опускать блок get или set, если в них нет необходимости.  Например, удалим блок set и сделаем индексатор доступным только для чтения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_711613""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Matrix</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code><code class=""c# plain"">[,] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[,] { { 1, 2, 4 }, { 2, 3, 6 }, { 3, 4, 8 } };</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">j]</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; numbers[i, j];</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также мы можем ограничивать доступ к блокам get и set, используя модификаторы доступа. Например, сделаем блок set приватным:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_332911""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Matrix</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code><code class=""c# plain"">[,] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[,] { { 1, 2, 4 }, { 2, 3, 6 }, { 3, 4, 8 } };</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">j]</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; numbers[i, j];</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; numbers[i, j] = value;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Перегрузка индексаторов</h3> <p>Подобно методам индексаторы можно перегружать. В этом случае также индексаторы должны отличаться по количеству, типу или порядку используемых параметров.  Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_860068""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var microsoft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person[] { </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">), </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">), </code><code class=""c# keyword"">new</code><code class=""c# plain"">(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">) });</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(microsoft[0].Name);      </code><code class=""c# comments"">// Tom</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(microsoft[</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">].Name);  </code><code class=""c# comments"">// Bob</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name=name;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Person[] personal;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(Person[] people) =&gt; personal = people;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// индексатор</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person </code><code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">index]</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; personal[index];</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code> <code class=""c# plain"">=&gt; personal[index] = value;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""> </div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person </code><code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name]</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">personal)</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(person.Name == name) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">person;</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Exception(</code><code class=""c# string"">""Unknown name""</code><code class=""c# plain"">);</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number32 index31 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Company содержит две версии индексатора. Первая версия получает и устанавливает объект Person по индексу,  а вторая - только получае объект Person по его имени.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../practice/2.2.php"" title=""Упражнения""><i class=""fa fa-lg fa-pencil""></i><span class=""dop-txt"">Упражнения</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Переменные-ссылки и возвращение ссылки</h2>   <p>Кроме параметров метода, которые с помощью модификатора <span class=""b"">ref</span> позволяют передавать значение по ссылке,  C# также позволяет с помощью ключевого слова <span class=""b"">ref</span> возвращать ссылку из метода и определять переменную, которая будет хранить ссылку.</p> <h3>Переменная-ссылка</h3> <p>Для определения локальной переменной-ссылки (ref local) перед ее типом ставится ключевое слово <span class=""b"">ref</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_326271""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">xRef = </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">x;</code></div></div></td></tr></tbody></table></div></div> <p>Здесь переменная xRef указывает не просто на значение переменной x, а на область в памяти, где располагается эта переменная. Для этого перед x также указывается ref.</p> <p>При этом мы не можем просто определить переменную-ссылку, нам обязательно надо присвоить ей некоторое значение. Так, следующий код вызовет ошибку:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_966614""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">xRef;   </code><code class=""c# comments"">// ошибка</code></div></div></td></tr></tbody></table></div></div> <p>Получив ссылку, мы можем манипулировать значением по этой ссылке. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_505819""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">xRef = </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">x;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(x); </code><code class=""c# comments"">// 5</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">xRef = 125;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(x); </code><code class=""c# comments"">// 125</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">x = 625;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(xRef); </code><code class=""c# comments"">// 625</code></div></div></td></tr></tbody></table></div></div> <h3>Ссылка как результат функции</h3> <p>Для возвращения из функции ссылки в сигнатуре функции перед возвращаемым типом, а также после оператора <span class=""b"">return</span>  следует указать ключевое слово <span class=""b"">ref</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_769162""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = { 1, 2, 3, 4, 5, 6, 7 };</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">numberRef = </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">Find(4, numbers); </code><code class=""c# comments"">// ищем число 4 в массиве</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">numberRef = 9; </code><code class=""c# comments"">// заменяем 4 на 9</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(numbers[3]); </code><code class=""c# comments"">// 9</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Find(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">number, </code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; numbers.Length; i++)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(numbers[i] == number)</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">ref</code> <code class=""c# plain"">numbers[i]; </code><code class=""c# comments"">// возвращаем ссылку на адрес, а не само значение</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">IndexOutOfRangeException(</code><code class=""c# string"">""число не найдено""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В методе <code>Find</code> ищем число в массиве, но вместо самого значения числа возвращаем ссылку на него в памяти. Для этого в сигнатуре метода  в качестве типа результата функции указывается не просто <span class=""b"">int</span>, а <span class=""b"">ref int</span>.</p> <p>Кроме того, в самом методе после слова return также ставится <code>ref</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_305064""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">return</code> <code class=""c# keyword"">ref</code> <code class=""c# plain"">numbers[i];</code></div></div></td></tr></tbody></table></div></div> <p>Тем самым мы получаем не просто значение, а ссылку на объект в памяти.</p> <p>В методе Main для определения переменной, которая будет содержать ссылку, используется ключевое слово ref. При вызове метода также указывается слово ref:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_830839""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">numberRef = </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">Find(7, numbers);</code></div></div></td></tr></tbody></table></div></div> <p>В итоге переменная numberRef будет содержать ссылку на объект int, и через данную переменную в последствиии мы можем изменить объект по этой ссылке.</p> <p>Другой пример - возвращение ссылки на максимальное число из двух:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_10336""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">a = 5;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">b = 8;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">pointer = </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">Max(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">ref</code> <code class=""c# plain"">b);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">pointer = 34;   </code><code class=""c# comments"">// меняем значением максимального числа</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""a: {a}  b: {b}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// a: 5   b: 34</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Max(</code><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">n1, </code><code class=""c# keyword"">ref</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">n2)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(n1 &gt; n2)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">ref</code> <code class=""c# plain"">n1;</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">else</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">ref</code> <code class=""c# plain"">n2;</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Стоит обратить внимание, что параметры метода в этом случае определены с ключевым словом ref.</p> <p>При определении метода, который возвращает ссылку, следует учитывать, что такой метод естественно не может иметь тип void. Кроме того, такой метод не может  возвращать:</p> <ul> <li><p>Значение <code>null</code></p></li> <li><p>Константу</p></li> <li><p>Значение перечисления enum</p></li> <li><p>Свойство класса или структуры</p></li> <li><p>Поле для чтения (которое имеет модификатор read-only)</p></li> </ul>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Методы расширения</h2>   <p>Методы расширения (extension methods) позволяют добавлять новые методы в уже существующие типы без создания нового производного класса. Эта функциональность бывает особенно  полезна, когда нам хочется добавить в некоторый тип новый метод, но сам тип (класс или структуру) мы изменить не можем, поскольку у нас нет доступа к исходному коду.  Либо если мы не можем использовать стандартный механизм наследования, например, если классы определенны с модификатором sealed.</p> <p>Например, нам надо добавить для типа <code>string</code> новый метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_583006""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s = </code><code class=""c# string"">""Привет мир""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">char</code> <code class=""c# plain"">c = </code><code class=""c# string"">'и'</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = s.CharCount(c);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(i); </code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">StringExtension</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">CharCount(</code><code class=""c# keyword"">this</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">str, </code><code class=""c# keyword"">char</code> <code class=""c# plain"">c)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">counter = 0;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; str.Length; i++)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(str[i] == c)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">counter++;</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">counter;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для того, чтобы создать метод расширения, вначале надо создать статический класс, который и будет содержать этот метод. В данном случае это класс  <code>StringExtension</code>. Затем объявляем статический метод. Суть нашего метода расширения - подсчет количества определенных символов в строке.</p> <p>Собственно метод расширения - это обычный статический метод, который в качестве первого параметра всегда принимает такую конструкцию:  <code>this имя_типа название_параметра</code>, то есть в нашем случае <code>this string str</code>. Так как наш метод будет относиться к типу string,  то мы и используем данный тип.</p> <p>Затем у всех строк мы можем вызвать данный метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_430564""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">i = s.CharCount(c);</code></div></div></td></tr></tbody></table></div></div> <p>Причем нам уже не надо указывать первый параметр.  Значения для остальных параметров передаются в обычном порядке.</p> <p>Применение методов расширения очень удобно, но при этом надо помнить, что метод расширения никогда не будет вызван, если он имеет ту же сигнатуру,  что и метод, изначально определенный в типе.</p> <p>Также следует учитывать, что методы расширения действуют на уровне пространства имен. То есть, если добавить в проект другое пространство имен, то метод  не будет применяться к строкам, и в этом случае надо будет подключить пространство имен метода через директиву using.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Частичные классы и методы</h2>   <p>Классы могут быть частичными. То есть мы можем иметь несколько файлов с определением одного и того же класса, и при компиляции все  эти определения будут скомпилированы в одно.</p> <p>Например, определим в проекте два файла с кодом. Не столь важно как эти файлы будут называться. Например, PersonBase.cs и PersonAdditional.cs.  В одном из этих файлов (без разницы в каком именно) определим следующий класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_390530""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">partial</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""I am moving""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>А в другом файле определим следующий класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_891311""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">partial</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Eat()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""I am eating""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом, два файла в проекте содержит определение одного и того же класса Person, которые содержат два разных метода. И оба определенных здесь класса  являются частичными. Для этого они определяются с ключевым словом <span class=""b"">partial</span>.</p> <img alt=""Partial classes in C#"" src=""./pics/3.14.png""/> <p>Затем мы можем использовать все методы класса Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_472126""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">tom.Move();</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">tom.Eat();</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.ReadKey();</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Частичные методы</h3> <p>Частичные классы могут содержать частичные методы. Такие методы также опреляются с ключевым словом <span class=""b"">partial</span>. Причем  определение частичного метода без тела метода находится в одном частичном классе, а реализация этого же метода - в другом частичном классе.</p> <p>Например, изменим выше определенные классы Person. Первый класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_741337""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">partial</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">partial </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Read();</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">DoSomething()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Read();</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Второй класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_824624""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">partial</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">partial </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Read()</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""I am reading a book""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В первом классе определен метод <code>Read()</code>. Причем на момент определения первого класса неизвестно,  что представляет собой этот метод, какие действия он будет выполнять. Тем не менее мы знаем список его параметров и можем вызвать в первом классе.</p> <p>Второй класс уже непосредственно определяет тело метода <code>Read()</code>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_794948""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Program</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Main(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] args)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">tom.DoSomething();</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">} </code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что по умолчанию к частичным методам применяется ряд ограничений:</p> <ul> <li><p>Они не могут иметь модификаторы доступа</p></li> <li><p>Они имеют тип <span class=""b"">void</span></p></li> <li><p>Они не могут иметь out-параметры</p></li> <li><p>Они не могут иметь модификаторы <code>virtual, override, sealed, new</code> или <code>extern</code></p></li> </ul> <p>Если же они не соответствуют какому-то из этих ограничений, то для них должна быть предоставлена реализация. Как, например,  в следующем примере частичные методы применяют модификатор <code>public</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_748589""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// первая реализация класса и его методов</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">partial</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">partial </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Read();</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">DoSomething()</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Read();</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# comments"">// вторая реализация класса и его методов</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">public</code> <code class=""c# keyword"">partial</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">partial </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Read()</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""I am reading a book""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Анонимные типы</h2>   <p>Анонимные типы позволяют создать объект с некоторым набором свойств без определения класса. Анонимный тип определяется с помощью ключевого  слова <span class=""b"">var</span> и инициализатора объектов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_855021""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var user = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, Age = 34 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(user.Name);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае user - это объект анонимного типа, у которого определены два свойства Name и Age. И мы также можем использовать его свойства, как и у обычных  объектов классов. Однако тут есть ограничение - свойства анонимных типов доступны только для чтения.</p> <p>При этом во время компиляции компилятор сам будет создавать для него имя типа и использовать это имя при обращении к объекту. Нередко анонимные типы  имеют имя наподобие ""&lt;&gt;f__AnonymousType0'2"".</p> <p>Для исполняющей среды CLR анонимные типы будут также, как и классы, представлять ссылочный тип.</p> <p>Если в программе используются несколько объектов анонимных типов с одинаковым набором свойств, то для них компилятор создаст одно определение анонимного типа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_918843""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var user = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ Name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, Age = 34 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var student = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ Name = </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, Age = 21 };</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var manager = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, Age = 26, Company = </code><code class=""c# string"">""Microsoft""</code> <code class=""c# plain"">};</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(user.GetType().Name); </code><code class=""c# comments"">// &lt;&gt;f__AnonymousType0'2</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(student.GetType().Name); </code><code class=""c# comments"">// &lt;&gt;f__AnonymousType0'2</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(manager.GetType().Name); </code><code class=""c# comments"">// &lt;&gt;f__AnonymousType1'3</code></div></div></td></tr></tbody></table></div></div> <p>Здесь user и student будут иметь одно и то же определение анонимного типа. Однако подобные объекты нельзя преобразовать к какому-нибудь другому типу, например, классу,  даже если он имеет подобный набор свойств.</p> <p>Следует учитывать, что свойства анонимного объекта доступны для установки только в инициализаторе. Вне инициализатора присвоить им значение  мы не можем. Поэтому, например, в следующем случае мы столкнемся с ошибкой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_261849""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var student = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ Name = </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, Age = 21 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">student.Age = 32;   </code><code class=""c# comments"">// ! Ошибка</code></div></div></td></tr></tbody></table></div></div> <p>Кроме использованной выше формы инициализации, когда мы присваиваем свойствам некоторые значения, также можно использовать  <span class=""b"">инициализаторы с проекцией</span> (projection initializers), когда мы можем передать в инициализатор некоторые идиентификаторы,  имена которых будут использоваться как названия свойств:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_528715""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">); </code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 34;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var student = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ tom.Name, age }; </code><code class=""c# comments"">// инициализатор с проекцией</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(student.Name);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(student.age);</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае определение анонимного объекта фактически будет идентично следующему:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_193795""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var student = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{ Name = tom.Name, age = age};</code></div></div></td></tr></tbody></table></div></div> <p>Названия свойств и переменных (Name и age) будут использоваться в качесте названий свойств объекта.</p> <p>Также можно определять массивы объектов анонимных типов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_258874""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code><code class=""c# plain"">[]</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{Name=</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">},</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">{Name=</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">};</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var p </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(p.Name);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Зачем нужны анонимные типы? Иногда возникает задача использовать один тип в одном узком контексте или даже один раз. Создание класса для подобного типа  может быть избыточным. Если нам захочется добавить свойство, то мы сразу же на месте анонимного объекта это можем сделать. В случае с классом придется изменять еще и класс,  который может больше нигде не использоваться. Типичная ситуация - получение результата выборки из базы данных: объекты используются только для получения выборки, часто больше нигде не используются,  и классы для них создавать было бы излишне. А вот анонимный объект прекрасно подходит для временного хранения выборки.</p> <div class=""dop socialtop""><fieldset><legend>Дополнительные материалы</legend> <ul> <li><a href=""../questions/2.19.php"" title=""Вопросы для самопроверки""><i class=""fa fa-lg fa-question""></i><span class=""dop-txt"">Вопросы для самопроверки</span></a></li> </ul> </fieldset></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Кортежи</h2>   <p>Кортежи предоставляют удобный способ для работы с набором значений, который был добавлен в версии C# 7.0.</p> <p>Кортеж представляет набор значений, заключенных в круглые скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_367010""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tuple = (5, 10);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае определен кортеж tuple, который имеет два значения: 5 и 10. В дальнейшем мы можем обращаться к каждому из этих значений через поля  с названиями:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_881618""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Item[порядковый_номер_поля_в_кортеже]</code></div></div></td></tr></tbody></table></div></div> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_375333""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tuple = (5, 10);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tuple.Item1); </code><code class=""c# comments"">// 5</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tuple.Item2); </code><code class=""c# comments"">// 10</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tuple.Item1 += 26;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(tuple.Item1); </code><code class=""c# comments"">// 31</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае тип определяется неявно. Но мы также можем явным образом указать для переменной кортежа тип:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_219708""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">(</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">) tuple = (5, 10);</code></div></div></td></tr></tbody></table></div></div> <p>Так как кортеж содержит два числа, то в определении типа нам надо указать два числовых типа. Или другой пример определения кортежа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_751203""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">(</code><code class=""c# keyword"">string</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">double</code><code class=""c# plain"">) person = (</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 25, 81.23);</code></div></div></td></tr></tbody></table></div></div> <p>Первый элемент кортежа в данном случае представляет строку, второй элемент - тип int, а третий - тип double.</p> <p>Мы также можем дать названия полям кортежа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_622721""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tuple = (count:5, sum:10);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tuple.count); </code><code class=""c# comments"">// 5</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tuple.sum); </code><code class=""c# comments"">// 10</code></div></div></td></tr></tbody></table></div></div> <p>Теперь чтобы обратиться к полям кортежа используются их имена, а не названия Item1 и Item2.</p> <p>Мы даже можем выполнить декомпозицию кортежа на отдельные переменные:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_895199""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var (name, age) = (</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 23);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(name);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(age);     </code><code class=""c# comments"">// 23</code></div></div></td></tr></tbody></table></div></div> <p>Одной из задач, которую позволяет элегантно решить кортеж - это обмен значениями:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_374414""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">main = </code><code class=""c# string"">""Java""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">second = </code><code class=""c# string"">""C#""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">(main, second) = (second, main);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(main);    </code><code class=""c# comments"">// C#</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(second);  </code><code class=""c# comments"">// Java</code></div></div></td></tr></tbody></table></div></div> <p>Что можно использовать, например, при простейшей сортировке массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_129494""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] nums = { 54, 7, -41, 2, 4, 2, 89, 33, -5, 12 };</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// сортировка</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; nums.Length - 1; i++)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">j = i + 1; j &lt; nums.Length; j++)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(nums[i] &gt; nums[j])</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">(nums[i], nums[j]) =(nums[j], nums[i]);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# comments"">// вывод</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Вывод отсортированного массива""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; nums.Length; i++)</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(nums[i]);</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Кортеж как результат метода</h3> <p>Кортежи могут выступать в качестве результата функции. Например, одной из распространенных ситуаций является возвращение из функции двух и более значений, в  то время как функция может возвращать только одно значение. И кортежи представляют оптимальный способ для решения этой задачи:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_278419""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tuple = GetValues();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tuple.Item1); </code><code class=""c# comments"">// 1</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tuple.Item2); </code><code class=""c# comments"">// 3</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">(</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">int</code><code class=""c# plain"">) GetValues()</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">var result = (1, 3);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определен метод <code>GetValues()</code>, который возвращает кортеж. Кортеж определяется как набор значений, помещенных в круглые скобки.  И в данном случае мы возвращаем кортеж из двух элементов типа int, то есть два числа.</p> <p>Другой пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_569377""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tuple = GetValuesData(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 1, 2, 3, 4, 5, 6, 7 });</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(tuple.count);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tuple.sum);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">sum, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">count) GetValuesData(</code><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">var result = (sum: 0, count: numbers.Length);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">result.sum += n;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">return</code> <code class=""c# plain"">result;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Кортеж как параметр метода</h3> <p>И также кортеж может передаваться в качестве параметра в метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_182703""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">PrintPerson((</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37));   </code><code class=""c# comments"">// Tom - 37</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">PrintPerson((</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, 41));   </code><code class=""c# comments"">// Bob - 41</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintPerson((</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age) person)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{person.name} - {person.age}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в метод PrintPerson передается кортеж из двух элементов, первый из которых предоставляет строку, а второй - значение типа int.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Records</h2>   <p>Records представляют новый ссылочный тип, который появился в C#9. Ключевая особенность records состоит в том, что они могут представлять неизменяемый (immutable) тип,  который по умолчанию обладает рядом дополнительных возможностей по сравнению с классами и структурами.  Зачем нам нужны неизменяемые типы? Такие типы более безопасны в тех ситуациях, когда нам надо гарантировать, что данные объекта  не будут изменяться. В .NET в принципе уже есть неизменяемые типы, например, String.</p> <p>Стоит отметить, что начиная с версии C# 10 добавлена поддержка структур record,  соответственно мы можем создавать record-классы и record-структуры.</p> <p>Для определения records используется ключевое слово <span class=""b"">record</span>. Если определяется класс record, то ключевое слово <code>class</code> можно неиспользовать  при определении типа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_448387""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>или так</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_644482""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record </code><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При определении структуры record при объявлении типа надо использовать ключевое слово <span class=""b"">struct</span>: </p><div><div class=""syntaxhighlighter c#"" id=""highlighter_778998""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record </code><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Хотя типы record предназначены для создания неизменяемых типов, однако одно только применение ключевого слова <span class=""b"">record</span> не гарантирует  неизменяемость объектов record. Они являются неизменяемыми (immutable) только при определенных условиях. Например, мы можем написать так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_645335""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person.Name); </code><code class=""c# comments"">// Bob - данные изменились</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При выполнении этого кода не возникнет никакой ошибки, мы спокойно сможем изменять значения свойств объекта Person. Чтобы сделать  его действительно неизменяемым, для свойств вместо обычных сеттеров надо использовать модификатор <span class=""b"">init</span>.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_34001""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// ! ошибка - свойство изменить нельзя</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае мы получим ошибку при попытке изменить значение свойств объекта Person.</p> <p>Во многим records похожи на обычные классы и структуры, например, они могут абстрактными, их также можно наследовать либо запрещать наследование с помощью оператора sealed.  Тем не менее есть и ряд отличий. Рассмотрим некоторые основные отличия records от стандартных классов и структур.</p> <h3>Сравнение на равенство</h3> <p>При определении record компилятор генерирует метод <span class=""b"">Equals()</span> для сравнения с другим объектом.  При этом сравнение двух records производится на основе их значений. Например, рассмотрим следующий пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_173765""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var person2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person1.Equals(person2)); </code><code class=""c# comments"">// true</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">var user1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">var user2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(user1.Equals(user2));     </code><code class=""c# comments"">// false</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">User</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">User(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае при сравнении двух объектов record Person мы увидим, что они равны, так как их значения (значения свойств Name)  равны. Однако в случае с объектами класса User, которые имеют те же одинаковые значения мы увидим, что они не равны.  Так как сравнение records производится <span class=""b"">по значению</span>.</p> <p>Кроме того, для record уже по умолчанию реализованы операторы <span class=""b"">==</span> и <span class=""b"">!=</span>,  которые также сравнивают две record по значению:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_642014""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var person2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person1 == person2); </code><code class=""c# comments"">// true</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">var user1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">var user2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(user1 == user2);     </code><code class=""c# comments"">// false</code></div></div></td></tr></tbody></table></div></div> <h3>Оператор with</h3> <p>В отличие от классов records поддерживают инициализацию с помощью оператора <span class=""b"">with</span>. Он позволяет создать  одну record на основе другой record:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_141924""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var sam = tom with { Name = </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{sam.Name} - {sam.Age}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Sam - 37</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name; Age = age;</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>После record, значения которой мы хотим скопировать, указывается оператор <span class=""b"">with</span>, после которого в  фигурных скобках указываются значения для тех свойств, которые мы хотим изменить. Так, в данном случае переменная sam получает для свойства  Age значение из tom, а свойство Name изменяется.</p> <p>Эта возможность может быть особенно актуальна, если в record, которую мы хотим скопировать, множество свойств, из которых мы хотим поменять  одно-два.</p> <p>Если надо скопировать значения всех свойств, то можно оставить пустые фигурные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_428893""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var person2 = person1 with { };</code></div></div></td></tr></tbody></table></div></div> <h3>Позиционные records</h3> <p>Records могут принимать данные для свойств через конструктор, и в этом случае мы можем сократить их определение. Например,  пусть у нас есть следующая record Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_529835""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; init; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name; Age = age;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Deconstruct(</code><code class=""c# keyword"">out</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">out</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">age) =&gt; (name, age) = (Name, Age);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Кроме конструктора здесь реализован деконструктор, который позволяет разложить объект Person на кортеж значений. И мы  могли бы применить ее, например, следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_90508""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person (</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.Name); </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">var (personName, personAge) = person;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(personAge);     </code><code class=""c# comments"">// 37</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(personName);    </code><code class=""c# comments"">// Tom</code></div></div></td></tr></tbody></table></div></div> <p>Выше определенную record Person можно сократить до позиционной record:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_637894""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div></div></td></tr></tbody></table></div></div> <p>Это все определение типа. То есть мы говорим, что для типа Person будет создаваться конструктор, который принимает два параметра и присваивает  их значения соответственно свойствам Name и Age, и что также автоматически будет создаваться деконструктор.  Ее использование будет аналогично:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_174453""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person); </code><code class=""c# comments"">// Tom</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">var (personName, personAge) = person;</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(personAge);     </code><code class=""c# comments"">// 37</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(personName);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div></div></td></tr></tbody></table></div></div> <p>При необходимости также можно совмещать стандартное определение свойств и определение свойств через конструктор:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_825216""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37) { Company = </code><code class=""c# string"">""Google""</code><code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person.Company); </code><code class=""c# comments"">// Google</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">person.Company = </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(person.Company); </code><code class=""c# comments"">// Microsoft</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Company { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; } = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Позиционные структуры для чтения</h3> <p>Следует отметить различие между позиционными классами и структурами record. Свойства класса record, которые устанавливаются через параметры конструктора,  по умолчанию будут иметь модификатор <span class=""b"">init</span>. То есть после установки их значений через конструктор, мы больше не сможем их изменить:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_366530""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// ! Ошибка - значение нельзя изменить</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что это относится только к тем свойствам, которые устанавливаются через конструктор.</p> <p>Однако для позиционных структур record свойства будут иметь стандартные сеттеры, которые позволят изменять значения свойств:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_65070""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(person.Name); </code><code class=""c# comments"">// Bob - значение изменилось</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// структура record</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record </code><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div></div></td></tr></tbody></table></div></div> <p>Чтобы для подобных свойств структуры record использовался модификатор <span class=""b"">init</span> вместо обычных сеттеров, такую структуру надо определить с ключевым словом  <span class=""b"">readonly</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_720348""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">person.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;    </code><code class=""c# comments"">// ! Ошибка - значение свойства нельзя изменить</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// структура record доступна только для чтения</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# plain"">record </code><code class=""c# keyword"">struct</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div></div></td></tr></tbody></table></div></div> <h3>ToString</h3> <p>Небольшим преимуществом типов record также является то, что для них уже по умолчанию реализован метод <span class=""b"">ToString()</span>,  который выводит состояние объекта в отформатированном виде:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_254417""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(person); </code><code class=""c# comments"">// Person {Name = Tom, Age = 37}</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div></div></td></tr></tbody></table></div></div> <h3>Наследование</h3> <p>Как и обычные классы record-классы могут наследоваться:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_598999""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Employee(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, 41, </code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(tom); </code><code class=""c# comments"">// Person {Name = Tom, Age = 37}</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(bob); </code><code class=""c# comments"">// Person {Name = Bob, Age = 41, Company = Microsoft}</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age);</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">record Employee(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Age, </code><code class=""c# keyword"">string</code> <code class=""c# plain"">Company) : Person(Name, Age);</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс record Employee наследуется от Person.</p>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: р",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
            };
            if (form1Instance != null && comboBox8.SelectedIndex >= 0 && comboBox8.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox8.SelectedIndex;
                selectCombobox = 8;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }




        private async void comboBox9_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Интерфейсы</h1><h2>Определение интерфейсов</h2>   <p>Интерфейс представляет ссылочный тип, который может определять некоторый функционал - набор методов и свойств без реализации.  Затем этот функционал реализуют классы и структуры, которые применяют данные интерфейсы.</p> <h3>Определение интерфейса</h3> <p>Для определения интерфейса используется ключевое слово <span class=""b"">interface</span>. Как правило, названия интерфейсов в C# начинаются с заглавной буквы  <span class=""b"">I</span>, например, IComparable, IEnumerable (так называемая венгерская нотация), однако это не обязательное требование, а больше стиль программирования.</p> <p>Что может определять интерфейс? В целом интерфейсы могут определять следующие сущности:</p> <ul> <li><p>Методы</p></li> <li><p>Свойства</p></li> <li><p>Индексаторы</p></li> <li><p>События</p></li> <li><p>Статические поля и константы (начиная с версии C# 8.0)</p></li> </ul> <p>Однако интерфейсы не могут определять нестатические переменные. Например, простейший интерфейс, который определяет все эти компоненты:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_386352""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// константа</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">const</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">minSpeed = 0;     </code><code class=""c# comments"">// минимальная скорость</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// статическая переменная</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">maxSpeed = 60;   </code><code class=""c# comments"">// максимальная скорость</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// метод</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();                </code><code class=""c# comments"">// движение</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// свойство</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }   </code><code class=""c# comments"">// название</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MoveHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);  </code><code class=""c# comments"">// определение делегата для события</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// событие</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">event</code> <code class=""c# plain"">MoveHandler MoveEvent;    </code><code class=""c# comments"">// событие движения</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае определен интерфейс IMovable, который представляет некоторый движущийся объект. Данный интерфейс содержит различные компоненты,  которые описывают возможности движущегося объекта. То есть интерфейс описывает некоторый функционал, который должен быть у движущегося объекта.</p> <p>Методы и свойства интерфейса могут не иметь реализации, в этом они сближаются с абстрактными методами и свойствами абстрактных классов.  В данном случае интерфейс определяет метод Move, который будет представлять некоторое передвижение. Он не имеет реализации, не принимает никаких параметров и ничего не возвращает.</p> <p>То же самое в данном случае касается свойства Name. На первый взгляд оно похоже на автоматическое свойство. Но в реальности это определение свойства в интерфейсе, которое не имеет реализации, а не автосвойство.</p> <h3>Модификаторы доступа</h3> <p>Еще один момент в объявлении интерфейса: если его члены - методы и свойства не имеют модификаторов доступа, то фактически по умолчанию доступ  <span class=""b"">public</span>, так как цель интерфейса - определение функционала для реализации его классом. Это касается также и констант и  статических переменных, которые в классах и структурах по умолчанию имееют модификатор private. В интерфейсах же они имеют по умолчанию модификатор  public. И например, мы могли бы обратиться к константе minSpeed и переменной maxSpeed интерфейса IMovable:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_884150""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(IMovable.maxSpeed);   </code><code class=""c# comments"">// 60</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(IMovable.minSpeed);   </code><code class=""c# comments"">// 0</code></div></div></td></tr></tbody></table></div></div> <p>Но также, начиная с версии C# 8.0, мы можем явно указывать модификаторы доступа у компонентов интерфейса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_483856""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">const</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">minSpeed = 0;     </code><code class=""c# comments"">// минимальная скорость</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">maxSpeed = 60;   </code><code class=""c# comments"">// максимальная скорость</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }    </code><code class=""c# comments"">// название</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MoveHandler(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">message);  </code><code class=""c# comments"">// определение делегата для события</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">MoveHandler MoveEvent;    </code><code class=""c# comments"">// событие движения</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Как и классы, интерфейсы по умолчанию имеют уровень доступа <span class=""b"">internal</span>, то есть такой интерфейс доступен только  в рамках текущего проекта. Но с помощью модификатора public мы можем сделать интерфейс общедоступным:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_244849""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Реализация по умолчанию</h3> <p>Также начиная с версии C# 8.0 интерфейсы поддерживают реализацию методов и свойств по умолчанию. Это значит, что мы можем определить в интерфейсах полноценные методы и свойства, которые  имеют реализацию как в обычных классах и структурах. Например, определим реализацию метода Move по умолчанию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_394949""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// реализация метода по умолчанию</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Walking""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>С реализацией свойств по умолчанию в интерфейсах дело обстоит несколько сложнее, поскольку мы не можем определять в интерфейсах нестатические  переменные, соответственно в свойствах интерфейса мы не можем манипулировать состоянием объекта. Тем не менее реализацию по умолчанию для свойств мы тоже можем определять:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_823163""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// реализация метода по умолчанию</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Walking""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// реализация свойства по умолчанию</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// свойство только для чтения</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">MaxSpeed { </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ </code><code class=""c# keyword"">return</code> <code class=""c# plain"">0; } }</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что если интерфейс имеет приватные методы и свойства (то есть с модификатором private), то они должны иметь реализацию по умолчанию.  То же самое относится к статическим методам (не обязательно приватным):</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_528075""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(IMovable.MaxSpeed);   </code><code class=""c# comments"">// 60</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">IMovable.MaxSpeed = 65;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(IMovable.MaxSpeed);   </code><code class=""c# comments"">// 65</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">time = IMovable.GetTime(500, 10);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(time);    </code><code class=""c# comments"">// 50</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">const</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">minSpeed = 0;     </code><code class=""c# comments"">// минимальная скорость</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">private</code> <code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">maxSpeed = 60;   </code><code class=""c# comments"">// максимальная скорость</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// находим время, за которое надо пройти расстояние distance со скоростью speed</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">double</code> <code class=""c# plain"">GetTime(</code><code class=""c# keyword"">double</code> <code class=""c# plain"">distance, </code><code class=""c# keyword"">double</code> <code class=""c# plain"">speed) =&gt; distance / speed;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">static</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">MaxSpeed</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; maxSpeed;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">set</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(value &gt; 0) maxSpeed = value;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Добавление интерфейса</h3> <p>Стоит отметить, что в Visual Studio есть специальный компонент для добавления нового интерфейса в отдельном файле.  Для добавления интерфейса в проект можно нажать правой кнопкой мыши на проект и в появившемся контекстном меню выбрать <span class=""b"">Add</span>-&gt;<span class=""b""> New Item...</span> и в диалоговом окне добавления нового компонента выбрать пункт <span class=""b"">Interface</span>:</p>  <p>Хотя мы также может добавить стандартный файл класса или любой другой файл кода C# и в нем определить интерфейс.</p> <div class=""dop socialtop""></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Применение интерфейсов</h2>   <p>Интерфейс представляет некое описание типа, набор компонентов, который должен иметь тип данных. И, собственно, мы не можем создавать объекты интерфейса напрямую с  помощью конструктора, как например, в классах:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_557142""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMovable m = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">IMovable(); </code><code class=""c# comments"">// ! Ошибка, так сделать нельзя</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В конечном счете интерфейс предназначен для реализации в классах и структурах. Например, реализуем выше определенный интерфейс IMovable:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_407970""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// применение интерфейса в классе</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IMovable</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Человек идет""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// применение интерфейса в структуре</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Car : IMovable</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Машина едет""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При применении интерфейса, как и при наследовании после имени класса или структуры указывается двоеточие и затем идут названия применяемых интерфейсов.  При этом класс должен реализовать все методы и свойства применяемых интерфейсов, если эти методы и свойства не имеют реализации по умолчанию.</p> <p>Если методы и свойства интерфейса не имеют модификатора доступа, то по умолчанию они являются публичными, при реализации этих методов и свойств в  классе и структуре к ним можно применять только модификатор <code>public</code>.</p> <p>Применение интерфейса в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_157342""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Car car = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Car();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">DoAction(person);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">DoAction(car);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">DoAction(IMovable movable) =&gt; movable.Move();</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IMovable</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Человек идет""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">struct</code> <code class=""c# plain"">Car : IMovable</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Машина едет""</code><code class=""c# plain"">);</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данной программе определен метод <code>DoAction()</code>, который в качестве параметра принимает объект интерфейса  IMovable. На момент написания кода мы можем не знать, что это будет за объект - какой-то класс или структура. Единственное,  в чем мы можем быть уверены, что этот объект обязательно реализует метод Move и мы можем вызвать этот метод.</p> <p>Иными словами, интерфейс - это контракт, что какой-то определенный тип обязательно реализует некоторый функционал.</p> <p>Консольный вывод данной программы:</p> <div class=""console""> <pre class=""consoletext"">Человек идет Машина едет </pre> </div> <h3>Реализация интерфейсов по умолчанию</h3> <p>Начиная с версии C# 8.0 интерфейсы поддерживают реализацию методов и свойств по умолчанию. Зачем это нужно? Допустим, у нас есть куча классов, которые реализуют некоторый интерфейс. Если мы добавим в этот интерфейс новый метод,  то мы будем обязаны реализовать этот метод во всех классах, применяющих данный интерфейс. Иначе подобные классы просто не будут компилироваться. Теперь вместо реализации метода во  всех классах нам достаточно определить его реализацию по умолчанию в интерфейсе. Если класс не реализует метод, будет применяться реализация по умолчанию.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_928047""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMovable tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Car tesla = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Car();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.Move();     </code><code class=""c# comments"">// Walking</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tesla.Move();   </code><code class=""c# comments"">// Driving</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Walking""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IMovable { }</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Car : IMovable</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Driving""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае интерфейс <code>IMovable</code> определяет реализацию по умолчанию для метода <code>Move</code>. Класс Person не реализует этот метод, поэтому он применяет  реализацию по умолчанию в отличие от класса <code>Car</code>, который определяет свою реализацию для метода Move.</p> <p>Стоит отметить, что хотя для объекта класса <code>Person</code> мы можем вызвать метод <code>Move</code> - ведь класс <code>Person</code> применяет интерфейс <code>IMovable</code>, тем не менее мы не можем написать так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_72102""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">tom.Move();     </code><code class=""c# comments"">// Ошибка - метод Move не определен в классе Person</code></div></div></td></tr></tbody></table></div></div> <h3>Множественная реализация интерфейсов</h3> <p>Интерфейсы имеют еще одну важную функцию: в C# не поддерживается множественное наследование, то есть мы можем унаследовать класс  только от одного класса, в отличие, скажем, от языка С++, где множественное наследование можно использовать. Интерфейсы  позволяют частично обойти это ограничение, поскольку в C# классы и структуры могут реализовать сразу несколько интерфейсов. Все реализуемые интерфейсы  указываются через запятую:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_400193""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">myClass: myInterface1, myInterface2, myInterface3, ...</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Рассмотрим на примере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_249654""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Message hello = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">hello.Print();  </code><code class=""c# comments"">// Hello World</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMessage</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IPrintable</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Print();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message : IMessage, IPrintable</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; Text = text;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print()=&gt; Console.WriteLine(Text);</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае определены два интерфейса. Интерфейс IMessage определяет свойство Text, которое представляет текст сообщения. А интерфейс IPrintable  определяет метод Print.</p> <p>Класс Message реализует оба интерфейса и затем применяется в программе.</p> <h3>Интерфейсы в преобразованиях типов</h3> <p>Все сказанное в отношении преобразования типов характерно и для интерфейсов. Поскольку класс Message реализует интерфейс IMessage,  то переменная типа IMessage может хранить ссылку на объект типа Message:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_960880""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// Все объекты Message являются объектами IMessage</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">IMessage hello = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello METANIT.COM""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(hello.Text); </code><code class=""c# comments"">// Hello METANIT.COM</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# comments"">// Не все объекты IMessage являются объектами Message, необходимо явное приведение</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// Message someMessage = hello; // ! Ошибка</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# comments"">// Интерфейс IMessage не имеет свойства Print, необходимо явное приведение</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// hello.Print();  // ! Ошибка</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# comments"">// если hello представляет класс Message, выполняем преобразование</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(hello </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Message someMessage) someMessage.Print();</code></div></div></td></tr></tbody></table></div></div> <p>Преобразование от класса к его интерфейсу, как и преобразование от производного типа к базовому, выполняется автоматически. Так как любой объект Message  реализует интерфейс IMessage.</p> <p>Обратное преобразование - от интерфейса к реализующему его классу будет аналогично преобразованию от базового класса к производному.  Так как не каждый объект IMessage является объектом Message (ведь интерфейс IMessage могут реализовать и другие классы),  то для подобного преобразования необходима операция приведения типов. И если мы хотим обратиться к методам класса Message, которые не определены в интерфейсе IMessage, но являются частью класса Message,  то нам надо явным образом выполнить преобразование типов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_531429""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(hello </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Message someMessage) someMessage.Print();</code></div></div></td></tr></tbody></table></div></div> <div class=""dop socialtop""></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Явная реализация интерфейсов</h2>   <p>Кроме неявного применения интерфейсов, которое было рассмотрено в прошлой статье, существует также явная реализация интерфейса. При явной реализации  указывается название метода или свойства вместе с названием интерфейса. При этом при реализации мы не можем использовать какие-либо модификаторы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_919871""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">IAction.Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in Base Class""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Следует учитывать, что при явной реализации интерфейса его методы и свойства <span class=""b"">не являются</span> частью интерфейса класса.  Поэтому напрямую через объект класса мы к ним обратиться не сможем:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_607563""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">BaseAction baseAction1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">BaseAction();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// baseAction1.Move();  // ! Ошибка - в BaseAction нет метода Move</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// необходимо приведение к типу IAction</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// небезопасное приведение</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">((IAction)baseAction1).Move();   </code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// безопасное приведение </code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(baseAction1 </code><code class=""c# keyword"">is</code> <code class=""c# plain"">IAction action) action.Move();</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// или так</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">IAction baseAction2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">BaseAction();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">baseAction2.Move();</code></div></div></td></tr></tbody></table></div></div> <p>В какой ситуации может действительно понадобиться явная реализация интерфейса? Например, когда класс применяет несколько интерфейсов, но  они имеют один и тот же метод с одним и тем же возвращаемым результатом и одним и тем же набором параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_48533""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : ISchool, IUniversity</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Study() =&gt; Console.WriteLine(</code><code class=""c# string"">""Учеба в школе или в университете""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">ISchool</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Study();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IUniversity</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Study();</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Класс Person определяет один метод <code>Study()</code>, создавая одну общую реализацию для обоих примененных интерфейсов. И вне зависимости от того,  будем ли мы рассматривать объект Person как объект типа ISchool или IUniversity, результат метода будет один и тот же.</p> <p>Чтобы разграничить реализуемые интерфейсы, надо явным образом применить интерфейс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_793113""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : ISchool, IUniversity</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">ISchool.Study() =&gt; Console.WriteLine(</code><code class=""c# string"">""Учеба в школе""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">IUniversity.Study() =&gt; Console.WriteLine(</code><code class=""c# string"">""Учеба в университете""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Использование:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_692727""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person person = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">((ISchool)person).Study();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">((IUniversity)person).Study();</code></div></div></td></tr></tbody></table></div></div> <p>Другая ситуация, когда в базовом классе уже реализован интерфейс, но необходимо в производном классе по-своему реализовать интерфейс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_337240""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt;Console.WriteLine(</code><code class=""c# string"">""Move in BaseAction""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">HeroAction : BaseAction, IAction</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">IAction.Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in HeroAction""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Несмотря на то, что базовый класс BaseAction уже реализовал интерфейс IAction, но производный класс по-своему реализует его.  Применение классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_773157""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">HeroAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move();            </code><code class=""c# comments"">// Move in BaseAction</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">((IAction)action1).Move(); </code><code class=""c# comments"">// Move in HeroAction</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">IAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">action2.Move();             </code><code class=""c# comments"">// Move in HeroAction</code></div></div></td></tr></tbody></table></div></div> <h3>Модификаторы доступа</h3> <p>Члены интерфейса могут иметь разные модификаторы доступа. Если модификатор доступа не public, а какой-то другой, то при реализации метода, свойства или события интерфейса  в классах и структурах мы можем применять два способа. Во-первых, можно также использовать явную реализацию интерфейса, реализовав все необходимые интерфейса без модификаторов доступа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_28791""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMovable tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// подписываемся на событие</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.MoveEvent += () =&gt; Console.WriteLine($</code><code class=""c# string"">""{tom.Name} is moving""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Move();</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MoveHandler();    </code><code class=""c# comments"">// делегат перемещения</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">MoveHandler MoveEvent;</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IMovable</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// явная реализация события - дополнительно создается переменная</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">MoveHandler? moveEvent;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">event</code> <code class=""c# plain"">MoveHandler IMovable.MoveEvent</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">add =&gt; moveEvent += value;</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">remove =&gt; moveEvent -= value;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// явная реализация свойства - в виде автосвойства</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">IMovable.Name { </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; name; }</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// явная реализация метода</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">IMovable.Move()</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{name} is walking""</code><code class=""c# plain"">);</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">moveEvent?.Invoke();</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number32 index31 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае опять же надо учитывать, что напрямую мы можем обратиться к подобным методам, свойствам и событиям через переменную интерфейса, но не переменную класса.</p> <p>Альтернативный вариант представляет неявная реализация с модификатором <span class=""b"">public</span></p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_620150""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Person tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// подписываемся на событие</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">tom.MoveEvent += () =&gt; Console.WriteLine($</code><code class=""c# string"">""{tom.Name} is moving""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">tom.Move();</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">delegate</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">MoveHandler();</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">protected</code> <code class=""c# keyword"">internal</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">MoveHandler MoveEvent;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IMovable</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">name;</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// явная реализация события - дополнительно создается переменная</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">MoveHandler? moveEvent;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// неявная реализация события с модификатором public</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">event</code> <code class=""c# plain"">MoveHandler MoveEvent</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">add =&gt; moveEvent += value;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">remove =&gt; moveEvent -= value;</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// неявная реализация свойства - в виде автосвойства, но с модификатором public</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code> <code class=""c# plain"">=&gt; name; }</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.name = name;</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// неявная реализация метода, но с модификатором public </code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{name} is walking""</code><code class=""c# plain"">);</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">moveEvent?.Invoke();</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number34 index33 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае к методам, свойствам и событиям интейрфейса можно обращаться через переменную класса.</p> <div class=""dop socialtop""></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Реализация интерфейсов в базовых и производных классах</h2>   <p>Если класс применяет интерфейс, то этот класс должен реализовать все методы и свойства интерфейса, которые не имеют реализации по умолчанию. Однако также можно и не реализовать методы, сделав их абстрактными,  переложив право их реализации на производные классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_762450""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMovable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">abstract</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IMovable</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">abstract</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Driver : Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Шофер ведет машину""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При реализации интерфейса учитываются также методы и свойства, унаследованные от базового класса. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_64250""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IAction action = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action.Move();  </code><code class=""c# comments"">// Move in BaseAction</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in BaseAction""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">HeroAction : BaseAction, IAction{ }</code></div></div></td></tr></tbody></table></div></div> <p>Здесь класс HeroAction реализует интерфейс IAction, однако для реализации метода Move из интерфейса применяется метод Move, унаследованный от  базового класса BaseAction. Таким образом, класс HeroAction может не реализовать метод Move, так как этот метод уже определен в базовом классе BaseAction.</p> <p>Следует отметить, что если класс одновременно наследует другой класс и реализует интерфейс, как в примере выше класс HeroAction,  то название базового класса должно быть указано до реализуемых интерфейсов:</p> <pre class=""b"">class HeroAction : BaseAction, IAction</pre> <h3>Изменение реализации интерфейсов в производных классах</h3> <p>Может сложиться ситуация, что базовый класс реализовал интерфейс, но в классе-наследнике необходимо изменить реализацию этого интерфейса. Что в этом случае делать?  В этом случае мы можем использовать либо переопределение, либо скрытие метода или свойства интерфейса.</p> <p>Первый вариант - переопределение виртуальных/абстрактных методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_676059""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">virtual</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in BaseAction""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">HeroAction : BaseAction</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">override</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in HeroAction""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В базовом классе BaseAction реализованный метод интерфейса определен как виртуальный (можно было бы также сделать его абстрактным),  а в производном классе он переопределен.</p> <p>При вызове метода через переменную интерфейса, если она ссылается на объект производного класса, будет использоваться реализация из  производного класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_70838""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">BaseAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move();            </code><code class=""c# comments"">// Move in HeroAction</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">action2.Move();             </code><code class=""c# comments"">// Move in HeroAction</code></div></div></td></tr></tbody></table></div></div> <p>Второй вариант - скрытие метода в производном классе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_45581""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in BaseAction""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">HeroAction : BaseAction</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in HeroAction""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Также используем эти классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_844491""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">BaseAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move();            </code><code class=""c# comments"">// Move in BaseAction</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">action2.Move();           </code><code class=""c# comments"">// Move in BaseAction</code></div></div></td></tr></tbody></table></div></div> <p>Так как интерфейс реализован именно в классе BaseAction, то через переменную action2 можно обратиться только к реализации метода Move из базового класса BaseAction.</p> <p>Третий вариант - повторная реализация интерфейса в классе-наследнике:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_265628""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in BaseAction""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">HeroAction : BaseAction, IAction</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt;  Console.WriteLine(</code><code class=""c# string"">""Move in HeroAction""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае реализации этого метода из базового класса будет игнорироваться:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_610655""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">BaseAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move();            </code><code class=""c# comments"">// Move in BaseAction</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">action2.Move();             </code><code class=""c# comments"">// Move in HeroAction</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">HeroAction action3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">action3.Move();             </code><code class=""c# comments"">// Move in HeroAction</code></div></div></td></tr></tbody></table></div></div> <p>Также стоит отметить, что в случае с переменной action1 по-прежнему действует ранее связывание, в силу которого через эту переменную можно вызвать реализацию метода  Move только из базового класса, который эта переменная представляет.</p> <p>Четвертый вариант: явная реализация интерфейса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_382896""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in BaseAction""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">HeroAction : BaseAction, IAction</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in HeroAction""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">// явная реализация интерфейса</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">IAction.Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""Move in IAction""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае для переменной IAction будет использоваться явная реализация интерфейса IAction, а для переменной HeroAction  по прежнему будет использоваться неявная реализация:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_507268""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">BaseAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move();            </code><code class=""c# comments"">// Move in BaseAction</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">action2.Move();             </code><code class=""c# comments"">// Move in IAction</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">HeroAction action3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">HeroAction();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">action3.Move();             </code><code class=""c# comments"">// Move in HeroAction</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Наследование интерфейсов</h2>   <p>Интерфейсы, как и классы, могут наследоваться:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_643446""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IRunAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Run();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">BaseAction : IRunAction</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move()</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Move""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Run()</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Run""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При применении этого интерфейса класс BaseAction должен будет реализовать как методы и свойства интерфейса IRunAction, так и методы и  свойства базового интерфейса IAction, если эти методы и свойства не имеют реализации по умолчанию.</p> <p>Однако в отличие от классов мы не можем применять к интерфейсам модификатор <span class=""b"">sealed</span>, чтобы запретить наследование интерфейсов.</p> <p>Также мы не можем применять к интерфейсам модификатор <span class=""b"">abstract</span>, поскольку интерфейс фактически итак, как правило, предоставляет абстрактный функционал,  который должен быть реализован в классе или структуре (за исключением методов и свойств с реализацией по умолчанию).</p> <p>Однако методы интерфейсов могут использовать ключевое слово <span class=""b"">new</span> для скрытия методов из базового интерфейса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_924764""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">RunAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move(); </code><code class=""c# comments"">// I am moving</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IRunAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">RunAction();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">action2.Move(); </code><code class=""c# comments"">// I am running</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""I am moving""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IRunAction : IAction</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">// скрываем реализацию из IAction</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""I am running""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">RunAction : IRunAction { }</code></div></div></td></tr></tbody></table></div></div> <p>Здесь метод Move из IRunAction скрывает метод Move из базового интерфейса IAction. Это имеет смысл, если в базовом интерфейсе определена  реализация по умолчанию, как в случае выше, которую нужно переопределить. И в случае выше, если переменная представляет тип IRunAction, то для метода Move  вызывается реализация этого интерфейса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_39779""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IRunAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">RunAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action2.Move(); </code><code class=""c# comments"">// I am running</code></div></div></td></tr></tbody></table></div></div> <p>Иначе если переменная представляет тип IAction, то для метода Move применяется реализация этого интерфейса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_861978""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">RunAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move(); </code><code class=""c# comments"">// I am moving</code></div></div></td></tr></tbody></table></div></div> <p>Но класс RunAction может переопределить метод Move сразу для обоих интерфейсов.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_50905""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IAction action1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">RunAction();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">action1.Move(); </code><code class=""c# comments"">// I am tired</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IRunAction action2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">RunAction();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">action2.Move(); </code><code class=""c# comments"">// I am tired</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""I am moving""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IRunAction : IAction</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""I am running""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">RunAction : IRunAction</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Move() =&gt; Console.WriteLine(</code><code class=""c# string"">""I am tired""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При наследовании интерфейсов следует учитывать, что, как и при наследовании классов, производный интерфейс должен иметь  тот же уровень доступа или более строгий, чем базовый интерфейс. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_156860""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">internal</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IRunAction : IAction</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Run();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Но не наоборот. Например, в следующем случае мы получим ошибку, и программа не скомпилируется, так как производный  интерфейс имеет менее строгий уровень доступа, нежели базовый:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_134251""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">internal</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IAction</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Move();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IRunAction : IAction   </code><code class=""c# comments"">// ошибка IRunAction может быть только internal</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Run();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Интерфейсы в обобщениях</h2>   <h3>Интерфейсы как ограничения обобщений</h3> <p>Интерфейсы могут выступать в качестве ограничений обобщений. При этом если в качестве ограничения можно указаь только один класс, то интерфейсов можно указать несколько.</p> <p>Допустим, у нас есть следующие интерфейсы и класс, который их реализует:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_936775""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMessage</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; } </code><code class=""c# comments"">// текст сообщения</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IPrintable</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Print();</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message : IMessage, IPrintable</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; Text = text;</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine(Text);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Интерфейс IMessage представляет интерфейс сообщения и определяет свойство Text для хранения текста сообщения. Интерфейс IPrintable определяет метод  Print для условной печати сообщения. И непосредственно класс сообщения  - класс Message реализует эти интерфейсы.</p> <p>Используем выше перечисленные интерфейсы в качестве ограничений обобщенного класса:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_253403""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Messenger&lt;T&gt; where T: IMessage, IPrintable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Send(T message)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Отправка сообщения:""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">message.Print();</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс условного мессенджера использует параметр T - тип, который который реализует сразу два интерфейса IMessage и IPrintable.  Например, выше определен класс Message, который реализует оба интерфейса, поэтому мы можем данным типом типизировать объекты Messenger:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_927880""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// создаем мессенджер</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var telegram = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Messenger&lt;Message&gt;();</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// создаем сообщение</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">var message = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Message(</code><code class=""c# string"">""Hello World!""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// отправляем сообщение</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">telegram.Send(message);</code></div></div></td></tr></tbody></table></div></div> <p>Также параметр T может представлять интерфейс, который наследуется от обоих интерфейсов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_417994""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IPrintableMessage: IPrintable, IMessage { }</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">PrintableMessage : IPrintableMessage</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">PrintableMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; Text = text;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Print() =&gt; Console.WriteLine(Text);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае объекты Messenger мы можем типизировать типом IPrintableMessage:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_981317""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var telegram = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Messenger&lt;IPrintableMessage&gt;();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var message = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">PrintableMessage(</code><code class=""c# string"">""Hello World!""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">telegram.Send(message);</code></div></div></td></tr></tbody></table></div></div> <h3>Обобщенные интерфейсы</h3> <p>Как и классы, интерфейсы могут быть обобщенными:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_776349""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IUser&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">User&lt;T&gt; : IUser&lt;T&gt;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">T Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">User(T id) =&gt; Id = id;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Интерфейс IUser типизирован параметром T, который при реализации интерфейса используется в классе User. В частности, переменная _id определена как T,  что позволяет нам использовать для id различные типы.</p> <p>Определим две реализации: одна в качестве параметра будет использовать тип int, а другая - тип string:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_510425""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IUser&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; user1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;(6789);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(user1.Id);    </code><code class=""c# comments"">// 6789</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IUser&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; user2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">User&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# string"">""12345""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(user2.Id);    </code><code class=""c# comments"">// 12345</code></div></div></td></tr></tbody></table></div></div> <p>Также при реализации интерфейса мы можем явным образом указать, какой тип будет использоваться для параметра T:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_113355""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">IntUser : IUser&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Id { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IntUser(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">id) =&gt; Id = id;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_310158""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IUser&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; user1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">IntUser(2345);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(user1.Id);    </code><code class=""c# comments"">// 2345</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IntUser user2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">IntUser(9840);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(user2.Id);    </code><code class=""c# comments"">// 9840</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Копирование объектов. Интерфейс ICloneable</h2>   <p>Поскольку классы представляют ссылочные типы, то это накладывает некоторые ограничения на их использование. В частности, допустим, у нас есть  следующий класс:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_630292""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Создадим один объект Person и попробуем скопировать его данные в другой объект Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_533964""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 23);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var bob = tom;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">bob.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(tom.Name); </code><code class=""c# comments"">// Bob</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае объекты tom и bob будут указывать на один и тот же объект в памяти, поэтому изменения свойств для переменной bob затронут также и переменную tom.</p> <p>Чтобы переменная bob указывала на новый объект, но при этом имела значения из переменной tom, мы можем применить клонирование с помощью реализации интерфейса <span class=""b"">ICloneable</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_843237""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">ICloneable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">object</code> <code class=""c# plain"">Clone();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Поверхностное копирование</h3> <p>Реализация интерфейса в классе Person могла бы выглядеть следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_242185""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : ICloneable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">object</code> <code class=""c# plain"">Clone()</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">Person(Name, Age);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Использование:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_645360""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 23);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var bob = (Person)tom.Clone();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">bob.Name = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(tom.Name); </code><code class=""c# comments"">// Tom</code></div></div></td></tr></tbody></table></div></div> <p>Теперь все нормально копируется, изменения в свойствах переменной bob не сказываются на свойствах из переменной tom.</p> <p>Для сокращения кода копирования мы можем использовать специальный метод <span class=""b"">MemberwiseClone()</span>, который возвращает копию объекта:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_401119""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : ICloneable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">object</code> <code class=""c# plain"">Clone()</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">MemberwiseClone();</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Этот метод реализует <span class=""b"">поверхностное (неглубокое) копирование</span>. Однако данного копирования может быть недостаточно. Например,  пусть класс Person содержит ссылку на объект класса Company:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_743498""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : ICloneable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company Work { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age, Company company)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Work = company;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">object</code> <code class=""c# plain"">Clone() =&gt; MemberwiseClone();</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае при копировании новая копия будет указывать на тот же объект Company:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_584184""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 23, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(</code><code class=""c# string"">""Microsoft""</code><code class=""c# plain"">));</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var bob = (Person)tom.Clone();</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">bob.Work.Name = </code><code class=""c# string"">""Google""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(tom.Work.Name); </code><code class=""c# comments"">// Google - а должно быть Microsoft</code></div></div></td></tr></tbody></table></div></div> <h3>Глубокое копирование</h3> <p>Поверхностное копирование работает только для свойств, представляющих примитивные типы, но не для сложных объектов. И в этом случае  надо применять <span class=""b"">глубокое копирование</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_233222""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : ICloneable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company Work { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age, Company company)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Age = age;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Work = company;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">object</code> <code class=""c# plain"">Clone() =&gt; </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(Name, Age, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(Work.Name));</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">{</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Сортировка объектов. Интерфейс IComparable</h2>   <p>Большинство встроенных в .NET классов коллекций и массивы поддерживают сортировку. С помощью одного метода, который, как правило, называется  <code>Sort()</code> можно сразу отсортировать по возрастанию весь набор данных. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_607672""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] numbers = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[] { 97, 45, 32, 65, 83, 23, 15 };</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Array.Sort(numbers);</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(n);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// 15 23 32 45 65 83 97</code></div></div></td></tr></tbody></table></div></div> <p>Однако метод Sort по умолчанию работает только для наборов примитивных типов, как int или string. Для сортировки наборов сложных объектов  применяется интерфейс <span class=""b"">IComparable</span>. Он имеет всего один метод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_497307""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IComparable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">CompareTo(</code><code class=""c# keyword"">object</code><code class=""c# plain"">? o);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>CompareTo</code> предназначен для сравнения текущего объекта с объектом, который передается в качестве параметра <code>object? o</code>.  На выходе он возвращает целое число, которое может иметь одно из трех значений:</p> <ul> <li><p>Меньше нуля. Значит, текущий объект должен находиться перед объектом, который передается в качестве параметра</p></li> <li><p>Равен нулю. Значит, оба объекта равны </p></li> <li><p>Больше нуля. Значит, текущий объект должен находиться после объекта, передаваемого в качестве параметра</p></li> </ul> <p>Например, имеется класс Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_314370""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IComparable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name; Age = age;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">CompareTo(</code><code class=""c# keyword"">object</code><code class=""c# plain"">? o)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code><code class=""c# plain"">(o </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person person) </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Name.CompareTo(person.Name);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code> <code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentException(</code><code class=""c# string"">""Некорректное значение параметра""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в качестве критерия сравнения выбрано свойство Name объекта Person. Поэтому при сравнении здесь фактически идет сравнение значения свойства  Name текущего объекта и свойства Name объекта, переданного через параметр. Если вдруг объект не удастся привести к типу Person, то выбрасывается исключение.</p> <p>Применение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_337595""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var bob = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, 41);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var sam = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, 25);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Person[] people = { tom, bob, sam};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Array.Sort(people);</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(Person person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{person.Name} - {person.Age}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>И в данном случае мы получим следующий консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">Bob - 41 Sam - 25 Tom - 37 </pre> </div> <p>Интерфейс IComparable имеет обобщенную версию, поэтому мы могли бы сократить и упростить его применение в классе Person:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_454891""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IComparable&lt;Person&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name; Age = age;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">CompareTo(Person? person)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code><code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# keyword"">null</code><code class=""c# plain"">) </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentException(</code><code class=""c# string"">""Некорректное значение параметра""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Name.CompareTo(person.Name);</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Аналогичным образом мы можем сравнивать по возрасту:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_225786""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person : IComparable&lt;Person&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name; Age = age;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">CompareTo(Person? person)</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code><code class=""c# plain"">(person </code><code class=""c# keyword"">is</code> <code class=""c# keyword"">null</code><code class=""c# plain"">) </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentException(</code><code class=""c# string"">""Некорректное значение параметра""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">Age - person.Age;</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Применение компаратора</h3> <p>Кроме интерфейса IComparable платформа .NET также предоставляет интерфейс IComparer:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_426260""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IComparer&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">Compare(T? x, T? y);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод Compare предназначен для сравнения двух объектов o1 и o2. Он также возвращает три значения, в зависимости от результата сравнения: если первый объект больше второго,  то возвращается число больше 0, если меньше - то число меньше нуля; если оба объекта равны, возвращается ноль.</p> <p>Создадим компаратор объектов Person. Пусть он сравнивает объекты в зависимости от длины строки - значения свойства Name:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_483521""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">PeopleComparer : IComparer&lt;Person&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Compare(Person? p1, Person? p2)</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code><code class=""c# plain"">(p1 </code><code class=""c# keyword"">is</code> <code class=""c# keyword"">null</code> <code class=""c# plain"">|| p2 </code><code class=""c# keyword"">is</code> <code class=""c# keyword"">null</code><code class=""c# plain"">) </code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentException(</code><code class=""c# string"">""Некорректное значение параметра""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# plain"">p1.Name.Length - p2.Name.Length;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Age { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">age)</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Name = name; Age = age;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае используется обобщенная версия интерфейса IComparer, чтобы не делать излишних преобразований типов. Применение компаратора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_423447""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var alice = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, 41);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var tom = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, 37);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var kate = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, 25);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Person[] people = { alice, tom, kate};</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Array.Sort(people, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">PeopleComparer());</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(Person person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{person.Name} - {person.Age}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Объект компаратора указывается в качестве второго параметра метода <code>Array.Sort()</code>. При этом не важно, реализует ли класс Person интерфейс  IComparable или нет. Правила сортировки, установленные компаратором, будут иметь больший приоритет. В начале будут идти объекты Person, у которых имена меньше,  а в конце - у которых имена длиннее:</p> <div class=""console""> <pre class=""consoletext"">Tom - 37 Kate - 25 Alice - 41 </pre> </div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Ковариантность и контравариантность обобщенных интерфейсов</h2>   <p>Понятия ковариантности и контравариантности связаны с возможностью использовать в приложении вместо некоторого типа другой тип, который находится ниже или выше в иерархии наследования.</p> <p>Имеется три возможных варианта поведения:</p> <ul> <li><p><span class=""b"">Ковариантность</span>: позволяет использовать более конкретный тип, чем заданный изначально</p></li> <li><p><span class=""b"">Контравариантность</span>: позволяет использовать более универсальный тип, чем заданный изначально</p></li> <li><p><span class=""b"">Инвариантность</span>: позволяет использовать только заданный тип</p></li> </ul> <p>C# позволяет создавать ковариантные и контравариантные обобщенные интерфейсы. Эта функциональность  повышает гибкость при использовании обобщенных интерфейсов в программе. По умолчанию все обобщенные интерфейсы являются инвариантными.</p> <p>Для рассмотрения ковариантных и контравариантных интерфейсов возьмем следующие классы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_1356""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Message</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Text { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; </code><code class=""c# keyword"">set</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Message(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text) =&gt; Text = text;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">EmailMessage : Message</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text): </code><code class=""c# keyword"">base</code><code class=""c# plain"">(text) { }</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь определен класс сообщения Message, который получает через конструктор текст и сохраняет его в свойство Text.  А класс EmailMessage представляет условное email-сообщение и просто вызывает конструктор базового класса, передавая ему текст сообщения.</p> <h3>Ковариантные интерфейсы</h3> <p>Обобщенные интерфейсы могут быть ковариантными, если к универсальному параметру применяется ключевое слово <span class=""b"">out</span>. Такой параметр должен представлять  тип объекта, который возвращается из метода. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_466693""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMessenger&lt;</code><code class=""c# keyword"">out</code> <code class=""c# plain"">T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">T WriteMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">EmailMessenger : IMessenger&lt;EmailMessage&gt;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage WriteMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage($</code><code class=""c# string"">""Email: {text}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь обобщенный интерфейс <code>IMessenger</code> представляет интерфейс мессенджера и определяет метод <code>WriteMessage()</code>  для создания сообщения. При этом на момент определения интерфейса мы не знаем, объект какого типа будет возвращаться в этом методе.  Ключевое слово <span class=""b"">out</span> в определении интерфейса указывает, что данный интерфейс будет ковариантным.</p> <p>Класс EmailMessenger, который представляет условную программу для отправки email-сообщений,  реализует этот интерфейс и возвращает из метода <code>WriteMessage()</code> объект EmailMessage.</p> <p>Применим данные типы в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_561238""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMessenger&lt;Message&gt; outlook = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessenger();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Message message = outlook.WriteMessage(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(message.Text);    </code><code class=""c# comments"">// Email: Hello World</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">IMessenger&lt;EmailMessage&gt; emailClient = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessenger();</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">IMessenger&lt;Message&gt; messenger = emailClient;</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Message emailMessage = messenger.WriteMessage(</code><code class=""c# string"">""Hi!""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(emailMessage.Text);    </code><code class=""c# comments"">// Email: Hi!</code></div></div></td></tr></tbody></table></div></div> <p>То есть мы можем присвоить более общему типу <code>IMessenger&lt;Message&gt;</code> объект более конкретного типа <code>EmailMessenger</code> или  <code>IMessenger&lt;EmailMessage&gt;</code>.</p> <p>В то же время если бы мы не использовали ключевое слово <code>out</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_671810""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMessenger&lt;T&gt;</code></div></div></td></tr></tbody></table></div></div> <p>то мы столкнулись бы с ошибкой в строке</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_791296""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMessenger&lt;Message&gt; outlook = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessenger();  </code><code class=""c# comments"">// ! Ошибка</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">IMessenger&lt;EmailMessage&gt; emailClient = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessenger();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">IMessenger&lt;Message&gt; messenger = emailClient;  </code><code class=""c# comments"">// ! Ошибка</code></div></div></td></tr></tbody></table></div></div> <p>Поскольку в этом случае невозможно было бы привести объект <code>IMessenger&lt;EmailMessage&gt;</code> к типу <code>IMessenger&lt;Message&gt;</code></p> <p>При создании ковариантного интерфейса надо учитывать, что универсальный параметр может использоваться только в качестве типа значения, возвращаемого методами интерфейса.  Но не может использоваться в качестве типа аргументов метода или ограничения методов интерфейса.</p> <h3>Контравариантные интерфейсы</h3> <p>Для создания контравариантного интерфейса надо использовать ключевое слово <span class=""b"">in</span>. Например, возьмем те же классы Message и EmailMessage  и определим следующие типы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_720924""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMessenger&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(T message);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">SimpleMessenger : IMessenger&lt;Message&gt;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(Message message)</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь опять же интерфейс IMessenger представляет интерфейс мессенджера и определяет метод <code>SendMessage()</code> для отправки условного сообщения.  Ключевое слово <span class=""b"">in</span> в определении интерфейса указывает, что этот интерфейс - <span class=""b"">контравариантный</span>.</p> <p>Класс SimpleMessenger представляет условную программу отправки сообщений и реализует этот интерфейс.  Причем в качестве типа используемого этот класс использует тип Message. То есть SimpleMessenger фактически представляет тип  <code>IMessenger&lt;Message&gt;</code>.</p> <p>Применим эти типы в программе:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_881795""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMessenger&lt;EmailMessage&gt; outlook = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">SimpleMessenger();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">outlook.SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Hi!""</code><code class=""c# plain"">));</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">IMessenger&lt;Message&gt; telegram = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">SimpleMessenger();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">IMessenger&lt;EmailMessage&gt; emailClient = telegram;</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">emailClient.SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Hello""</code><code class=""c# plain"">));</code></div></div></td></tr></tbody></table></div></div> <p>Так как интерфейс IMessenger использует универсальный параметр с ключевым словом <span class=""b"">in</span>, то он является контравариантным,  поэтому в коде мы можем переменной типа <code>IMessenger&lt;EmailMessage&gt;</code> передать объект <code>IMessenger&lt;Message&gt;</code> или  <code>SimpleMessenger</code></p> <p>Если бы ключевое слово <span class=""b"">in</span> не использовалось бы, то мы не смогли бы это сделать. То есть объект интерфейса с более универсальным типом приводится к объекту интерфейса с более конкретным типом.</p> <p>При создании контрвариантного интерфейса надо учитывать, что универсальный параметр контрвариантного типа может применяться только к  аргументам метода, но не может применяться к возвращаемому результату метода.</p> <h3>Совмещение ковариантности и контравариантности</h3> <p>Также мы можем совместить ковариантность и контравариантность в одном интерфейсе. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_806546""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">interface</code> <code class=""c# plain"">IMessenger&lt;</code><code class=""c# keyword"">in</code> <code class=""c# plain"">T, </code><code class=""c# keyword"">out</code> <code class=""c# plain"">K&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(T message);</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">K WriteMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">SimpleMessenger : IMessenger&lt;Message, EmailMessage&gt;</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">SendMessage(Message message)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Отправляется сообщение: {message.Text}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">EmailMessage WriteMessage(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">text)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage($</code><code class=""c# string"">""Email: {text}""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Фактически здесь объединены два предыдущих примера. Благодаря ковариантности/контравариантности объект класса SimpleMessenger может представлять типы  <code>IMessenger&lt;EmailMessage, Message&gt;</code>, <code>IMessenger&lt;Message, EmailMessage&gt;</code>,  <code>IMessenger&lt;Message, Message&gt;</code> и <code>IMessenger&lt;EmailMessage, EmailMessage&gt;</code>.  Применение классов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_161972""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">IMessenger&lt;EmailMessage, Message&gt; messenger = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">SimpleMessenger();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Message message = messenger.WriteMessage(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(message.Text);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">messenger.SendMessage(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">EmailMessage(</code><code class=""c# string"">""Test""</code><code class=""c# plain"">));</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">IMessenger&lt;EmailMessage, EmailMessage&gt; outlook = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">SimpleMessenger();</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">EmailMessage emailMessage = outlook.WriteMessage(</code><code class=""c# string"">""Message from Outlook""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">outlook.SendMessage(emailMessage);</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">IMessenger&lt;Message, Message&gt; telegram = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">SimpleMessenger();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Message simpleMessage = telegram.WriteMessage(</code><code class=""c# string"">""Message from Telegram""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">telegram.SendMessage(simpleMessage);</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: На основе текста об интерфейсах реализуйте следующее:\r\n//1. Создайте интерфейс IVehicle с методами и свойствами:\r\n // - Метод Move(), который выводит строку \"Moving forward\" без реализации по умолчанию.\r\n // - Свойство MaxSpeed (только для чтения), возвращающее максимальную скорость.\r\n // - Статическое поле minSpeed, равное 0.\r\n // - Статическое свойство CurrentSpeed с возможностью изменения.\r\n",
                "//Задание 1: Применение интерфейсов \r\n //1. Создайте интерфейс IMovable с методом Move без реализации. \r\n //2. Реализуйте интерфейс IMovable в классе Person, добавив метод Move, который выводит \"Человек идет\".",
                "//Задание 1: Явная реализация интерфейсов\r\n//1. Напишите пример кода, демонстрирующий явную реализацию интерфейса. Используйте интерфейс IAction с методом Move и класс BaseAction.",
                "//Задание 1: Реализация интерфейсов в базовых и производных классах\r\n//1. Напишите пример кода, где класс Person реализует интерфейс IMovable с абстрактным методом Move(). Класс Driver должен переопределить метод Move().",
                "//Задание 1: Наследование интерфейсов\r\n//1. Напишите пример, где интерфейс IRunAction наследует интерфейс IAction. Класс BaseAction должен реализовать оба интерфейса, включая методы Move и Run.",
                "//Задание 1: Интерфейсы в обобщениях\r\n//1. В чем заключается возможность использования нескольких интерфейсов в качестве ограничений, в отличие от классов, где можно указать только один? Приведите пример с классом Message, который реализует оба интерфейса.",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",
                "//Задание 1: Иницилизируйте переменную и задайте слово, выведите его в консоль, потом измените на \"Bob\" и выведите",
                "//Задание 1: Напишите вывод предложения \"Мне нравится данный курс\"",

            };
            if (form1Instance != null && comboBox9.SelectedIndex >= 0 && comboBox9.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox9.SelectedIndex;
                selectCombobox = 9;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }
        private async void comboBox10_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Коллекции</h1><h2>Список List&lt;T&gt;</h2>   <p>Хотя в языке C# есть массивы, которые хранят в себе наборы однотипных объектов, но работать с ними не всегда удобно. Например, массив хранит  фиксированное количество объектов, однако что если мы заранее не знаем, сколько нам потребуется объектов. И в этом случае намного удобнее применять  коллекции. Еще один плюс коллекций состоит в том, что некоторые из них реализует стандартные структуры данных, например, стек, очередь, словарь, которые  могут пригодиться для решения различных специальных задач. Большая часть классов коллекций содержится в пространстве имен  <span class=""b"">System.Collections.Generic</span>.</p> <p>Класс List&lt;T&gt; из пространства имен <code>System.Collections.Generic</code> представляет простейший список однотипных объектов. Класс List типизируется типом, объекты которого будут хранится в списке.</p> <p>Мы можем создать пустой список:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_40190""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае объект List типизируется типом <span class=""b"">string</span>. А это значит, что хранить в этом списке мы можем только строки.</p> <p>Можно сразу при создании списка инициализировать его начальными значениями. В этом случае элементы списка помещаются после вызова конструктора в фигурных скобках</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_224666""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в список помещаются три строки</p> <p>Также можно при создании списка инициализировать его элементами из другой коллекции, например, другого списка:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_271819""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(people);</code></div></div></td></tr></tbody></table></div></div> <p>Можно совместить оба способа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_217009""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(people){</code><code class=""c# string"">""Mike""</code><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в списке employees будет четыре элемента (<code>{ ""Tom"", ""Bob"", ""Sam"", ""Mike"" }</code>) - три добавляются из списка people и один элемент задается при инициализации.</p> <p>Начиная с версии <span class=""b"">C# 12</span> для определения списков можно использовать выражения коллекций, которые предполагают заключение элементов коллекции в квадратные скобки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_309291""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = [</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">];</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; employees = [];</code><code class=""c# comments"">// пустой список</code></div></div></td></tr></tbody></table></div></div> <p>Подобным образом можно работать со списками других типов, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_727939""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;Person&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;Person&gt;() </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{ </code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">),</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">), </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">) </code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Установка начальной емкости списка</h3> <p>Еще один конструктор класса List принимает в качестве параметра начальную емкость списка:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_821842""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(16);</code></div></div></td></tr></tbody></table></div></div> <p>Указание начальной емкости списка позволяет в будущем увеличить производительность и уменьшить издержки на выделение памяти при  добавлении элементов. Поскольку динамическое добавление в список может приводить на низком уровне к дополнительному выделению памяти, что  снижает производительность. Если же мы знаем, что список не будет превышать некоторый размер, то мы можем передать этот размер в качестве емкости списка и  избежать дополнительных выделений памяти.</p> <p>Также начальную емкость можно установить с помощью свойства <code>Capacity</code>, которое имеется у класса List.</p> <h3>Обращение к элементам списка</h3> <p>Как и массивы, списки поддерживают индексы, с помощью которых можно обратиться к определенным элементам:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_441606""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">firstPerson = people[0]; </code><code class=""c# comments"">// получаем первый элемент</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(firstPerson); </code><code class=""c# comments"">// Tom</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">people[0] = </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">;     </code><code class=""c# comments"">// изменяем первый элемент</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(people[0]); </code><code class=""c# comments"">// Mike</code></div></div></td></tr></tbody></table></div></div> <h3>Длина списка</h3> <p>С помощью свойства <span class=""b"">Count</span> можно получить длину списка:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_25129""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(people.Count);    </code><code class=""c# comments"">// 3</code></div></div></td></tr></tbody></table></div></div> <h3>Перебор списка</h3> <p>C# позволяет осуществить перебор списка с помощью стандартного цикла <span class=""b"">foreach</span>:/p&gt; </p><div><div class=""syntaxhighlighter c#"" id=""highlighter_1924""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// Вывод программы:</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// Tom</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// Bob</code></div><div class=""line number10 index9 alt1""><code class=""c# comments"">// Sam</code></div></div></td></tr></tbody></table></div></div> <p>Также можно использовать другие типы циклов и в комбинации с индексами перебирать списки:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_544894""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; people.Count; i++)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(people[i]);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Методы списка</h3> <p>Среди его методов можно выделить следующие:</p> <ul> <li><p><span class=""b"">void Add(T item)</span>: добавление нового элемента в список</p></li> <li><p><span class=""b"">void AddRange(IEnumerable&lt;T&gt; collection)</span>: добавление в список коллекции или массива</p></li> <li><p><span class=""b"">int BinarySearch(T item)</span>: бинарный поиск элемента в списке. Если элемент найден, то метод возвращает индекс этого элемента в коллекции.  При этом список должен быть отсортирован.</p></li> <li><p><span class=""b"">void CopyTo(T[] array)</span>: копирует список в массив array</p></li> <li><p><span class=""b"">void CopyTo(int index, T[] array, int arrayIndex, int count)</span>: копирует из списка начиная с индекса index элементы,  количество которых равно count, и вставляет их в массив array начиная с индекса arrayIndex</p></li> <li><p><span class=""b"">bool Contains(T item)</span>: возвращает <code>true</code>, если элемент item есть в списке</p></li> <li><p><span class=""b"">void Clear()</span>: удаляет из списка все элементы</p></li> <li><p><span class=""b"">bool Exists(Predicate&lt;T&gt; match)</span>: возвращает <code>true</code>, если в списке есть элемент, который  соответствует делегату match</p></li> <li><p><span class=""b"">T? Find(Predicate&lt;T&gt; match)</span>: возвращает первый элемент, который соответствует делегату match. Если элемент не найден, возвращается null</p></li> <li><p><span class=""b"">T? FindLast(Predicate&lt;T&gt; match)</span>: возвращает последний элемент, который соответствует делегату match. Если элемент не найден, возвращается null</p></li> <li><p><span class=""b"">List&lt;T&gt; FindAll(Predicate&lt;T&gt; match)</span>: возвращает список элементов, которые соответствуют делегату match</p></li> <li><p><span class=""b"">int IndexOf(T item)</span>: возвращает индекс первого вхождения элемента в списке</p></li> <li><p><span class=""b"">int LastIndexOf(T item)</span>: возвращает индекс последнего вхождения элемента в списке</p></li> <li><p><span class=""b"">List&lt;T&gt; GetRange(int index, int count)</span>: возвращает список элементов, количество которых равно count, начиная  с индекса index.</p></li> <li><p><span class=""b"">void Insert(int index, T item)</span>: вставляет элемент item в список по индексу index. Если такого индекса в списке нет, то генерируется исключение</p></li> <li><p><span class=""b"">void InsertRange(int index, collection)</span>: вставляет коллекцию элементов collection в текущий список начиная с индекса index. Если такого индекса в списке нет, то генерируется исключение</p></li> <li><p><span class=""b"">bool Remove(T item)</span>: удаляет элемент item из списка, и если удаление прошло успешно, то возвращает true. Если в списке несколько одинаковых элементов,  то удаляется только первый из них</p></li> <li><p><span class=""b"">void RemoveAt(int index)</span>: удаление элемента по указанному индексу index. Если такого индекса в списке нет, то генерируется исключение</p></li> <li><p><span class=""b"">void RemoveRange(int index, int count)</span>: параметр index задает индекс, с которого надо удалить элементы, а параметр  count задает количество удаляемых элементов.</p></li> <li><p><span class=""b"">int RemoveAll((Predicate&lt;T&gt; match))</span>: удаляет все элементы, которые соответствуют делегату match. Возвращает  количество удаленных элементов</p></li> <li><p><span class=""b"">void Reverse()</span>: изменяет порядок элементов</p></li> <li><p><span class=""b"">void Reverse(int index, int count)</span>: изменяет порядок на обратный для элементов, количество которых равно count, начиная с индекса index</p></li> <li><p><span class=""b"">void Sort()</span>: сортировка списка</p></li> <li><p><span class=""b"">void Sort(IComparer&lt;T&gt;? comparer)</span>: сортировка списка с помощью объекта comparer, который передается в качестве параметра</p></li> </ul> <h3>Добавление в список</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_975764""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; () { </code><code class=""c# string"">""Tom""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">people.Add(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">); </code><code class=""c# comments"">// добавление элемента</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// people = { ""Tom"", ""Bob"" };</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">people.AddRange(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">});   </code><code class=""c# comments"">// добавляем массив</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// people = { ""Tom"", ""Bob"", ""Sam"", ""Alice"" };</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// также можно было бы добавить другой список</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// people.AddRange(new List&lt;string&gt;(){ ""Sam"", ""Alice"" });</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">people.Insert(0, </code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">); </code><code class=""c# comments"">// вставляем на первое место</code></div><div class=""line number12 index11 alt1""><code class=""c# comments"">// people = { ""Eugene"", ""Tom"", ""Bob"", ""Sam"", ""Alice"" };</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# plain"">people.InsertRange(1, </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[] {</code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">}); </code><code class=""c# comments"">// вставляем массив с индекса 1</code></div><div class=""line number15 index14 alt2""><code class=""c# comments"">// people = { ""Eugene"", ""Mike"", ""Kate"", ""Tom"", ""Bob"", ""Sam"", ""Alice"" };</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# comments"">// также можно было бы добавить другой список</code></div><div class=""line number18 index17 alt1""><code class=""c# comments"">// people.InsertRange(1, new List&lt;string&gt;(){ ""Mike"", ""Kate"" });</code></div></div></td></tr></tbody></table></div></div> <h3>Удаление из списка</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_684175""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; () { </code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">people.RemoveAt(1); </code><code class=""c# comments"">//  удаляем второй элемент</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// people = { ""Eugene"", ""Kate"", ""Tom"", ""Bob"", ""Sam"", ""Tom"", ""Alice"" };</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">people.Remove(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">); </code><code class=""c# comments"">//  удаляем элемент ""Tom""</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// people = { ""Eugene"", ""Kate"", ""Bob"", ""Sam"", ""Tom"", ""Alice"" };</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// удаляем из списка все элементы, длина строки которых равна 3</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">people.RemoveAll(person =&gt; person.Length == 3);</code></div><div class=""line number11 index10 alt2""><code class=""c# comments"">// people = { ""Eugene"", ""Kate"", ""Alice"" };</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# comments"">// удаляем из списка 2 элемента начиная с индекса 1</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">people.RemoveRange(1, 2);</code></div><div class=""line number15 index14 alt2""><code class=""c# comments"">// people = { ""Eugene""};</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# comments"">// полностью очищаем список</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">people.Clear();</code></div><div class=""line number19 index18 alt2""><code class=""c# comments"">// people = {  };</code></div></div></td></tr></tbody></table></div></div> <h3>Поиск и проверка элемента</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_827666""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; () { </code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var containsBob = people.Contains(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);     </code><code class=""c# comments"">//  true</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">var containsBill = people.Contains(</code><code class=""c# string"">""Bill""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// false</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// проверяем, есть ли в списке строки с длиной 3 символа</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">var existsLength3 = people.Exists(p =&gt; p.Length == 3);  </code><code class=""c# comments"">// true</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// проверяем, есть ли в списке строки с длиной 7 символов</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">var existsLength7 = people.Exists(p =&gt; p.Length == 7);  </code><code class=""c# comments"">// false</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# comments"">// получаем первый элемент с длиной в 3 символа</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">var firstWithLength3 = people.Find(p =&gt; p.Length == 3); </code><code class=""c# comments"">// Tom</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# comments"">// получаем последний элемент с длиной в 3 символа</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">var lastWithLength3 = people.FindLast(p =&gt; p.Length == 3);  </code><code class=""c# comments"">// Sam</code></div><div class=""line number17 index16 alt2""> </div><div class=""line number18 index17 alt1""><code class=""c# comments"">// получаем все элементы с длиной в 3 символа в виде списка</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; peopleWithLength3 = people.FindAll(p =&gt; p.Length == 3);</code></div><div class=""line number20 index19 alt1""><code class=""c# comments"">// peopleWithLength3 { ""Tom"", ""Bob"", ""Sam""}</code></div></div></td></tr></tbody></table></div></div> <h3>Получение диапазона и копирование в массив</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_936834""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() {</code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// получаем диапазон со второго по четвертый элемент</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">var range = people.GetRange(1, 3);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// range = { ""Tom"", ""Mike"", ""Sam""};</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// копируем в массив первые три элемента</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] partOfPeople = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[3];</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">people.CopyTo(0, partOfPeople, 0, 3);</code></div><div class=""line number10 index9 alt1""><code class=""c# comments"">// partOfPeople = { ""Eugene"", ""Tom"", ""Mike""};</code></div></div></td></tr></tbody></table></div></div> <h3>Расположение элементов в обратном порядке</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_60418""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; () { </code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// переворачиваем весь список</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">people.Reverse();</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// people = { ""Bob"",""Sam"", ""Mike"", ""Tom"", ""Eugene""};</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# plain"">var people2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;() { </code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// переворачиваем часть только 3 элемента с индекса 1</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">people2.Reverse(1, 3);</code></div><div class=""line number10 index9 alt1""><code class=""c# comments"">// people2 = { ""Eugene"",""Sam"", ""Mike"", ""Tom"", ""Bob"" };</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Двухсвязный список LinkedList&lt;T&gt;</h2>   <p>Класс <span class=""b"">LinkedList&lt;T&gt;</span> представляет двухсвязный список, в котором каждый элемент хранит ссылку одновременно на следующий и на предыдущий  элемент.</p> <h3>Создание связанного списка</h3> <p>Для создания связного списка можно принименять один из его конструктора. Например, создадим пустой связный список:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_524035""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае связанный список people предназначен для хранения строк.</p> <p>Также можно в конструктор передать коллекцию элементов, например, список List, по которому будет создан связный список:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_100317""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(employees);</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>LinkedListNode</h3> <p>Если в простом списке List&lt;T&gt; каждый элемент представляет объект типа T, то в LinkedList&lt;T&gt; каждый узел представляет  объект класса <span class=""b"">LinkedListNode&lt;T&gt;</span>. А добавляемые в связанный список элементы T фактически обертываются в объект LinkedListNode.</p> <p>Класс LinkedListNode имеет следующие свойства:</p> <ul> <li><p><span class=""b"">Value</span>: возвращает или устанавливает само значение узла, представленное типом T</p></li> <li><p><span class=""b"">Next</span>: возвращает ссылку на следующий элемент типа LinkedListNode&lt;T&gt; в списке. Если следующий элемент отсутствует, то имеет значение null</p></li> <li><p><span class=""b"">Previous</span>: возвращает ссылку предыдущий элемент типа LinkedListNode&lt;T&gt; в списке. Если предыдущий элемент отсутствует, то имеет значение null</p></li> </ul> <h3>Свойства LinkedList</h3> <p>Класс LinkedList определяет следующие свойства:</p> <ul> <li><p><span class=""b"">Count</span>: количество элементов в связанном списке</p></li> <li><p><span class=""b"">First</span>: первый узел в списке в виде объекта LinkedListNode&lt;T&gt;</p></li> <li><p><span class=""b"">Last</span>: последний узел в списке в виде объекта LinkedListNode&lt;T&gt;</p></li> </ul> <p>Используем эти свойства:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_546660""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(employees);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(people.Count);            </code><code class=""c# comments"">// 3</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(people.First?.Value);    </code><code class=""c# comments"">// Tom</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(people.Last?.Value);    </code><code class=""c# comments"">// Bob</code></div></div></td></tr></tbody></table></div></div> <p>Используя свойства LinkedList и LinkedListNode, можно пройтись по всем элементам списка в прямом или обратном порядке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_252413""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(</code><code class=""c# keyword"">new</code><code class=""c# plain"">[] { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">});</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// от начала до конца списка</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">var currentNode = people.First;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">while</code><code class=""c# plain"">(currentNode != </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(currentNode.Value);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">currentNode = currentNode.Next;</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">}</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# comments"">// с конца до начала списка</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">currentNode = people.Last;</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">while</code> <code class=""c# plain"">(currentNode != </code><code class=""c# keyword"">null</code><code class=""c# plain"">)</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(currentNode.Value);</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">currentNode = currentNode.Previous;</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Методы LinkedList</h3> <p>Используя методы класса LinkedList&lt;T&gt;, можно обращаться к различным элементам, как в конце, так и в начале списка:</p> <ul> <li><p><span class=""b"">AddAfter(LinkedListNode&lt;T&gt; node, LinkedListNode&lt;T&gt; newNode)</span>: вставляет узел newNode в список после узла  node.</p></li> <li><p><span class=""b"">AddAfter(LinkedListNode&lt;T&gt; node, T value)</span>: вставляет в список новый узел со значением value после узла node.</p></li> <li><p><span class=""b"">AddBefore(LinkedListNode&lt;T&gt; node, LinkedListNode&lt;T&gt; newNode)</span>: вставляет в список узел newNode перед узлом node.</p></li> <li><p><span class=""b"">AddBefore(LinkedListNode&lt;T&gt; node, T value)</span>: вставляет в список новый узел со значением value перед узлом node.</p></li> <li><p><span class=""b"">AddFirst(LinkedListNode&lt;T&gt; node)</span>: вставляет новый узел в начало списка</p></li> <li><p><span class=""b"">AddFirst(T value)</span>: вставляет новый узел со значением value в начало списка</p></li> <li><p><span class=""b"">AddLast(LinkedListNode&lt;T&gt; node)</span>: вставляет новый узел в конец списка</p></li> <li><p><span class=""b"">AddLast(T value)</span>: вставляет новый узел со значением value в конец списка</p></li> <li><p><span class=""b"">RemoveFirst()</span>: удаляет первый узел из списка. После этого новым первым узлом становится узел, следующий за удаленным</p></li> <li><p><span class=""b"">RemoveLast()</span>: удаляет последний узел из списка</p></li> </ul> <p>Применим некоторые из этих методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_993064""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">LinkedList&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">people.AddLast(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">); </code><code class=""c# comments"">// вставляем узел со значением Tom на последнее место</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">                        </code><code class=""c# comments"">//так как в списке нет узлов, то последнее будет также и первым</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">people.AddFirst(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">); </code><code class=""c# comments"">// вставляем узел со значением Bob на первое место</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// вставляем после первого узла новый узел со значением Mike</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(people.First != </code><code class=""c# keyword"">null</code><code class=""c# plain"">) people.AddAfter(people.First, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// теперь у нас список имеет следующую последовательность: Bob Mike Tom</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) Console.WriteLine(person);</code></div></div></td></tr></tbody></table></div></div> <p>Подобным образом можно создавать связанные списки и других типов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_646434""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var company = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">LinkedList&lt;Person&gt;();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">company.AddLast(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">));</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">company.AddLast(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">));</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">company.AddFirst(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bill""</code><code class=""c# plain"">));</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">company) Console.WriteLine(person.Name);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Очередь Queue</h2>   <p>Класс <span class=""b"">Queue&lt;T&gt;</span> представляет обычную очередь, которая работает по алгоритму FIFO (""первый вошел - первый вышел"").</p> <h3>Создание очереди</h3> <p>Для создания очереди можно использовать один из трех ее конструкторов. Прежде всего можно создать пустую очередь:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_74425""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div></div></td></tr></tbody></table></div></div> <p>При создании пустой очереди можно указать емкость очереди:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_71287""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(16);</code></div></div></td></tr></tbody></table></div></div> <p>Также можно инициализировать очередь элементами из другой коллекции или массивом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_548523""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(employees);</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) Console.WriteLine(person);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(people.Count); </code><code class=""c# comments"">// 3</code></div></div></td></tr></tbody></table></div></div> <p>Для перебора очереди можно использовать стандартный цикл <span class=""b"">foreach</span>.</p> <p>Для получения количества элементов в очереди в классе определено свойство <span class=""b"">Count</span>.</p> <h3>Методы Queue</h3> <p>У класса <code>Queue&lt;T&gt;</code> можно отметить следующие методы:</p> <ul> <li><p><span class=""b"">void Clear()</span>: очищает очередь</p></li> <li><p><span class=""b"">bool Contains(T item)</span>: возвращает <code>true</code>, если элемент item имеется в очереди</p></li> <li><p><span class=""b"">T Dequeue()</span>: извлекает и возвращает первый элемент очереди</p></li> <li><p><span class=""b"">void Enqueue(T item)</span>: добавляет элемент в конец очереди</p></li> <li><p><span class=""b"">T Peek()</span>: просто возвращает первый элемент из начала очереди без его удаления</p></li> </ul> <p>Посмотрим применение очереди на практике:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_658073""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// добавляем элементы</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">people.Enqueue(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// people = { Tom }</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">people.Enqueue(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// people = { Tom, Bob }</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">people.Enqueue(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// people = { Tom, Bob, Sam }</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# comments"">// получаем элемент из самого начала очереди </code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">var firstPerson = people.Peek();</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(firstPerson); </code><code class=""c# comments"">// Tom</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# comments"">// удаляем элементы</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">var person1 = people.Dequeue();  </code><code class=""c# comments"">// people = { Bob, Sam  }</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine(person1); </code><code class=""c# comments"">// Tom</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">var person2 = people.Dequeue();  </code><code class=""c# comments"">// people = { Sam  }</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine(person2); </code><code class=""c# comments"">// Bob</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">var person3 = people.Dequeue();  </code><code class=""c# comments"">// people = {  }</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">Console.WriteLine(person3); </code><code class=""c# comments"">// Sam</code></div></div></td></tr></tbody></table></div></div> <p>Стоит отметить, что если с помощью методов Peek или Dequeue мы попытаемся получить первый элемент очереди, которая пуста,  то программа выдаст исключение. Соответственно перед получением элемента мы можем проверять количество элементов в очереди:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_150804""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(people.Count &gt; 0)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">var person = people.Peek();</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">people.Dequeue();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Либо можно использовать пару методов:</p> <ul> <li><p><span class=""b"">bool TryDequeue(out T result)</span>: передает в переменную result первый элемент очереди с его удалением из очереди,  возвращает <code>true</code>, если очередь не пуста и элемент успешно получен.</p></li> <li><p><span class=""b"">bool TryPeek(out T result)</span>: передает в переменную result первый элемент очереди без его извлечения из очереди,  возвращает <code>true</code>, если очередь не пуста и элемент успешно получен.</p></li> </ul> <p>Применение методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_277151""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Queue&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// добавляем элементы</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">people.Enqueue(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);  </code><code class=""c# comments"">// people = { Tom }</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// удаляем элементы</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">var success1 = people.TryDequeue(</code><code class=""c# keyword"">out</code> <code class=""c# plain"">var person1);  </code><code class=""c# comments"">// success1 = true</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(success1) Console.WriteLine(person1); </code><code class=""c# comments"">// Tom</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# plain"">var success2 = people.TryPeek(</code><code class=""c# keyword"">out</code> <code class=""c# plain"">var person2);  </code><code class=""c# comments"">// success2 = false</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(success2) Console.WriteLine(person2); </code></div></div></td></tr></tbody></table></div></div> <p>Очереди - довольно часто встречаемая стуктура в реальной жизни. Например, очередь пациентов на прием к врачу. Реализуем данную ситуацию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_997978""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var patients = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Queue&lt;Person&gt;();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">patients.Enqueue(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">));</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">patients.Enqueue(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">));</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">patients.Enqueue(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">));</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">var practitioner = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Doctor();</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">practitioner.TakePatients(patients);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Doctor</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">TakePatients(Queue&lt;Person&gt; patients)</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">while</code><code class=""c# plain"">(patients.Count &gt; 0)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">var patient = patients.Dequeue();</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Осмотр пациента {patient.Name}""</code><code class=""c# plain"">);</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Доктор закончил осматривать пациентов""</code><code class=""c# plain"">);</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number26 index25 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь класс врача - класс Doctor в методе TakePatients принимает очередь пациентов в виде объектов Person. И пока в очереди есть объекты извлекает по одному объекту. Консольный вывод:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_79020""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Осмотр пациента Tom</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Осмотр пациента Bob</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Осмотр пациента Sam</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Доктор закончил осматривать пациентов</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Коллекция Stack&lt;T&gt;</h2>   <p>Класс <code>Stack&lt;T&gt;</code> представляет коллекцию, которая использует алгоритм LIFO (""последний вошел - первый вышел"").  При такой организации каждый следующий добавленный элемент помещается поверх предыдущего. Извлечение из коллекции происходит в обратном порядке -  извлекается тот элемент, который находится выше всех в стеке.</p> <p>Стек - довольно часто встречаемая структура данных в реальной жизни. Банальные примеры стеков - стопка книг или тарелок, где каждую новую книгу или тарелку  помещают поверх предыдущей. А извлекают из этой стопки книги/тарелки в обратном порядке - сначала самую верхнюю и так далее. Другой пример - одежда:  допустим, человек выходит на улицу в зимнюю погоду и для этого сначала одевает майку, потом рубашку, затем свитер, и в конце куртку. Когда человек снимает с себя одежду -  он делает это в обратном порядке: сначала снимает куртку, потом свитер и так далее.</p> <h3>Создание стека</h3> <p>Для создания стека можно использовать один из трех конструкторов. Прежде всего можно создать пустой стек:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_698738""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div></div></td></tr></tbody></table></div></div> <p>При создании пустого стека можно указать емкость стека:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_39479""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(16);</code></div></div></td></tr></tbody></table></div></div> <p>Также можно инициализировать стек элементами из другой коллекции или массивом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_946420""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(employees);</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) Console.WriteLine(person);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(people.Count); </code><code class=""c# comments"">// 3</code></div></div></td></tr></tbody></table></div></div> <p>Для перебора стека можно использовать стандартный цикл <span class=""b"">foreach</span>. Причем в цикле в соответствии с аалгоритмом стека LIFO  данные извлекаются в порядке, обратном их добавлению. Консольный вывод в данном случае:</p> <div class=""console""> <pre class=""consoletext"">Bob Sam Tom 3 </pre> </div> <p>Для получения количества элементов стека применяется свойство <span class=""b"">Count</span>.</p> <h3>Методы Stack</h3> <p>В классе Stack можно выделить следующие методы:</p> <ul> <li><p><span class=""b"">Clear</span>: очищает стек</p></li> <li><p><span class=""b"">Contains</span>: проверяет наличие в стеке элемента и возвращает true при его наличии</p></li> <li><p><span class=""b"">Push</span>: добавляет элемент в стек в верхушку стека</p></li> <li><p><span class=""b"">Pop</span>: извлекает и возвращает первый элемент из стека</p></li> <li><p><span class=""b"">Peek</span>: просто возвращает первый элемент из стека без его удаления</p></li> </ul> <p>Посмотрим на примере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_524411""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">people.Push(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// people = { Tom }</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">people.Push(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// people = { Sam, Tom }</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">people.Push(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// people = { Bob, Sam, Tom }</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// получаем первый элемент стека без его удаления </code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">headPerson = people.Peek();</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine(headPerson);  </code><code class=""c# comments"">// Bob</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">person1 = people.Pop();</code></div><div class=""line number14 index13 alt1""><code class=""c# comments"">// people = { Sam, Tom }</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine(person1);  </code><code class=""c# comments"">// Bob</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">person2 = people.Pop();</code></div><div class=""line number18 index17 alt1""><code class=""c# comments"">// people = { Tom }</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">Console.WriteLine(person2);  </code><code class=""c# comments"">// Sam</code></div><div class=""line number20 index19 alt1""> </div><div class=""line number21 index20 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">person3 = people.Pop();</code></div><div class=""line number22 index21 alt1""><code class=""c# comments"">// people = { }</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">Console.WriteLine(person3);  </code><code class=""c# comments"">// Tom</code></div></div></td></tr></tbody></table></div></div> <p>Работу стека можно представить следующей иллюстрацией:</p> <img alt=""Stack в C#"" src=""./pics/4.1.png""/> <p>Стоит отметить, что если с помощью методов Peek или Pop мы попытаемся получить первый элемент стека, который пуст,  то программа выдаст исключение. Соответственно перед получением элемента мы можем проверять количество элементов в стеке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_130685""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">if</code><code class=""c# plain"">(people.Count &gt; 0)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">var person = people.Peek();</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">people.Pop();</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Либо можно использовать пару методов:</p> <ul> <li><p><span class=""b"">bool TryPop(out T result)</span>: удаляет из стека первый элемент и передает его в переменную result, возвращает <code>true</code>, если очередь не пуста и элемент успешно получен.</p></li> <li><p><span class=""b"">bool TryPeek(out T result)</span>: передает в переменную result первый элемент стека без его извлечения,  возвращает <code>true</code>, если элемент успешно получен.</p></li> </ul> <p>Применение методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_336463""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Stack&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">people.Push(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# comments"">// people = { Tom }</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# comments"">// удаляем элементы</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">var success1 = people.TryPop(</code><code class=""c# keyword"">out</code> <code class=""c# plain"">var person1);  </code><code class=""c# comments"">// success1 = true</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(success1) Console.WriteLine(person1); </code><code class=""c# comments"">// Tom</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">var success2 = people.TryPeek(</code><code class=""c# keyword"">out</code> <code class=""c# plain"">var person2);  </code><code class=""c# comments"">// success2 = false</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(success2) Console.WriteLine(person2);</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Коллекция Dictionary&lt;K, V&gt;</h2>   <p>Еще один распространенный тип коллекции представляют словари. Словарь хранит объекты, которые представляют пару ключ-значение.  Класс словаря <span class=""b"">Dictionary&lt;K, V&gt;</span> типизируется двумя типами: параметр <span class=""b"">K</span> представляет тип ключей,  а параметр <span class=""b"">V</span> предоставляет тип значений.</p> <h3>Создания и инициализация словаря</h3> <p>Класс Dictionary предоставляет ряд конструкторов для создания словаря. Например, мы можем создать пустой словарь:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_532960""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div></div></td></tr></tbody></table></div></div> <p>Здесь словарь <code>people</code> в качестве ключей принимает значения типа int, а в качестве значений - строки.</p> <p>При определении словаря его сразу  же можно инициализировать значениями:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_643773""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ 5, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">},</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{ 3, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">},</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{ 11, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>При инициализации применяется инициализитор - в фигурных скобках после вызова конструктора объекту передаются начальные данные. В  случае со словаем мы можем передать в инициализаторе набор элементов, где каждый элемент заключается в фигурные скобки, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_765547""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">{ 5, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Каждый элемент представляет два значения: первое значение представляет ключ, а второе значение - собственно значение элемента.  Поскольку при объявлении словаря people для ключей указан тип <code>int</code>, а для значений - тип <code>string</code>, то в элементе словаря  сначала указывается число int, а затем строка. То есть в случае выше элемент имеет ключ 5, а значение - ""Tom"". Затем по ключу элемента мы сможем получить его значение.</p> <p>Также мы можем применять другой способ инициализации:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_354217""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[5] = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[6] = </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[7] = </code><code class=""c# string"">""Bob""</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};  </code></div></div></td></tr></tbody></table></div></div> <p>При таком способе инициализации в квадратных скобках указывается ключ и ему присваивается значение элемента. Но в целом этот способ инициализации будет равноценен предыдущему.</p> <h3>KeyValuePair</h3> <p>Стоит отметить, что каждый элемент в словаре представляет структуру <span class=""b"">KeyValuePair&lt;TKey, TValue&gt;</span>, где параметр <span class=""b"">TKey</span> представляет тип ключа,  а параметр <span class=""b"">TValue</span> - тип значений элементов. Эта структура предоставляет свойства <code>Key</code> и <code>Value</code>,  с помощью которых можно получить соответственно ключ и значение элемента в словаре. И одна из версий конструктора Dictionary позволяет инициализировать  словарь коллекцией объектов KeyValuePair:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_222098""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var mike = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">KeyValuePair&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(56, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">); </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;KeyValuePair&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;&gt;() { mike};</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(employees);</code></div></div></td></tr></tbody></table></div></div> <p>Конструктор типа <code>KeyValuePair</code> принимает два параметра - ключ элемента и его значения. То есть в данном случае создается один такой  элемент  - <code>mike</code> с ключом 56 и значением ""Mike"". И этот элемент добавляется в список employees, которым затем инициализируется словарь.</p> <p>Можно совместить оба способа инициализации:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_127728""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var mike = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">KeyValuePair&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(56, </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">List&lt;KeyValuePair&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;&gt;() { mike };</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(employees)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[5] = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[6] = </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[7] = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">,</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае в словаре people будет четыре элемента.</p> <h3>Перебор словаря</h3> <p>Для перебора словаря можно применять цикл <span class=""b"">foreach</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_537286""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[5] = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[6] = </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[7] = </code><code class=""c# string"">""Bob""</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""key: {person.Key}  value: {person.Value}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>При переборе каждый элемент будет помещаться в переменную, которая представляет тип KeyValuePair, соответственно с помощью свойств Key и Value мы  сможем получить ключ и значение элемента. Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">key: 5  value: Tom key: 6  value: Sam key: 7  value: Bob </pre> </div> <h3>Получение элементов</h3> <p>Для обращения к элементам из словаря применяется их ключ, который передается в квадратных скобках:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_164492""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">словарь[ключ]</code></div></div></td></tr></tbody></table></div></div> <p>Таким образом мы можем получить и изменить элементы словаря</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_241005""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[5] = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">[6] = </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">[7] = </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// получаем элемент по ключу 6</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">sam = people[6];  </code><code class=""c# comments"">// Sam</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(sam);  </code><code class=""c# comments"">// Sam</code></div><div class=""line number10 index9 alt1""><code class=""c# comments"">// переустанавливаем значение по ключу 6</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">people[6] = </code><code class=""c# string"">""Mike""</code><code class=""c# plain"">;</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(people[6]);  </code><code class=""c# comments"">// Mike</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# comments"">// добавляем новый элемент по ключу 22</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">people[22] = </code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">;</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine(people[22]);  </code><code class=""c# comments"">// Eugene</code></div></div></td></tr></tbody></table></div></div> <p>Более того, таким образом мы можем также добавить новый элемент в словарь. При установке значения по ключу, если элемент с таким ключом уже есть в словаре,  то значение переустанавливается. Если же элемента с подобным ключом нет в словаре, то элемент добавляется.:</p> <h3>Методы и свойства Dictionary</h3> <p>Среди методов класса Dictionary можно выделить следующие:</p> <ul> <li><p><span class=""b"">void Add(K key, V value)</span>: добавляет новый элемент в словарь</p></li> <li><p><span class=""b"">void Clear()</span>: очищает словарь</p></li> <li><p><span class=""b"">bool ContainsKey(K key)</span>: проверяет наличие элемента с определенным ключом и возвращает true при его наличии в словаре</p></li> <li><p><span class=""b"">bool ContainsValue(V value)</span>: проверяет наличие элемента с определенным значением и возвращает true при его наличии в словаре</p></li> <li><p><span class=""b"">bool Remove(K key)</span>: удаляет по ключу элемент из словаря</p> <p>Другая версия этого метода позволяет получить удленный элемент в выходной параметр: <span class=""b"">bool Remove(K key, out V value)</span></p></li> <li><p><span class=""b"">bool TryGetValue(K key, out V value)</span>: получает из словаря элемент по ключу key. При успешном получении передает  значение элемента в выходной параметр value и возвращает true</p></li> <li><p><span class=""b"">bool TryAdd(K key, V value)</span>: добавляет в словарь элемент с ключом key и значением value. При успешном добавлении  возвращает true</p></li> </ul> <p>Из свойств следует отметить свойство <span class=""b"">Count</span>, которое возвращает количество элементов в словаре.</p> <p>Применение методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_568955""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// условная телефонная книга</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">var phoneBook = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Dictionary&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">, </code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# comments"">// добавляем элемент: ключ - номер телефона, значение - имя абонента</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">phoneBook.Add(</code><code class=""c# string"">""+123456""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// альтернативное добавление</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// phoneBook[""+123456""] = ""Tom"";</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// Проверка наличия</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">var phoneExists1 = phoneBook.ContainsKey(</code><code class=""c# string"">""+123456""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// true</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""+123456: {phoneExists1}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">var phoneExists2 = phoneBook.ContainsKey(</code><code class=""c# string"">""+567456""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// false</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""+567456: {phoneExists2}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">var abonentExists1 = phoneBook.ContainsValue(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);      </code><code class=""c# comments"">// true</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Tom: {abonentExists1}""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">var abonentExists2 = phoneBook.ContainsValue(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);      </code><code class=""c# comments"">// false</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Bob: {abonentExists2}""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""> </div><div class=""line number19 index18 alt2""><code class=""c# comments"">// удаление элемента</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">phoneBook.Remove(</code><code class=""c# string"">""+123456""</code><code class=""c# plain"">);</code></div><div class=""line number21 index20 alt2""> </div><div class=""line number22 index21 alt1""><code class=""c# comments"">// проверяем количество элементов после удаления</code></div><div class=""line number23 index22 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Count: {phoneBook.Count}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// Count: 0</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Класс ObservableCollection</h2>   <p>Кроме стандартных классов коллекций типа списков, очередей, словарей, стеков .NET также предоставляет специальный класс <span class=""b"">ObservableCollection&lt;T&gt;</span>.  В отличие от ранее рассмотренных коллекций данный класс определен в пространстве имен <span class=""b"">System.Collections.ObjectModel</span>.  По функциональности коллекция ObservableCollection похожа на список List за тем исключением, что позволяет известить внешние объекты о том, что коллекция была изменена.</p> <h3>Создание и инициализация ObservableCollection</h3> <p>Для создания объекта класс ObservableCollection предоставляет ряд конструкторов. Прежде всего мы можем создать пустую коллекцию:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_486225""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections.ObjectModel;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае коллекция people типизируется типом <span class=""b"">string</span>, поэтому может хранить только строки.</p> <p>Другая версия конструктора позволяет передать в ObservableCollection объекты из другой коллекции или массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_274665""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;( </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[] {</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">});</code></div></div></td></tr></tbody></table></div></div> <p>Для инициализации можно через инициализатор в фигурных скобках передать значения</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_696532""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <p>Также можно сочетать предыдущие два способа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_548014""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;( </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[] {</code><code class=""c# string"">""Mike""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code> <code class=""c# plain"">})</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">};</code></div></div></td></tr></tbody></table></div></div> <h3>Обращение к элементам коллекции</h3> <p>Для обращения к элементам ObservableCollection можно применять индексы на манер массивов или списков List:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_932500""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">};</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// получаем первый элемент</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(people[0]);   </code><code class=""c# comments"">// Tom</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// изменяем первый элемент</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">people[0] = </code><code class=""c# string"">""Tomas""</code><code class=""c# plain"">;</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(people[0]);   </code><code class=""c# comments"">// Tomas</code></div></div></td></tr></tbody></table></div></div> <h3>Перебор коллекции</h3> <p>Для перебора коллекции можно применять стандартные циклы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_634966""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections.ObjectModel;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i =0; i &lt; people.Count; i++)</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">{</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(people[i]);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>С помощью свойства <span class=""b"">Count</span> можно получить количество элементов в коллекции.</p> <h3>Методы ObservableCollection</h3> <p>Среди методов класса ObservableCollection можно отметить следующие:</p> <ul> <li><p><span class=""b"">void Add(T item)</span>: добавление нового элемента в коллекцию</p></li> <li><p><span class=""b"">void CopyTo(T[] array, int index,)</span>: копирует в массив array элементы из коллекции начиная с индекса index</p></li> <li><p><span class=""b"">bool Contains(T item)</span>: возвращает <code>true</code>, если элемент item есть в коллекции</p></li> <li><p><span class=""b"">void Clear()</span>: удаляет из коллекции все элементы</p></li> <li><p><span class=""b"">int IndexOf(T item)</span>: возвращает индекс первого вхождения элемента в коллекции</p></li> <li><p><span class=""b"">void Insert(int index, T item)</span>: вставляет элемент item в коллекцию по индексу index.  Если такого индекса в коллекции нет, то генерируется исключение</p></li> <li><p><span class=""b"">bool Remove(T item)</span>: удаляет элемент item из коллекции, и если удаление прошло успешно, то возвращает true.  Если в коллекции несколько одинаковых элементов, то удаляется только первый из них</p></li> <li><p><span class=""b"">void RemoveAt(int index)</span>: удаление элемента по указанному индексу index. Если такого индекса в коллекции нет, то  генерируется исключение</p></li> <li><p><span class=""b"">void Move(int oldIndex, int newIndex)</span>:  перемещает элемент с индекса oldIndex на позицию по индексу newIndex</p></li> </ul> <p>Применение методов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_593484""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections.ObjectModel;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;();</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# comments"">// добавляем элемент</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">people.Add(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// вставляем элемент по индексу 0</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">people.Insert(0, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# comments"">// проверка наличия элемента </code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">bobExists = people.Contains(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);     </code><code class=""c# comments"">// true</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Bob exists: {bobExists}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">bool</code> <code class=""c# plain"">mikeExists = people.Contains(</code><code class=""c# string"">""Mike""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// false</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Mike exists: {mikeExists}""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""> </div><div class=""line number16 index15 alt1""><code class=""c# comments"">// удаляем элемент</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">people.Remove(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# comments"">// удаляем элемент по индексу 0</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">people.RemoveAt(0);</code></div></div></td></tr></tbody></table></div></div> <h3>Уведомление об измении коллекции</h3> <p>Класс ObservableCollection определяет событие <span class=""b"">CollectionChanged</span>, подписавшись на которое, мы можем обработать любые изменения коллекции.  Данное событие представляет делегат <span class=""b"">NotifyCollectionChangedEventHandler</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_667752""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">NotifyCollectionChangedEventHandler(</code><code class=""c# keyword"">object</code><code class=""c# plain"">? sender, NotifyCollectionChangedEventArgs e);</code></div></div></td></tr></tbody></table></div></div> <p>Второй параметр делегата - объект <span class=""b"">NotifyCollectionChangedEventArgs</span> хранит всю информацию о событии. В частности, его  свойство <code>Action</code> позволяет узнать характер изменений. Оно хранит одно из значений  из перечисления <span class=""bb"">NotifyCollectionChangedAction</span>:</p> <ul> <li><p><code>NotifyCollectionChangedAction.Add</code>: добавление</p></li> <li><p><code>NotifyCollectionChangedAction.Remove</code>: удаление</p></li> <li><p><code>NotifyCollectionChangedAction.Replace</code>: замена</p></li> <li><p><code>NotifyCollectionChangedAction.Move</code>: перемещение объекта внутри коллекции на новую позицию</p></li> <li><p><code>NotifyCollectionChangedAction.Reset</code>: сброс содержимого коллекции (например, при ее очистке с помощью метода <code>Clear()</code>)</p></li> </ul> <p>Кроме того, свойства <code>NewItems</code> и <code>OldItems</code> позволяют получить соответственно добавленные и удаленные объекты. Таким образом, мы получаем полный  контроль над обработкой добавления, удаления и замены объектов в коллекции.</p> <p>Допустим, у нас будет следующий класс Person, который представляет пользователя:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_705366""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt; Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Для управления коллекцией объектов Person определим следующую программу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_705700""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div><div class=""line number37 index36 alt2"">37</div><div class=""line number38 index37 alt1"">38</div><div class=""line number39 index38 alt2"">39</div><div class=""line number40 index39 alt1"">40</div><div class=""line number41 index40 alt2"">41</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections.ObjectModel;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections.Specialized;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">ObservableCollection&lt;Person&gt;() </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{ </code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">), </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">) </code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// подписываемся на событие изменения коллекции</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">people.CollectionChanged += People_CollectionChanged;</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">people.Add(</code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">));  </code><code class=""c# comments"">// добавляем новый элемент</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# plain"">people.RemoveAt(1);                 </code><code class=""c# comments"">// удаляем элемент</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">people[0] = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Eugene""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// заменяем элемент</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""\nСписок пользователей:""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people)</code></div><div class=""line number19 index18 alt2""><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person.Name);</code></div><div class=""line number21 index20 alt2""><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# comments"">// обработчик изменения коллекции</code></div><div class=""line number23 index22 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">People_CollectionChanged(</code><code class=""c# keyword"">object</code><code class=""c# plain"">? sender, NotifyCollectionChangedEventArgs e)</code></div><div class=""line number24 index23 alt1""><code class=""c# plain"">{</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">switch</code> <code class=""c# plain"">(e.Action)</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">NotifyCollectionChangedAction.Add: </code><code class=""c# comments"">// если добавление</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code><code class=""c# plain"">(e.NewItems?[0] </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person newPerson)</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Добавлен новый объект: {newPerson.Name}""</code><code class=""c# plain"">);</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">NotifyCollectionChangedAction.Remove: </code><code class=""c# comments"">// если удаление</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(e.OldItems?[0] </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person oldPerson)</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Удален объект: {oldPerson.Name}""</code><code class=""c# plain"">);</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number35 index34 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">case</code> <code class=""c# plain"">NotifyCollectionChangedAction.Replace: </code><code class=""c# comments"">// если замена</code></div><div class=""line number36 index35 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">((e.NewItems?[0] </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person replacingPerson)  &amp;&amp; </code></div><div class=""line number37 index36 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">(e.OldItems?[0] </code><code class=""c# keyword"">is</code> <code class=""c# plain"">Person replacedPerson))</code></div><div class=""line number38 index37 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Объект {replacedPerson.Name} заменен объектом {replacingPerson.Name}""</code><code class=""c# plain"">);</code></div><div class=""line number39 index38 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number40 index39 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number41 index40 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь в качестве обработчика изменений коллекции выступает метод <code>People_CollectionChanged</code>, в котором с помощью параметра NotifyCollectionChangedEventArgs  получаем информацию об изменении. Консольный вывод программы:</p> <div class=""console""> <pre class=""consoletext"">Добавлен новый объект: Bob Удален объект: Sam Объект Tom заменен объектом Eugene  Список пользователей: Eugene Bob </pre> </div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Интерфейсы IEnumerable и IEnumerator</h2>   <p>Как мы увидели, основной для большинства коллекций является реализация интерфейсов IEnumerable и IEnumerator. Благодаря такой реализации  мы можем перебирать объекты в цикле <code>foreach</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_189299""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var item </code><code class=""c# keyword"">in</code> <code class=""c# plain"">перечислимый_объект)</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Перебираемая коллекция должна реализовать интерфейс IEnumerable.</p> <p>Интерфейс IEnumerable имеет метод, возвращающий ссылку на другой интерфейс - перечислитель:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_461488""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IEnumerable</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">IEnumerator GetEnumerator();</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>А интерфейс IEnumerator определяет функционал для перебора внутренних объектов в контейнере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_558532""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">interface</code> <code class=""c# plain"">IEnumerator</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">bool</code> <code class=""c# plain"">MoveNext(); </code><code class=""c# comments"">// перемещение на одну позицию вперед в контейнере элементов</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">object</code> <code class=""c# plain"">Current {</code><code class=""c# keyword"">get</code><code class=""c# plain"">;}  </code><code class=""c# comments"">// текущий элемент в контейнере</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">void</code> <code class=""c# plain"">Reset(); </code><code class=""c# comments"">// перемещение в начало контейнера</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод <span class=""b"">MoveNext()</span> перемещает указатель на текущий элемент на следующую позицию в последовательности. Если последовательность еще не закончилась, то возвращает  true. Если же последовательность закончилась, то возвращается false.</p> <p>Свойство <span class=""b"">Current</span> возвращает объект в последовательности, на который указывает указатель.</p> <p>Метод <span class=""b"">Reset()</span> сбрасывает указатель позиции в начальное положение.</p> <p>Каким именно образом будет осуществляться перемещение указателя и получение элементов зависит от реализации интерфейса. В различных реализациях  логика может быть построена различным образом. </p> <p>Например, без использования цикла foreach перебирем массив с помощью интерфейса IEnumerator:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_179552""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = {</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">};</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">IEnumerator peopleEnumerator = people.GetEnumerator(); </code><code class=""c# comments"">// получаем IEnumerator</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">while</code> <code class=""c# plain"">(peopleEnumerator.MoveNext())   </code><code class=""c# comments"">// пока не будет возвращено false</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">item = (</code><code class=""c# keyword"">string</code><code class=""c# plain"">)peopleEnumerator.Current; </code><code class=""c# comments"">// получаем элемент на текущей позиции</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(item);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">peopleEnumerator.Reset(); </code><code class=""c# comments"">// сбрасываем указатель в начало массива</code></div></div></td></tr></tbody></table></div></div> <h3>Реализация IEnumerable и IEnumerator</h3> <p>Рассмотрим простешую реализацию <span class=""b"">IEnumerable</span> на примере:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_607481""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Week week = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Week();</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var day </code><code class=""c# keyword"">in</code> <code class=""c# plain"">week)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(day);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Week : IEnumerable</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days = { </code><code class=""c# string"">""Monday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tuesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Wednesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Thursday""</code><code class=""c# plain"">,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">                         </code><code class=""c# string"">""Friday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Saturday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sunday""</code> <code class=""c# plain"">};</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator GetEnumerator() =&gt; days.GetEnumerator();</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае класс Week, который представляет неделю и хранит все дни недели, реализует интерфейс IEnumerable. Однако в данном  случае мы поступили очень просто - вместо реализации IEnumerator мы просто возвращаем в методе GetEnumerator объект IEnumerator для  массива.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_57656""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator GetEnumerator() =&gt; days.GetEnumerator();</code></div></div></td></tr></tbody></table></div></div> <p>Благодаря этому мы можем перебрать все дни недели в цикле foreach.</p> <p>В то же время стоит отметить, что для перебора коллекции через foreach в принципе необязательно реализовать интерфейс IEnumerable. Достаточно  в классе определить публичный метод <span class=""b"">GetEnumerator</span>, который бы возвращал объект IEnumerator. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_636118""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Week</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days = { </code><code class=""c# string"">""Monday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tuesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Wednesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Thursday""</code><code class=""c# plain"">, </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">                        </code><code class=""c# string"">""Friday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Saturday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sunday""</code> <code class=""c# plain"">};</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator GetEnumerator() =&gt;days.GetEnumerator();</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Однако это было довольно просто - мы просто используем уже готовый перчислитель массива. Однако, возможно, потребуется задать свою собственную  логику перебора объектов. Для этого реализуем интерфейс <span class=""b"">IEnumerator</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_824802""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">WeekEnumerator : IEnumerator</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">position = -1;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">WeekEnumerator(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.days = days;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">object</code> <code class=""c# plain"">Current</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(position == -1 || position &gt;= days.Length)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentException();</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# plain"">days[position];</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">MoveNext()</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(position &lt; days.Length - 1)</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">            </code><code class=""c# plain"">position++;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">true</code><code class=""c# plain"">;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">false</code><code class=""c# plain"">;</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Reset() =&gt; position = -1;</code></div><div class=""line number28 index27 alt1""><code class=""c# plain"">}</code></div><div class=""line number29 index28 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Week</code></div><div class=""line number30 index29 alt1""><code class=""c# plain"">{</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days = { </code><code class=""c# string"">""Monday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tuesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Wednesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Thursday""</code><code class=""c# plain"">,</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">                            </code><code class=""c# string"">""Friday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Saturday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sunday""</code> <code class=""c# plain"">};</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator GetEnumerator() =&gt; </code><code class=""c# keyword"">new</code> <code class=""c# plain"">WeekEnumerator(days);</code></div><div class=""line number34 index33 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь теперь класс Week использует не встроенный перечислитель, а WeekEnumerator, который реализует IEnumerator.</p> <p>Ключевой момент при реализации перечислителя - перемещения указателя на элемент. В классе WeekEnumerator для хранения текущей позиции  определена переменная position. Следует учитывать, что в самом начале (в исходном состоянии) указатель должен указывать на позицию условно перед первым элементом.  Когда будет производиться цикл foreach, то данный цикл вначале вызывает метод MoveNext и фактически перемещает указатель на одну позицию в перед и только  затем обращается к свойству Current для получения элемента в текущей позиции.</p> <p>Затем в программе мы можем аналогичным образом перебирать объект Week с помощью цикла foreach:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_307411""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Week week = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Week();</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var day </code><code class=""c# keyword"">in</code> <code class=""c# plain"">week)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(day);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Обобщенная версия IEnumerator</h3> <p>В примерах выше использовались необобщенные версии интерфейсов, однако мы также можем использовать их обобщенные двойники:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_185482""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div><div class=""line number34 index33 alt1"">34</div><div class=""line number35 index34 alt2"">35</div><div class=""line number36 index35 alt1"">36</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Collections;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">WeekEnumerator : IEnumerator&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days;</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">int</code> <code class=""c# plain"">position = -1;</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">WeekEnumerator(</code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.days = days;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Current</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">get</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(position == -1 || position &gt;= days.Length)</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">throw</code> <code class=""c# keyword"">new</code> <code class=""c# plain"">ArgumentException();</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# plain"">days[position];</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">object</code> <code class=""c# plain"">IEnumerator.Current =&gt; Current;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">bool</code> <code class=""c# plain"">MoveNext()</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(position &lt; days.Length - 1)</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">position++;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">true</code><code class=""c# plain"">;</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">else</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">            </code><code class=""c# keyword"">return</code> <code class=""c# keyword"">false</code><code class=""c# plain"">;</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Reset() =&gt; position = -1;</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">void</code> <code class=""c# plain"">Dispose() { }</code></div><div class=""line number30 index29 alt1""><code class=""c# plain"">}</code></div><div class=""line number31 index30 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Week</code></div><div class=""line number32 index31 alt1""><code class=""c# plain"">{</code></div><div class=""line number33 index32 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code><code class=""c# plain"">[] days = { </code><code class=""c# string"">""Monday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tuesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Wednesday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Thursday""</code><code class=""c# plain"">,</code></div><div class=""line number34 index33 alt1""><code class=""c# spaces"">                            </code><code class=""c# string"">""Friday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Saturday""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sunday""</code> <code class=""c# plain"">};</code></div><div class=""line number35 index34 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; GetEnumerator() =&gt; </code><code class=""c# keyword"">new</code> <code class=""c# plain"">WeekEnumerator(days);</code></div><div class=""line number36 index35 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае реализуем интерфейс <code>IEnumerator&lt;string&gt;</code>, соответственно в свойстве Current нам надо возвратить объект string. В этом случае при  переборе в цикле foreach перебираемые объекты будут автоматически представлять тип <span class=""b"">string</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_917750""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Week week = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Week();</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">day </code><code class=""c# keyword"">in</code> <code class=""c# plain"">week)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(day);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Итераторы и оператор yield</h2>   <span class=""b"">Итератор</span> по сути представляет блок кода, который использует оператор <span class=""b"">yield</span> для перебора  набора значений. Данный блок кода может представлять тело метода, оператора или блок get в свойствах.<p></p> <p>Итератор использует две специальных инструкции:</p> <ul> <li><p><span class=""b"">yield return</span>: определяет возвращаемый элемент</p></li> <li><p><span class=""b"">yield break</span>: указывает, что последовательность больше не имеет элементов</p></li> </ul> <p>Рассмотрим небольшой пример:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_249683""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Numbers numbers = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Numbers();</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">numbers)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">{</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(n);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Numbers</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; GetEnumerator()</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; 6; i++)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">i * i;</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В классе Numbers метод <span class=""b"">GetEnumerator()</span> фактически представляет итератор. С помощью оператора  <span class=""b"">yield return</span> возвращается некоторое значение (в данном случае квадрат числа).</p> <p>В программе с помощью цикла foreach мы можем перебрать объект Numbers как обычную коллекцию. При получении каждого элемента в цикле foreach  будет срабатывать оператор yield return, который будет возвращать один элемент и запоминать текущую позицию.</p> <p>Благодаря итераторам мы можем пойти дальше и легко реализовать перебор числа в цикле foreach:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_109758""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">5) Console.WriteLine(n);</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var n </code><code class=""c# keyword"">in</code> <code class=""c# plain"">-5) Console.WriteLine(n);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">static</code> <code class=""c# keyword"">class</code> <code class=""c# plain"">Int32Extension</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">static</code> <code class=""c# plain"">IEnumerator&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; GetEnumerator(</code><code class=""c# keyword"">this</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">number)</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">        </code><code class=""c# keyword"">int</code> <code class=""c# plain"">k = (number &gt; 0)? number: 0;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = number - k; i &lt;= k; i++) </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">i;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае итератор реализован как метод расширения для типа int или System.Int32. В методе итератора фактически  возвращаем все целочисленные значения от 0 до текущего числа. Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">0 1 2 3 4 5 -5 -4 -3 -2 -1 0 </pre> </div> <p>Другой пример: пусть у нас есть коллекция Company, которая представляет компанию и которая хранит в массиве personnel штат сотрудников - объектов Person. Используем оператор yield  для перебора этой коллекции:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_65354""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt;Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Person[] personnel;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(Person[] personnel) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.personnel = personnel;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Length =&gt; personnel.Length;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator&lt;Person&gt; GetEnumerator()</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; personnel.Length; i++)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">personnel[i];</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>GetEnumerator()</code> представляет итератор. И когда мы будем осуществлять перебор в объекте Company в цикле foreach, то будет идти обращение к вызову <code>yield return personnel[i];</code>. При  обращении к оператору <code>yield return</code> будет сохраняться текущее местоположение. И когда метод foreach перейдет к следующей итерации  для получения нового объекта, итератор начнет выполнения с этого местоположения.</p> <p>Ну и в основной программе в цикле foreach выполняется собственно перебор, благодаря реализации итератора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_216552""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person[] </code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{ </code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">), </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">), </code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">) </code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">var microsoft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(people);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(Person employee </code><code class=""c# keyword"">in</code> <code class=""c# plain"">microsoft)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(employee.Name);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Хотя при реализации итератора в методе <code>GetEnumerator()</code> применялся перебор массива в цикле for, но это необязательно делать.  Мы можем просто определить несколько вызовов оператора <code>yield return</code>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_177047""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerator&lt;Person&gt; GetEnumerator()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">personnel[0];</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">personnel[1];</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">personnel[2];</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В этом случае при каждом вызове оператора <code>yield return</code> итератор также будет запоминать текущее местоположение и при последующих вызовах начинать с него.</p> <h3>Именованный итератор</h3> <p>Выше для создания итератора мы использовали метод <code>GetEnumerator</code>. Но оператор <code>yield</code> можно использовать  внутри любого метода, только такой метод должен возвращать объект интерфейса <code>IEnumerable</code>. Подобные методы еще называют  <span class=""b"">именованными итераторами</span>.</p> <p>Создадим такой именованный итератор в классе Company и используем его:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_83441""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">class</code> <code class=""c# plain"">Person</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">string</code> <code class=""c# plain"">Name { </code><code class=""c# keyword"">get</code><code class=""c# plain"">; }</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Person(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">name) =&gt;Name = name;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">}</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">class</code> <code class=""c# plain"">Company</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Person[] personnel;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">Company(Person[] personnel) =&gt; </code><code class=""c# keyword"">this</code><code class=""c# plain"">.personnel = personnel;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">int</code> <code class=""c# plain"">Length =&gt; personnel.Length;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# plain"">IEnumerable&lt;Person&gt; GetPersonnel(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">max)</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; max; i++)</code></div><div class=""line number14 index13 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(i == personnel.Length)</code></div><div class=""line number16 index15 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">break</code><code class=""c# plain"">;</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">            </code><code class=""c# keyword"">else</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">{</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">                </code><code class=""c# keyword"">yield</code> <code class=""c# keyword"">return</code> <code class=""c# plain"">personnel[i];</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">            </code><code class=""c# plain"">}</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">}</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number25 index24 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Определенный здесь итератор - метод <code>IEnumerable GetPersonnel(int max)</code> в качестве параметра принимает количество выводимых объектов.  В процессе работы программы может сложиться, что его значение будет больше, чем длина массива personnel. И чтобы не произошло ошибки, используется  оператор <span class=""b"">yield break</span>. Этот оператор прерывает выполнение итератора.</p> <p>Применение итератора:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_264239""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var people = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person[]</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">), </code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Bob""</code><code class=""c# plain"">),</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Person(</code><code class=""c# string"">""Sam""</code><code class=""c# plain"">)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">var microsoft = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Company(people);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(Person employee </code><code class=""c# keyword"">in</code> <code class=""c# plain"">microsoft.GetPersonnel(5))</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(employee.Name);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Вызов <code>microsoft.GetPersonnel(5)</code> будет возвращать набор из не более чем 5 объектов Person. Но так как у нас всего три таких объекта,  то в методе <code>GetPersonnel</code> после трех операций сработает оператор <code>yield break</code>.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Класс Array и массивы</h2>   <p>Все массивы в C# построены на основе класса <span class=""b"">Array</span> из пространства имен System. Этот класс определяет ряд свойств и  методов, которые мы можем использовать при работе с массивами. Основные свойства и методы:</p> <ul> <li><p>Свойство <span class=""b"">Length</span> возвращает длину массива</p></li> <li><p>Свойство <span class=""b"">Rank</span> возвращает размерность массива</p></li> <li><p><span class=""b"">int BinarySearch (Array array, object? value)</span> выполняет бинарный поиск в отсортированном массиве и возвращает индекс найденного элемента</p></li> <li><p><span class=""b"">void Clear (Array array)</span> очищает массив, устанавливая для всех его элементов значение по умолчанию</p></li> <li><p><span class=""b"">void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)</span>  копирует из массива sourceArray начиная с индекс sourceIndex length элементов в массив destinationArray начиная с индекса destinationIndex</p></li> <li><p><span class=""b"">bool Exists&lt;T&gt; (T[] array, Predicate&lt;T&gt; match)</span> проверяет, содержит ли массив array элементы, которые удовлеворяют условию делегата match</p></li> <li><p><span class=""b"">void Fill&lt;T&gt; (T[] array, T value)</span> заполняет массив array значением value</p></li> <li><p><span class=""b"">T? Find&lt;T&gt; (T[] array, Predicate&lt;T&gt; match)</span> находит первый элемент, который удовлеворяет определенному условию из делегата match. Если элемент не найден, то возвращается null</p></li> <li><p><span class=""b"">T? FindLast&lt;T&gt; (T[] array, Predicate&lt;T&gt; match)</span> находит последний элемент, который удовлеворяет определенному условию из делегата match. Если элемент не найден, то возвращается null</p></li> <li><p><span class=""b"">int FindIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match)</span> возвращает индекс первого вхождения элемента, который удовлеворяет определенному условию делегата match</p></li> <li><p><span class=""b"">int FindLastIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match)</span> возвращает индекс последнего вхождения элемента, который удовлеворяет определенному условию</p></li> <li><p><span class=""b"">T[] FindAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match)</span> возвращает все элементы в виде массива, которые удовлеворяет определенному условию из делегата match</p></li> <li><p><span class=""b"">int IndexOf (Array array, object? value)</span> возвращает индекс первого вхождения элемента в массив</p></li> <li><p><span class=""b"">int LastIndexOf (Array array, object? value)</span> возвращает индекс последнего вхождения элемента в массив</p></li> <li><p><span class=""b"">void Resize&lt;T&gt; (ref T[]? array, int newSize)</span> изменяет размер одномерного массива</p></li> <li><p><span class=""b"">void Reverse (Array array)</span> располагает элементы массива в обратном порядке</p></li> <li><p><span class=""b"">void Sort (Array array)</span> сортирует элементы одномерного массива</p></li> </ul> <p>Разберем самые используемые методы.</p> <h3>Сортировка массива</h3> <p>Отсортируем массив с помощью метода <span class=""b"">Sort()</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_442781""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Array.Sort(people);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) </code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c# string"">""{person} ""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code> </div><div class=""line number8 index7 alt1""><code class=""c# comments"">// Alice Bob Kate Sam Tom Tom</code></div></div></td></tr></tbody></table></div></div> <p>Этот метод имеет много перегрузок. Например, одна из версий позволяет отсортировать только часть массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_8831""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// сортируем с 1 индекса 3 элемента</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Array.Sort(people, 1, 3);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c# string"">""{person} ""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code> </div><div class=""line number9 index8 alt2""><code class=""c# comments"">// Tom Bob Kate Sam Tom Alice</code></div></div></td></tr></tbody></table></div></div> <h3>Поиск индекса элемента</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_24646""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// находим индекс первого элемента ""Tom""</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">tomFirstIndex = Array.IndexOf(people, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// находим индекс последнего элемента ""Tom""</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">tomLastIndex = Array.LastIndexOf(people, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// находим индекс первого элемента, у которого длина строки больше 3</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">lengthFirstIndex = Array.FindIndex(people, person =&gt; person.Length &gt; 3);</code></div><div class=""line number9 index8 alt2""><code class=""c# comments"">// находим индекс последнего элемента, у которого длина строки больше 3</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">lengthLastIndex = Array.FindLastIndex(people, person =&gt; person.Length &gt; 3);</code></div><div class=""line number11 index10 alt2""> </div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""tomFirstIndex: {tomFirstIndex}""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// 0</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""tomLastIndex: {tomLastIndex}""</code><code class=""c# plain"">);         </code><code class=""c# comments"">// 4</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""lengthFirstIndex: {lengthFirstIndex}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 3</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""lengthLastIndex: {lengthLastIndex}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// 5</code></div><div class=""line number16 index15 alt1""> </div><div class=""line number17 index16 alt2""> </div><div class=""line number18 index17 alt1""><code class=""c# comments"">// находим индекс элемента ""Bob""</code></div><div class=""line number19 index18 alt2""><code class=""c# comments"">// для бинарного поиска коллекцию нужно отсортировать</code></div><div class=""line number20 index19 alt1""><code class=""c# plain"">Array.Sort(people); </code><code class=""c# comments"">// Alice Bob Kate Sam Tom Tom</code></div><div class=""line number21 index20 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">bobIndex = Array.BinarySearch(people, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">);</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""bobIndex: {bobIndex}""</code><code class=""c# plain"">);                 </code><code class=""c# comments"">// 1</code></div></div></td></tr></tbody></table></div></div> <p>Если элемент не найден в массиве, то методы возвращают -1.</p> <h3>Поиск элемента по условию</h3> <div><div class=""syntaxhighlighter c#"" id=""highlighter_897934""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// находим первый и последний элементы</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// где длина строки больше 3 символов</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? first = Array.Find(people, person =&gt; person.Length &gt; 3);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(first); </code><code class=""c# comments"">// Kate</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">? last = Array.FindLast(people, person =&gt; person.Length &gt; 3);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(last); </code><code class=""c# comments"">// Alice</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# comments"">// находим элементы, у которых длина строки равна 3</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] group = Array.FindAll(people, person =&gt; person.Length == 3);</code></div><div class=""line number12 index11 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">group) Console.WriteLine(person);</code></div><div class=""line number13 index12 alt2""><code class=""c# comments"">// Tom Sam Bob Tom</code></div></div></td></tr></tbody></table></div></div> <h3>Изменение порядка элементов массива</h3> <p>Например, изменим порядок элементов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_479789""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Array.Reverse(people);</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) </code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c# string"">""{person} ""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# comments"">// ""Alice"", ""Tom"", ""Kate"", ""Bob"", ""Sam"", ""Tom""</code></div></div></td></tr></tbody></table></div></div> <p>Также можно изменить порядок только части элементов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_108285""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// изменяем порядок 3 элементов начиная c индекса 1  </code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Array.Reverse(people, 1, 3);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c# string"">""{person} ""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// ""Tom"", ""Kate"", ""Bob"", ""Sam"", ""Tom"", ""Alice""</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае изменяем порядок только 3 элементов начиная c индекса 1.</p> <h3>Изменение размера массива</h3> <p>Для изменения размера массива применяется метод Resize. Его первый параметр - изменяемый массив, а второй параметр - количество элементов, которые должны быть в массиве. Если второй параметр меньше длины массива,  то массив усекается. Если значение параметра, наоборот, больше, то массив дополняется дополнительными элементами, которые имеют значение по умолчанию.  Причем первый параметр передается по ссылке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_298340""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# comments"">// уменьшим массив до 4 элементов</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Array.Resize(</code><code class=""c# keyword"">ref</code> <code class=""c# plain"">people, 4);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">people) </code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c# string"">""{person} ""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// ""Tom"", ""Sam"", ""Bob"", ""Kate""</code></div></div></td></tr></tbody></table></div></div> <h3>Копирование массива</h3> <p>Метод <span class=""b"">Copy</span> копирует часть одного массива в другой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_522935""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var employees = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[3];</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# comments"">// копируем 3 элемента из массива people c индекса 1  </code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// и вставляем их в массив employees начиная с индекса 0</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Array.Copy(people,1, employees,0, 3);</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">employees) </code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write($</code><code class=""c# string"">""{person} ""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# comments"">// Sam Bob Kate</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае копируем 3 элемента из массива people начиная c индекса 1  и вставляем их в массив employees начиная с индекса 0.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Span</h2>   <p>Тип <span class=""b"">Span</span> представляет непрерывную область памяти. Цель данного типа - повысить производительность и эффективность использования  памяти. Span позволяет избежать дополнительных выделений памяти при операции с наборами данных. Поскольку Span является структурой, то объект этого типа располагаетс в стеке, а не в хипе.</p> <h3>Создание Span</h3> <p>Для создания объекта Span можно применять один из его конструкторов:</p> <ul> <li><p><code>Span()</code>: создает пустой объект Span</p></li> <li><p><code>Span(T item)</code>: создает объект Span с одним элементом item</p></li> <li><p><code>Span(T[] array)</code>: создает объект Span из массива array</p></li> <li><p><code>Span(void* pointer, int length)</code>: создает объект Span, который получает length байт памяти, начиная с указателя pointer</p></li> <li><p><code>Span(T[] array, int start, int length)</code>: создает объект Span, который получает из массива array length элементов, начиная с индекса start</p></li> </ul> <p>Например, простейшее создание Span:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_187413""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; people = [</code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">];</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае Span будет хранить ссылки на три строки.</p> <p>Нередко Span создается на основе каких-то других наборов данных:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_342981""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people =  { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; peopleSpan = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt;(people);</code></div></div></td></tr></tbody></table></div></div> <p>Мы также можем непосредственно присвоить массив, и он неявно будет преобразован в Span:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_897750""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; peopleSpan = people;</code></div></div></td></tr></tbody></table></div></div> <p>Далее мы можем получать, устанавливать или перебирать данные также, как в массиве:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_52087""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; peopleSpan = people;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">peopleSpan[1] = </code><code class=""c# string"">""Ann""</code><code class=""c# plain"">;              </code><code class=""c# comments"">// переустановка значения элемента</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(peopleSpan[2]);   </code><code class=""c# comments"">// получение элемента</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(peopleSpan.Length);   </code><code class=""c# comments"">// получение длины Span</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// перебор Span</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var s </code><code class=""c# keyword"">in</code> <code class=""c# plain"">peopleSpan)</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(s);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Если Span ведет себя внешне как массив, то в чем его преимущество или когда он нам может пригодиться? Рассмотрим простейшую ситуацию - у нас есть массив со значениями дневных температур воздуха  за месяц, и нам надо получить их него два набора - набор температур за первую декаду и за последнюю декаду. Используя массивы, мы могли бы сделать так:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_346977""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] temperatures =</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">10, 12, 13, 14, 15, 11, 13, 15, 16, 17,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">18, 16, 15, 16, 17, 14,  9,  8, 10, 11,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">12, 14, 15, 15, 16, 15, 13, 12, 12, 11</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] firstDecade = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[10];    </code><code class=""c# comments"">// выделяем память для первой декады</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">int</code><code class=""c# plain"">[] lastDecade = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">int</code><code class=""c# plain"">[10];     </code><code class=""c# comments"">// выделяем память для второй декады</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Array.Copy(temperatures, 0, firstDecade, 0, 10);    </code><code class=""c# comments"">// копируем данные в первый массив</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Array.Copy(temperatures, 20, lastDecade, 0, 10);    </code><code class=""c# comments"">// копируем данные во второй массив</code></div></div></td></tr></tbody></table></div></div> <p>Для хранения данных создаются два дополнительных массива для дневных температур каждой декады. С помощью метода Array.Copy данные из исходного массива  temperatures копируются в два остальных массива. Но суть в данном случае в том, что для обоих массивов мы вынуждены выделить память. То есть оба массива  по сути содержат те же данные, что и temperatures, однако в отдельных частях памяти.</p> <p>Span позволяет работать с памятью более эффективно и избежать ненужных выделений памяти. Так, используем вместо массивов Span:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_19651""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] temperatures =</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">10, 12, 13, 14, 15, 11, 13, 15, 16, 17,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">18, 16, 15, 16, 17, 14,  9,  8, 10, 11,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">12, 14, 15, 15, 16, 15, 13, 12, 12, 11</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; temperaturesSpan = temperatures;</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; firstDecade = temperaturesSpan.Slice(0, 10);    </code><code class=""c# comments"">// нет выделения памяти под данные</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; lastDecade = temperaturesSpan.Slice(20, 10);    </code><code class=""c# comments"">// нет выделения памяти под данные</code></div></div></td></tr></tbody></table></div></div> <p>Для создания производных объектов Span применяется метод Slice, который из Spana выделяет часть и возвращает ее в виде другого объекта Span.  Теперь объекты Span firstDecade и lastDecade работают с теми же данными, что и temperaturesSpan, а дополнительно память не выделяется. То есть во всех трех случаях  мы работаем с тем же массивом temperatures. Мы даже можем в одном Span изменить данные, и данные изменятся в другом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_499549""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code><code class=""c# plain"">[] temperatures =</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">10, 12, 13, 14, 15, 11, 13, 15, 16, 17,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">18, 16, 15, 16, 17, 14,  9,  8, 10, 11,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">12, 14, 15, 15, 16, 15, 13, 12, 12, 11</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">};</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; temperaturesSpan = temperatures;</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">int</code><code class=""c# plain"">&gt; firstDecade = temperaturesSpan.Slice(0, 10);</code></div><div class=""line number10 index9 alt1""> </div><div class=""line number11 index10 alt2""><code class=""c# plain"">temperaturesSpan[0] = 25; </code><code class=""c# comments"">// меняем в temperatureSpan</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(firstDecade[0]); </code><code class=""c# comments"">//25</code></div></div></td></tr></tbody></table></div></div> <p>За счет чего это достигается? Для понимания работы Span можно обратиться к исходному коду типа. В частности, мы можем в нем увидеть следующее свойство:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_201333""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">readonly</code> <code class=""c# keyword"">ref</code> <code class=""c# keyword"">struct</code> <code class=""c# plain"">Span&lt;T&gt;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//....</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">public</code> <code class=""c# keyword"">ref</code> <code class=""c# plain"">T </code><code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">index] { </code><code class=""c# keyword"">get</code> <code class=""c# plain"">{ ... } }</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//....</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь мы видим, что индексатор возвращает ref-ссылку, благодаря чем мы получаем доступ непосредственно к объекту и можем его изменять.</p> <p>В данном случае, конечно, преимущества от отсутствия выделения дополнительной памяти под хранение объектов минимальны. Но при более интенсивной работе с данными выигрыш в производительности неизбежно  должен возрастать.</p> <h3>Методы Span</h3> <p>Основные методы Span:</p> <ul> <li><p><code>void Fill(T value)</code>: заполняет все элементы Span значением value</p></li> <li><p><code>T[] ToArray()</code>: преобразует Span в массив</p></li> <li><p><code>Span&lt;T&gt; Slice(int start, int length)</code>: выделяет из Span length элементов начиная с индекса start в виде другого Span</p></li> <li><p><code>void Clear()</code>: очищает Span</p></li> <li><p><code>void CopyTo(Span&lt;T&gt; destination)</code>: копирует элементы текущего Span в другой Span</p></li> <li><p><code>bool TryCopyTo(Span&lt;T&gt; destination)</code>: копирует элементы текущего Span в другой Span, но при этом также возвращает значение bool,  которое указывает, удачно ли прошла операция копирования</p></li> </ul> <h3>ReadOnlySpan</h3> <p>Структура <span class=""b"">ReadOnlySpan</span> аналогична Span, только предназначена для неизменяемых данных. Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_186911""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""hello, world""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">worldString = text.Substring(startIndex: 7, length: 5);           </code><code class=""c# comments"">// есть выделение памяти под символы</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">ReadOnlySpan&lt;</code><code class=""c# keyword"">char</code><code class=""c# plain"">&gt; worldSpan = text.AsSpan().Slice(start: 7, length: 5); </code><code class=""c# comments"">// нет выделения памяти под символы</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">//worldSpan[0] = 'a'; // Нельзя изменить</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(worldSpan[0]); </code><code class=""c# comments"">// выводим первый символ</code></div><div class=""line number6 index5 alt1""> </div><div class=""line number7 index6 alt2""><code class=""c# comments"">// перебор символов</code></div><div class=""line number8 index7 alt1""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var c </code><code class=""c# keyword"">in</code> <code class=""c# plain"">worldSpan)</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">{</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.Write(c);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае с помощью метода <span class=""b"">AsSpan()</span> преобразуем строку в объект ReadOnlySpan&lt;char&gt; и затем выделяем из него диапазон символов ""world"".  Поскольку ReadOnlySpan предназначен только для чтения, то соответственно мы не можем изменить через него данные, но получить можем. В остальном  работа с ReadOnlySpan идет так же, как с Span.</p> <h3>Ограничения Span</h3> <p>Как структура, определенная с модификатором ref, Span имеет ряд ограничений: она не может быть присвоена переменной типа Object, dynamic  или переменной типа интерфейса. Она не может быть полем в объекте ссылочного типа (а только внутри ref-структур). Она не может использоваться в пределах операций await или yield.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Индексы и диапазоны</h2>   <p>В C# 8.0 была добавлена новая функциональность - индексы и диапазоны, которые упрощают получение из массивов подмассивов.  Для этого в C# есть два типа: <span class=""b"">System.Range</span> и <span class=""b"">System.Index</span>. Оба типа являются структурами. Тип Range представляет некоторый диапазон значений  в некоторой последовательность, а тип Index - индекс в последовательности.</p> <h3>Индексы</h3> <p>Индекс фактически представляет числовое значение, и при определении индекса мы можем указать это значение:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_623291""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Index myIndex = 2;</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае индекс представляет третий элемент последовательности (индексация начинается с 0).</p> <p>С помощью специального оператора <span class=""b"">^</span> можно задать индекс относительно конца последовательности.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_553335""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Index myIndex = ^2;</code></div></div></td></tr></tbody></table></div></div> <p>Теперь индекс представляет второй элемент с конца последовательности, то есть предпоследний элемент.</p> <p>Используем индексы для получения элементов массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_853084""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Index myIndex1 = 2;     </code><code class=""c# comments"">// третий элемент</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Index myIndex2 = ^2;    </code><code class=""c# comments"">// предпоследний элемент</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">selected1 = people[myIndex1];    </code><code class=""c# comments"">// Sam</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">selected2 = people[myIndex2];    </code><code class=""c# comments"">// Kate</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(selected1);   </code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(selected2);</code></div></div></td></tr></tbody></table></div></div> <p>Фактически для данной задачи индексы не нужны, и мы можем воспользоваться стандартными возможностями массивов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_136877""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">selected1 = people[2];    </code><code class=""c# comments"">// Sam</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">selected2 = people[people.Length - 2];    </code><code class=""c# comments"">// Kate</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(selected1);   </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(selected2);</code></div></div></td></tr></tbody></table></div></div> <p>То есть в подобных ситуациях плюсом индексов является большая удобочитаемость. Так, <code>people[^2]</code> более читабельно, чем <code>people[people.Length - 2]</code>.</p> <h3>Диапазон</h3> <p>Диапазон представляет часть последовательности, которая ограничена двумя индексами. Начальный индекс включается в диапазон, а конечный индекс НЕ входит в диапазон.  Для определения диапазона применяется оператор <span class=""b"">..</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_533834""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Range myRange1 = 1..4; </code><code class=""c# comments"">// по 1-го индекса включая по 4-й индекс не включая</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае диапазон myRange1 включает элементы с 1 индекса по 4-й индекс (не включая). При этом элемент по 4-му индексу не  включается в диапазон. При этом границы диапазона задаются не просто числами, а именно объектами Index. То есть следующие определения диапазонов будут равноценны:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_227332""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Index start = 1;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Index end = 4;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Range myRange1 = start..end;</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">            </code> </div><div class=""line number5 index4 alt2""><code class=""c# plain"">Range myRange2 = 1..4;</code></div></div></td></tr></tbody></table></div></div> <p>Практическое применение диапазонов - получим со второго по четвертый элементы массива:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_923866""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] peopleRange = people[1..4]; </code><code class=""c# comments"">// получаем 2, 3 и 4-й элементы из массива</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">peopleRange)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Результатом операции <code>people[1..4]</code> является подмассив элементов с 1 по 3 индексы (включая). Консольный вывод:</p> <pre class=""sh"">Bob Sam Kate </pre> <p>Мы можем задать для диапазона только конечный индекс. В этом случае начальным индексом по умолчанию будет 0.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_562639""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] peopleRange = people[..4];     </code><code class=""c# comments"">// Tom, Bob, Sam, Kate</code></div></div></td></tr></tbody></table></div></div> <p>Либо, наоборот, задать только начальный индекс, тогда конечным индексом будет последний индекс последовательности:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_652112""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] peopleRange = people[1..];     </code><code class=""c# comments"">// Bob, Sam, Kate, Alice</code></div></div></td></tr></tbody></table></div></div> <p>Используя индексы относительно конца последовательности, можно получать диапазон относительно конца последовательности:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_169300""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] peopleRange1 = people[^2..];       </code><code class=""c# comments"">// два последних - Kate, Alice</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] peopleRange2 = people[..^1];       </code><code class=""c# comments"">// начиная с предпоследнего - Tom, Bob, Sam, Kate</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] peopleRange3 = people[^3..^1];     </code><code class=""c# comments"">// два начиная с предпоследнего - Sam, Kate</code></div></div></td></tr></tbody></table></div></div> <p>Кроме массивов индексы и диапазоны также применяются к объектам Span и ReadOnlySpan:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_538456""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] people = { </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">, </code><code class=""c# string"">""Bob""</code><code class=""c# plain"">, </code><code class=""c# string"">""Sam""</code><code class=""c# plain"">, </code><code class=""c# string"">""Kate""</code><code class=""c# plain"">, </code><code class=""c# string"">""Alice""</code> <code class=""c# plain"">};</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; peopleSpan = people;</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Span&lt;</code><code class=""c# keyword"">string</code><code class=""c# plain"">&gt; selectedPeopleSpan = peopleSpan[1..4];</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(var person </code><code class=""c# keyword"">in</code> <code class=""c# plain"">selectedPeopleSpan)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(person);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: Напишите программу на C#, которая выполняет следующие действия с коллекцией List<string>\r\n//1. Создайте список строк List<string> с начальными значениями \"Tom\", \"Bob\", \"Sam\".\r\n//2. Добавьте в список новый элемент \"Alice\".\r\n//3. Проверьте, содержит ли список элемент \"Bob\", и выведите результат на консоль.\r\n//4. Переберите все элементы списка и выведите их на консоль.\r\n//5. Удалите элемент \"Tom\" из списка и снова выведите все элементы списка на консоль.\r\n",
                "//Задание 1: Использование класса LinkedList<T> для работы с двухсвязным списком\r\n//1. Напишите пример кода, который создает пустой двухсвязный список для хранения целых чисел и добавляет в него несколько элементов.",
                "//Задание 1: Работа с классом Queue<T> и применением его методов\r\n//1. Создайте очередь для хранения целых чисел, добавьте в нее несколько чисел, затем извлеките два элемента с помощью метода Dequeue и выведите их.",
                "//Задание 1: Использование класса Stack<T> для работы с коллекцией в формате LIFO\r\n//1. Напишите код для создания стека целых чисел, добавьте в него несколько значений с использованием метода Push и выведите текущее количество элементов в стеке.",
                "//Задание 1: Использование класса Dictionary<K, V> для работы с коллекцией пар ключ-значение\r\n//1. Напишите код для создания словаря, где ключом будет номер телефона (тип string), а значением - имя абонента (тип string). Добавьте в словарь несколько значений и выведите их на консоль.",
                "//Задание 1: Использование класса ObservableCollection для отслеживания изменений в коллекции.\r\n //1. Создайте ObservableCollection объектов Person, добавьте в нее несколько элементов, используя метод Add, и выведите все имена на консоль.",
                "//Задание 1: Реализация интерфейсов IEnumerable и IEnumerator в C#\r\n//1. Напишите класс, который реализует интерфейс IEnumerable для перебора дней недели. Используйте цикл foreach для вывода всех дней недели на консоль.\r\n ",
                "//Задание 1: Реализация и использование итераторов с оператором yield\r\n//1. Напишите код для создания итератора, который генерирует квадраты чисел от 0 до заданного числа. Используйте оператор yield return и перебор значений в цикле foreach.",
                "//Задание 1: Работа с классом Array в C# и его методами для работы с массивами\r\n//1. Напишите код, который создает массив строк, заполняет его значениями и выводит его длину с использованием свойства Length.",
                "//Задание 1: Реализуйте программу, которая использует тип Span для работы с массивом чисел.\r\n //1. Создать массив температур на неделю (7 значений) и поместить его в Span.\r\n //2. Используя метод Slice, выделить подмассив для первых трех дней и последние три дня.",
                "//Задание 1: Использование индексов и диапазонов в C# для работы с массивами и Span\r\n //1. Создайте массив из 7 строк, представляющих дни недели (например, \"Monday\", \"Tuesday\", и так далее).",
            };
            if (form1Instance != null && comboBox10.SelectedIndex >= 0 && comboBox10.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox10.SelectedIndex;
                selectCombobox = 10;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }

        private async void comboBox11_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Работа со строками</h1><h2>Строки и класс String</h2>   <p>Довольно большое количество задач, которые могут встретиться при разработке приложений, так или  иначе связано с обработкой строк - парсинг веб-страниц, поиск в тексте, какие-то аналитические задачи, связанные с извлечением нужной информации  из текста и т.д. Поэтому в этом плане работе со строками уделяется особое внимание.</p> <p>В языке C# строковые значения представляет тип <span class=""b"">string</span>, а вся функциональность работы с данным типом сосредоточена в классе  <span class=""b"">System.String</span>. Собственно <code>string</code> является псевдонимом для класса String. Объекты этого класса представляют текст как последовательность символов Unicode. Максимальный размер объекта String может составлять в памяти 2 ГБ, или около 1 миллиарда символов.</p> <h3>Создание строк</h3> <p>Создавать строки можно, как используя переменную типа string и присваивая ей значение, так и применяя один из конструкторов класса String:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_112353""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s1 = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">String(</code><code class=""c# string"">'a'</code><code class=""c# plain"">, 6); </code><code class=""c# comments"">// результатом будет строка ""aaaaaa""</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">String(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">'w'</code><code class=""c# plain"">, </code><code class=""c# string"">'o'</code><code class=""c# plain"">, </code><code class=""c# string"">'r'</code><code class=""c# plain"">, </code><code class=""c# string"">'l'</code><code class=""c# plain"">, </code><code class=""c# string"">'d'</code> <code class=""c# plain"">});</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s4 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">String(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">'w'</code><code class=""c# plain"">, </code><code class=""c# string"">'o'</code><code class=""c# plain"">, </code><code class=""c# string"">'r'</code><code class=""c# plain"">, </code><code class=""c# string"">'l'</code><code class=""c# plain"">, </code><code class=""c# string"">'d'</code> <code class=""c# plain"">}, 1, 3); </code><code class=""c# comments"">// orl</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(s1);  </code><code class=""c# comments"">// hello</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(s2);  </code><code class=""c# comments"">// aaaaaaa</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(s3);  </code><code class=""c# comments"">// world</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(s4);  </code><code class=""c# comments"">// orl</code></div></div></td></tr></tbody></table></div></div> <p>Конструктор String имеет различное число версий. Так, вызов конструктора</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_436614""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">new</code> <code class=""c# plain"">String(</code><code class=""c# string"">'a'</code><code class=""c# plain"">, 6)</code></div></div></td></tr></tbody></table></div></div> <p>6 раз повторит объект из первого параметра, то есть фактически создаст строку ""aaaaaa"".</p> <p>Еще один конструктор принимает массив символов, из которых создается строка</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_630826""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s3 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">String(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">'w'</code><code class=""c# plain"">, </code><code class=""c# string"">'o'</code><code class=""c# plain"">, </code><code class=""c# string"">'r'</code><code class=""c# plain"">, </code><code class=""c# string"">'l'</code><code class=""c# plain"">, </code><code class=""c# string"">'d'</code> <code class=""c# plain"">});</code></div></div></td></tr></tbody></table></div></div> <p>Третий использованный выше в примере конструктор позволяет создать строку из части массива символов. Второй параметр передает начальный индекс, с которого извлкаются символы, а третий параметр  указывает на количество символов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_652903""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s4 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">String(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">'w'</code><code class=""c# plain"">, </code><code class=""c# string"">'o'</code><code class=""c# plain"">, </code><code class=""c# string"">'r'</code><code class=""c# plain"">, </code><code class=""c# string"">'l'</code><code class=""c# plain"">, </code><code class=""c# string"">'d'</code> <code class=""c# plain"">}, 1, 3); </code><code class=""c# comments"">// orl</code></div></div></td></tr></tbody></table></div></div> <h3>Строка как набор символов</h3> <p>Так как строка хранит коллекцию символов, в ней определен индексатор для доступа к этим символам:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_202334""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">public</code> <code class=""c# keyword"">char</code> <code class=""c# keyword"">this</code><code class=""c# plain"">[</code><code class=""c# keyword"">int</code> <code class=""c# plain"">index] {</code><code class=""c# keyword"">get</code><code class=""c# plain"">;}</code></div></div></td></tr></tbody></table></div></div> <p>Применяя индексатор, мы можем обратиться к строке как к массиву символов и получить по индексу любой из ее символов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_310448""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// получаем символ</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">char</code> <code class=""c# plain"">firstChar = message[1]; </code><code class=""c# comments"">// символ 'e'</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(firstChar);   </code><code class=""c# comments"">//e</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(message.Length);  </code><code class=""c# comments"">// длина строки  </code></div></div></td></tr></tbody></table></div></div> <p>Используя свойство <span class=""b"">Length</span>, как и в обычном массиве, можно получить длину строки.</p> <h3>Перебор строк</h3> <p>Класс String реализует интерфейс IEnumerable, благодаря чему строку можно перебрать в цикле foreach как набор объектов char. Также можно с помощью  других типов циклов перебрать строку, применяя обращение к символам по индексу:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_974626""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">message = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">for</code><code class=""c# plain"">(var i =0; i &lt; message.Length; i++)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">{</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(message[i]);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">}</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">foreach</code><code class=""c# plain"">(var ch </code><code class=""c# keyword"">in</code> <code class=""c# plain"">message)</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">{</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(ch);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Сравнение строк</h3> <p>В отличие от других классов строки сравниваются по значению их символов, а не по ссылкам:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_518869""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">message1 = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">message2 = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(message1 == message2);    </code><code class=""c# comments"">// true</code></div></div></td></tr></tbody></table></div></div> <h3>Многострочные строки</h3> <p>Начиная с C# 11 с помощью трех пар двойных кавычек можно оформить многострочный текст, в том числе с применением интерполяции:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_314473""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div><div class=""line number23 index22 alt2"">23</div><div class=""line number24 index23 alt1"">24</div><div class=""line number25 index24 alt2"">25</div><div class=""line number26 index25 alt1"">26</div><div class=""line number27 index26 alt2"">27</div><div class=""line number28 index27 alt1"">28</div><div class=""line number29 index28 alt2"">29</div><div class=""line number30 index29 alt1"">30</div><div class=""line number31 index30 alt2"">31</div><div class=""line number32 index31 alt1"">32</div><div class=""line number33 index32 alt2"">33</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Print();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">PrintValue(</code><code class=""c# string"">""hello""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">void</code> <code class=""c# plain"">Print()</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">{</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""""</code><code class=""c# plain"">""</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">              </code><code class=""c# plain"">&lt;element attr=</code><code class=""c# string"">""content""</code><code class=""c# plain"">&gt;</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">&lt;body&gt;</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">&lt;/body&gt;</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">              </code><code class=""c# plain"">&lt;/element&gt;</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">              </code><code class=""c# string"">""""</code><code class=""c# plain"">"";</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(text);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">}</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# keyword"">void</code> <code class=""c# plain"">PrintValue(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">val)</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">{</code></div><div class=""line number17 index16 alt2""><code class=""c# spaces"">    </code><code class=""c# keyword"">string</code> <code class=""c# plain"">text = $</code><code class=""c# string"">""""</code><code class=""c# plain"">""</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">              </code><code class=""c# plain"">&lt;element attr=</code><code class=""c# string"">""content""</code><code class=""c# plain"">&gt;</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">&lt;body&gt;</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">                </code><code class=""c# plain"">{val}</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">                </code><code class=""c# plain"">&lt;/body&gt;</code></div><div class=""line number22 index21 alt1""><code class=""c# spaces"">              </code><code class=""c# plain"">&lt;/element&gt;</code></div><div class=""line number23 index22 alt2""><code class=""c# spaces"">              </code><code class=""c# string"">""""</code><code class=""c# plain"">"";</code></div><div class=""line number24 index23 alt1""><code class=""c# spaces"">    </code><code class=""c# color1"">//// или так </code></div><div class=""line number25 index24 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//string text =  $$""""""</code></div><div class=""line number26 index25 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">//          &lt;element attr=""content""&gt;</code></div><div class=""line number27 index26 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//            &lt;body&gt;</code></div><div class=""line number28 index27 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">//            {{val}}</code></div><div class=""line number29 index28 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//            &lt;/body&gt;</code></div><div class=""line number30 index29 alt1""><code class=""c# spaces"">    </code><code class=""c# comments"">//          &lt;/element&gt;</code></div><div class=""line number31 index30 alt2""><code class=""c# spaces"">    </code><code class=""c# comments"">//          """""";</code></div><div class=""line number32 index31 alt1""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(text);</code></div><div class=""line number33 index32 alt2""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Основные методы строк</h3> <p>Основная функциональность класса String раскрывается через его методы, среди которых можно выделить следующие:</p> <ul> <li><p><span class=""b"">Compare</span>: сравнивает две строки с учетом текущей культуры (локали) пользователя</p></li> <li><p><span class=""b"">CompareOrdinal</span>: сравнивает две строки без учета локали</p></li> <li><p><span class=""b"">Contains</span>: определяет, содержится ли подстрока в строке</p></li> <li><p><span class=""b"">Concat</span>: соединяет строки</p></li> <li><p><span class=""b"">CopyTo</span>: копирует часть строки, начиная с определенного индекса в массив</p></li> <li><p><span class=""b"">EndsWith</span>: определяет, совпадает ли конец строки с подстрокой</p></li> <li><p><span class=""b"">Format</span>: форматирует строку</p></li> <li><p><span class=""b"">IndexOf</span>: находит индекс первого вхождения символа или подстроки в строке</p></li> <li><p><span class=""b"">Insert</span>: вставляет в строку подстроку</p></li> <li><p><span class=""b"">Join</span>: соединяет элементы массива строк</p></li> <li><p><span class=""b"">LastIndexOf</span>: находит индекс последнего вхождения символа или подстроки в строке</p></li> <li><p><span class=""b"">Replace</span>: замещает в строке символ или подстроку другим символом или подстрокой</p></li> <li><p><span class=""b"">Split</span>: разделяет одну строку на массив строк</p></li> <li><p><span class=""b"">Substring</span>: извлекает из строки подстроку, начиная с указанной позиции</p></li> <li><p><span class=""b"">ToLower</span>: переводит все символы строки в нижний регистр</p></li> <li><p><span class=""b"">ToUpper</span>: переводит все символы строки в верхний регистр</p></li> <li><p><span class=""b"">Trim</span>: удаляет начальные и конечные пробелы из строки</p></li> </ul> </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Операции со строками</h2>   <h3>Объединение строк</h3> <p>Конкатенация строк или объединение может производиться как с помощью операции <code>+</code>, так и с помощью метода <span class=""b"">Concat</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_426075""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s1 = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s2 = </code><code class=""c# string"">""world""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s3 = s1 + </code><code class=""c# string"">"" ""</code> <code class=""c# plain"">+ s2; </code><code class=""c# comments"">// результат: строка ""hello world""</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s4 = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Concat(s3, </code><code class=""c# string"">""!!!""</code><code class=""c# plain"">); </code><code class=""c# comments"">// результат: строка ""hello world!!!""</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(s4);</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>Concat</code> является статическим методом класса string, принимающим в качестве параметров две строки. Также имеются другие версии  метода, принимающие другое количество параметров.</p> <p>Для объединения строк также может использоваться метод <span class=""b"">Join</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_562897""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s5 = </code><code class=""c# string"">""apple""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s6 = </code><code class=""c# string"">""a day""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s7 = </code><code class=""c# string"">""keeps""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s8 = </code><code class=""c# string"">""a doctor""</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s9 = </code><code class=""c# string"">""away""</code><code class=""c# plain"">;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">string</code><code class=""c# plain"">[] values = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[] { s5, s6, s7, s8, s9 };</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s10 = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Join(</code><code class=""c# string"">"" ""</code><code class=""c# plain"">, values);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(s10); </code><code class=""c# comments"">// apple a day keeps a doctor away</code></div></div></td></tr></tbody></table></div></div> <p>Метод Join также является статическим. Использованная выше версия метода получает два параметра: строку-разделитель (в данном случае пробел) и  массив строк, которые будут соединяться и разделяться разделителем.</p> <h3>Сравнение строк</h3> <p>Для сравнения строк применяется статический метод <span class=""b"">Compare</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_504276""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s1 = </code><code class=""c# string"">""hello""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">s2 = </code><code class=""c# string"">""world""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">result = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Compare(s1, s2);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">if</code> <code class=""c# plain"">(result&lt;0)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Строка s1 перед строкой s2""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div><div class=""line number9 index8 alt2""><code class=""c# keyword"">else</code> <code class=""c# keyword"">if</code> <code class=""c# plain"">(result &gt; 0)</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">{</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Строка s1 стоит после строки s2""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">}</code></div><div class=""line number13 index12 alt2""><code class=""c# keyword"">else</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">{</code></div><div class=""line number15 index14 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Строки s1 и s2 идентичны""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">}</code></div><div class=""line number17 index16 alt2""><code class=""c# comments"">// результатом будет ""Строка s1 перед строкой s2""</code></div></div></td></tr></tbody></table></div></div> <p>Данная версия метода Compare принимает две строки и возвращает число. Если первая строка по алфавиту стоит выше второй, то возвращается число меньше нуля.  В противном случае возвращается число больше нуля. И третий случай - если строки равны, то возвращается число 0.</p> <p>В данном случае так как символ h по алфавиту стоит выше символа w, то и первая строка будет стоять выше.</p> <h3>Поиск в строке</h3> <p>С помощью метода <span class=""b"">IndexOf</span> мы можем определить индекс первого вхождения отдельного символа или подстроки в строке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_697056""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s1 = </code><code class=""c# string"">""hello world""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">char</code> <code class=""c# plain"">ch = </code><code class=""c# string"">'o'</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">indexOfChar = s1.IndexOf(ch); </code><code class=""c# comments"">// равно 4</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(indexOfChar);</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">substring = </code><code class=""c# string"">""wor""</code><code class=""c# plain"">;</code></div><div class=""line number7 index6 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">indexOfSubstring = s1.IndexOf(substring); </code><code class=""c# comments"">// равно 6</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(indexOfSubstring);</code></div></div></td></tr></tbody></table></div></div> <p>Подобным образом действует метод <span class=""b"">LastIndexOf</span>, только находит индекс последнего вхождения символа или подстроки в строку.</p> <p>Еще одна группа методов позволяет узнать начинается или заканчивается ли строка на определенную подстроку. Для этого предназначены методы  <span class=""b"">StartsWith</span> и <span class=""b"">EndsWith</span>. Например, в массиве строк хранится список файлов, и нам надо вывести все файлы с  расширением exe:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_980998""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var files = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[]</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">{</code></div><div class=""line number3 index2 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""myapp.exe""</code><code class=""c# plain"">,</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">    </code><code class=""c# string"">""forest.jpg""</code><code class=""c# plain"">,</code></div><div class=""line number5 index4 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""main.exe""</code><code class=""c# plain"">,</code></div><div class=""line number6 index5 alt1""><code class=""c# spaces"">    </code><code class=""c# string"">""book.pdf""</code><code class=""c# plain"">,</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""river.png""</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">};</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# keyword"">for</code> <code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; files.Length; i++)</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">{</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(files[i].EndsWith(</code><code class=""c# string"">"".exe""</code><code class=""c# plain"">))</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(files[i]);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <h3>Разделение строк</h3> <p>С помощью функции <span class=""b"">Split</span> мы можем разделить строку на массив подстрок. В качестве параметра функция <code>Split</code>  принимает массив символов или строк, которые и будут служить разделителями. Например, подсчитаем количество слов в сроке,  разделив ее по пробельным символам:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_903388""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""И поэтому все так произошло""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] words = text.Split(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">' '</code> <code class=""c# plain"">});</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(</code><code class=""c# keyword"">string</code> <code class=""c# plain"">s </code><code class=""c# keyword"">in</code> <code class=""c# plain"">words)</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(s);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Это не лучший способ разделения по пробелам, так как во входной строке у нас могло бы быть несколько подряд идущих пробелов и в итоговый массив  также бы попадали пробелы, поэтому лучше использовать другую версию метода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_871874""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code><code class=""c# plain"">[] words = text.Split(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">' '</code> <code class=""c# plain"">}, StringSplitOptions.RemoveEmptyEntries);</code></div></div></td></tr></tbody></table></div></div> <p>Второй параметр <code>StringSplitOptions.RemoveEmptyEntries</code> говорит, что надо удалить все пустые подстроки.</p> <h3>Обрезка строки</h3> <p>Для обрезки начальных или концевых символов используется функция <span class=""b"">Trim</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_357439""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">"" hello world ""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">text = text.Trim(); </code><code class=""c# comments"">// результат ""hello world""</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">text = text.Trim(</code><code class=""c# keyword"">new</code> <code class=""c# keyword"">char</code><code class=""c# plain"">[] { </code><code class=""c# string"">'d'</code><code class=""c# plain"">, </code><code class=""c# string"">'h'</code> <code class=""c# plain"">}); </code><code class=""c# comments"">// результат ""ello worl""</code></div></div></td></tr></tbody></table></div></div> <p>Функция Trim без параметров обрезает начальные и конечные пробелы и возвращает обрезанную строку. Чтобы явным образом указать, какие  начальные и конечные символы следует обрезать, мы можем передать в функцию массив этих символов.</p> <p>Эта функция имеет частичные аналоги: функция <span class=""b"">TrimStart</span> обрезает начальные символы, а функция <span class=""b"">TrimEnd</span> обрезает конечные символы.</p> <p>Обрезать определенную часть строки позволяет функция <span class=""b"">Substring</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_968380""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""Хороший день""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// обрезаем начиная с третьего символа</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">text = text.Substring(2);</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// результат ""роший день""</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(text);</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// обрезаем сначала до последних двух символов</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">text = text.Substring(0, text.Length - 2);</code></div><div class=""line number8 index7 alt1""><code class=""c# comments"">// результат ""роший де""</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces""> </code><code class=""c# plain"">Console.WriteLine(text);</code></div></div></td></tr></tbody></table></div></div> <p>Функция Substring также возвращает обрезанную строку. В качестве параметра первая использованная версия применяет индекс, начиная с  которого надо обрезать строку. Вторая версия применяет два параметра - индекс начала обрезки и длину вырезаемой части строки.</p> <h3>Вставка</h3> <p>Для вставки одной строки в другую применяется функция <span class=""b"">Insert</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_712113""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""Хороший день""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">substring = </code><code class=""c# string"">""замечательный ""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">text = text.Insert(8, substring);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// Хороший замечательный день</code></div></div></td></tr></tbody></table></div></div> <p>Первым параметром в функции Insert является индекс, по которому надо вставлять подстроку, а второй параметр - собственно подстрока.</p> <h3>Удаление строк</h3> <p>Удалить часть строки помогает метод <span class=""b"">Remove</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_924935""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""Хороший день""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// индекс последнего символа</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">ind = text.Length - 1;</code></div><div class=""line number4 index3 alt1""><code class=""c# comments"">// вырезаем последний символ</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">text = text.Remove(ind); </code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// Хороший ден</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# comments"">// вырезаем первые два символа</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">text = text.Remove(0, 2);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// роший ден</code></div></div></td></tr></tbody></table></div></div> <p>Первая версия метода Remove принимает индекс в строке, начиная с которого надо удалить все символы. Вторая версия принимает еще один параметр - сколько  символов надо удалить.</p> <h3>Замена</h3> <p>Чтобы заменить один символ или подстроку на другую, применяется метод <span class=""b"">Replace</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_245945""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""хороший день""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">text = text.Replace(</code><code class=""c# string"">""хороший""</code><code class=""c# plain"">, </code><code class=""c# string"">""плохой""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// плохой день</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">text = text.Replace(</code><code class=""c# string"">""о""</code><code class=""c# plain"">, </code><code class=""c# string"">""""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// плхй день</code></div></div></td></tr></tbody></table></div></div> <p>Во втором случае применения функции Replace строка из одного символа ""о"" заменяется на пустую строку, то есть фактически удаляется из текста.  Подобным способом легко удалять какой-то определенный текст в строках.</p> <h3>Смена регистра</h3> <p>Для приведения строки к верхнему и нижнему регистру используются соответственно функции <span class=""bb"">ToUpper()</span> и  <span class=""b"">ToLower()</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_443009""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">hello = </code><code class=""c# string"">""Hello world!""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(hello.ToLower()); </code><code class=""c# comments"">// hello world!</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(hello.ToUpper()); </code><code class=""c# comments"">// HELLO WORLD!</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Форматирование и интерполяция строк</h2>   <h3>Форматирование строк</h3> <p>При выводе строк в консоли с помощью метода Console.WriteLine для встраивания значений в строку мы можем применять форматирование  вместо конкатенации:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_575377""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 23;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Имя: {0}  Возраст: {1}""</code><code class=""c# plain"">, name, age);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// консольный вывод</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// Имя: Tom  Возраст: 23</code></div></div></td></tr></tbody></table></div></div> <p>В строке ""Имя: {0}  Возраст: {1}"" на место <code>{0}</code> и <code>{1}</code> затем будут вставляться в порядке следования значения переменныйх <code>name</code> и <code>age</code></p> <p>То же самое форматирование в строке мы можем сделать не только в методе Console.WriteLine, но и в любом месте программы с помощью метода <span class=""b"">string.Format</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_572153""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 23;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">output = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""Имя: {0}  Возраст: {1}""</code><code class=""c# plain"">, name, age);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(output);</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>Format</code> принимает строку с плейсхолдерами типа {0}, {1} и т.д., а также набор аргументов, которые вставляются на место  данных плейсхолдеров. В итоге генерируется новая строка.</p> <h3>Спецификаторы форматирования</h3> <p>В методе Format могут использоваться различные спецификаторы и описатели, которые позволяют настроить вывод данных. Рассмотрим основные описатели.  Все используемые форматы: </p><table class=""tab""> <tbody><tr><td><p><span class=""b"">C / c</span></p></td><td><p>Задает формат денежной единицы, указывает количество десятичных разрядов после запятой</p></td></tr> <tr><td><p><span class=""b"">D / d</span></p></td><td><p>Целочисленный формат, указывает минимальное количество цифр</p></td></tr> <tr><td><p><span class=""b"">E / e</span></p></td><td><p>Экспоненциальное представление числа, указывает количество десятичных разрядов после запятой</p></td></tr> <tr><td><p><span class=""b"">F / f</span></p></td><td><p>Формат дробных чисел с фиксированной точкой, указывает количество десятичных разрядов после запятой</p></td></tr> <tr><td><p><span class=""b"">G / g</span></p></td><td><p>Задает более короткий из двух форматов: F или E</p></td></tr> <tr><td><p><span class=""b"">N / n</span></p></td><td><p>Также задает формат дробных чисел с фиксированной точкой, определяет количество разрядов после запятой</p></td></tr> <tr><td><p><span class=""b"">P / p</span></p></td><td><p>Задает отображения знака процентов рядом с число, указывает количество десятичных разрядов после запятой</p></td></tr> <tr><td><p><span class=""b"">X / x</span></p></td><td><p>Шестнадцатеричный формат числа</p></td></tr> </tbody></table> <h4>Форматирование валюты</h4> <p>Для форматирования валюты используется описатель ""C"":</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_225783""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">number = 23.7;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:C0}""</code><code class=""c# plain"">, number);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// 24 р.</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result2 = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:C2}""</code><code class=""c# plain"">, number);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(result2); </code><code class=""c# comments"">// 23,70 р.</code></div></div></td></tr></tbody></table></div></div> <p>Число после описателя указывает, сколько чисел будет использоваться после разделителя между целой и дробной частью. При выводе также добавляется  обозначение денежного знака для текущей культуры компьютера. В зависимости от локализации текущей операционной системы результат может различаться.  Также обратите внимание на округление в первом примере.</p> <h4>Форматирование целых чисел</h4> <p>Для форматирования целочисленных значение применяется описатель ""d"":</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_767494""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 23;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:d}""</code><code class=""c# plain"">, number);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// 23</code></div><div class=""line number4 index3 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result2 = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:d4}""</code><code class=""c# plain"">, number);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(result2); </code><code class=""c# comments"">// 0023</code></div></div></td></tr></tbody></table></div></div> <p>Число после описателя указывает, сколько цифр будет в числовом значении. Если в исходном числе цифр меньше, то к нему добавляются нули.</p> <h4>Форматирование дробных чисел</h4> <p>Для форматирования дробны чисел используется описатель F, число после которого указывает, сколько знаков будет использоваться после разделителя между целой  и дробной частью. Если исходное число - целое, то к нему добавляются разделитель и нули.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_483893""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">number = 23;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:f}""</code><code class=""c# plain"">, number);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// 23,00</code></div><div class=""line number4 index3 alt1""> </div><div class=""line number5 index4 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">number2 = 45.08;</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result2 = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:f4}""</code><code class=""c# plain"">, number2);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(result2); </code><code class=""c# comments"">// 45,0800</code></div><div class=""line number8 index7 alt1""> </div><div class=""line number9 index8 alt2""><code class=""c# keyword"">double</code> <code class=""c# plain"">number3 = 25.07;</code></div><div class=""line number10 index9 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result3 = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:f1}""</code><code class=""c# plain"">, number3);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine(result3); </code><code class=""c# comments"">// 25,1</code></div></div></td></tr></tbody></table></div></div> <h4>Формат процентов</h4> <p>Описатель ""P"" задает отображение процентов. Используемый с ним числовой спецификатор указывает, сколько знаков будет после запятой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_134676""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">decimal</code> <code class=""c# plain"">number = 0.15345m;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""{0:P1}""</code><code class=""c# plain"">, number);</code><code class=""c# comments"">// 15,3%</code></div></div></td></tr></tbody></table></div></div> <h4>Настраиваемые форматы</h4> <p>Используя знак #, можно настроить формат вывода. Например, нам надо вывести некоторое число в формате телефона +х (ххх)ххх-хх-хх:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_197369""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code> <code class=""c# plain"">number = 19876543210;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = </code><code class=""c# keyword"">string</code><code class=""c# plain"">.Format(</code><code class=""c# string"">""{0:+# (###) ###-##-##}""</code><code class=""c# plain"">, number);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// +1 (987) 654-32-10</code></div></div></td></tr></tbody></table></div></div> <h3>Метод ToString</h3> <p>Метод <code>ToString()</code> не только получает строковое описание объекта, но и может осуществлять форматирование. Он поддерживает те же описатели, что  используются в методе Format:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_374949""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code> <code class=""c# plain"">number = 19876543210;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(number.ToString(</code><code class=""c# string"">""+# (###) ###-##-##""</code><code class=""c# plain"">));</code><code class=""c# comments"">// +1 (987) 654-32-10</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# keyword"">double</code> <code class=""c# plain"">money = 24.8;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(money.ToString(</code><code class=""c# string"">""C2""</code><code class=""c# plain"">)); </code><code class=""c# comments"">// 24,80 р.</code></div></div></td></tr></tbody></table></div></div> <h3>Интерполяция строк</h3> <p>Интерполяция строк призвана упростить форматирование строк. Так, перепишем пример с выводом значений переменных в строке:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_241065""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 23;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name}  Возраст: {age}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# comments"">// консольный вывод</code></div><div class=""line number6 index5 alt1""><code class=""c# comments"">// Имя: Tom  Возраст: 23</code></div></div></td></tr></tbody></table></div></div> <p>Знак доллара перед строкой указывает, что будет осуществляться интерполяция строк. Внутри строки опять же используются плейсхолдеры <code>{...}</code>,  только внутри фигурных скобок уже можно напрямую писать те выражения, которые мы хотим вывести.</p> <p>Интерполяция по сути представляет более лаконичное форматирование. При этом внутри фигурных скобок мы можем указывать не только свойства, но и различные выражения языка C#:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_195863""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 7;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = $</code><code class=""c# string"">""{x} + {y} = {x + y}""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// 8 + 7 = 15</code></div></div></td></tr></tbody></table></div></div> <p>Также внутри фигурных скобок можно выполнять более сложные выражения, например, вызывать методы:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_387682""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">int</code> <code class=""c# plain"">x = 8;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">y = 7;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = $</code><code class=""c# string"">""{x} * {y} = {Multiply(x, y)}""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(result); </code><code class=""c# comments"">// 8 * 7 = 56</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">Multiply(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">a, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">b) =&gt; a * b;</code></div></div></td></tr></tbody></table></div></div> <p>Уже внутри строки можно применять форматирование. В этом случае мы можем применять все те же описатели, что и в методе <code>Format</code>. Например, выведем номер телефона в формате +x xxx-xxx-xx-xx:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_780397""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">long</code> <code class=""c# plain"">number = 19876543210;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""{number:+# ### ### ## ##}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// +1 987 654 32 10</code></div></div></td></tr></tbody></table></div></div> <p>Добавляем пространство до и после форматируемого вывода:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_827516""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">name = </code><code class=""c# string"">""Tom""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">int</code> <code class=""c# plain"">age = 23;</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name, -5} Возраст: {age}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// пробелы после</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Имя: {name, 5} Возраст: {age}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// пробелы до</code></div></div></td></tr></tbody></table></div></div> <p>Вывод:</p> <div class=""console""> <pre class=""consoletext"">Имя: Том      Возраст: 23 Имя:      Том Возраст: 23 </pre> </div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Класс StringBuilder</h2>   <p>Хотя класс System.String предоставляет нам широкую функциональность по работе со строками, все таки он имеет свои недостатки. Прежде всего,  объект String представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод класса String, система создает новый объект в памяти с  выделением ему достаточного места. Удаление первого символа - не самая затратная операция. Однако когда подобных операций множество, а объем  текста, для которого надо выполнить данные операции, также не самый маленький, то издержки при потере производительности становятся более  существенными.</p> <p>Чтобы выйти из этой ситуации во фреймворк .NET был добавлен новый класс <span class=""b"">StringBuilder</span>, который находится в пространстве имен  <code>System.Text</code>. Этот класс представляет динамическую строку.</p> <h3>Создание StringBuilder</h3> <p>Для создания объекта StringBuilder можно использовать ряд его конструкторов. Прежде всего можно создать пустой StringBuilder:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_504733""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Text;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">StringBuilder sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder();</code></div></div></td></tr></tbody></table></div></div> <p>Можно сразу инициализировать объект определенной строкой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_510525""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">StringBuilder sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Привет мир""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>С помощью метода <code>ToString()</code> мы можем получить строку, которая хранится в StringBuilder:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_178137""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(sb.ToString());    </code><code class=""c# comments"">//  Hello World</code></div></div></td></tr></tbody></table></div></div> <p>Либо можно просто передать объект StringBuilder:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_512310""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Hello World""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(sb);    </code><code class=""c# comments"">//  Hello World</code></div></div></td></tr></tbody></table></div></div> <h3>Длина и емкость StringBuilder</h3> <p>Для хранения длины строки в классе StringBuilder определенно свойство <span class=""b"">Length</span>. Однако есть и вторая величина -  емкость выделенной памяти. Это значение хранится в свойстве <code>Capacity</code>. Емкость - это выделенная память под объект. Установка емкости  позволяет уменьшить выделения памяти и тем самым повысить производительность.</p> <p>Если строка, которая передается в конструктор StringBuilder, имеет длину 16 символов или меньше, то начальная ёмкость в StringBuilder равна 16.  Если начальная строка больше 16 символов, то в качестве начальной емкости StringBuilder будет использовать длину строки.</p> <p>Например, посмотрим, что содержат данные свойства:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_62390""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Text;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">StringBuilder sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Привет мир""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Длина: {sb.Length}""</code><code class=""c# plain"">);       </code><code class=""c# comments"">// Длина: 10</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Емкость: {sb.Capacity}""</code><code class=""c# plain"">);   </code><code class=""c# comments"">// Емкость: 16</code></div></div></td></tr></tbody></table></div></div> <p>Хотя в данном случае длина равна 10 символов, но реально емкость будет составлять  по умолчанию 16 символов. То есть мы видим, что при создании строки StringBuilder выделяет памяти больше, чем необходимо этой строке.  При увеличении строки в StringBuilder, когда количество символов превосходит начальную емкость, то емкость увеличивается в два и более раз.</p> <p>Если у нас заранее известен максимальный размер объекта, то мы можем таким образом сразу задать емкость с помощью одного из конструкторов и  тем самым избежать последующих издержек при дополнительном выделении памяти.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_539795""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(32);</code></div></div></td></tr></tbody></table></div></div> <p>StringBuilder также позволяет сразу задать строку и емкость:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_924219""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Привет мир""</code><code class=""c# plain"">, 32);</code></div></div></td></tr></tbody></table></div></div> <h3>Операции со строками в StringBuilder</h3> <p>Для операций над строками класс StringBuilder определяет ряд методов:</p> <ul> <li><p><span class=""b"">Append</span>: добавляет подстроку в объект StringBuilder</p></li> <li><p><span class=""b"">Insert</span>: вставляет подстроку в объект StringBuilder, начиная с определенного индекса</p></li> <li><p><span class=""b"">Remove</span>: удаляет определенное количество символов, начиная с определенного индекса</p></li> <li><p><span class=""b"">Replace</span>: заменяет все вхождения определенного символа или подстроки на другой символ или подстроку</p></li> <li><p><span class=""b"">AppendFormat</span>: добавляет подстроку в конец объекта StringBuilder</p></li> </ul> <p>Теперь посмотрим на примере метода <span class=""b"">Append()</span> использование и преимущества класса StringBuilder:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_430922""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Text;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">var sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Название: ""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(sb);   </code><code class=""c# comments"">// Название: </code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Длина: {sb.Length}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 10</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Емкость: {sb.Capacity}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 16</code></div><div class=""line number7 index6 alt2""> </div><div class=""line number8 index7 alt1""><code class=""c# plain"">sb.Append(</code><code class=""c# string"">"" Руководство""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine(sb);   </code><code class=""c# comments"">// Название: Руководство</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Длина: {sb.Length}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 22</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Емкость: {sb.Capacity}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 32</code></div><div class=""line number12 index11 alt1""> </div><div class=""line number13 index12 alt2""><code class=""c# plain"">sb.Append(</code><code class=""c# string"">"" по C#""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine(sb);   </code><code class=""c# comments"">// Название: Руководство по C#</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Длина: {sb.Length}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 28</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Емкость: {sb.Capacity}""</code><code class=""c# plain"">); </code><code class=""c# comments"">// 32</code></div></div></td></tr></tbody></table></div></div> <p>При создании объекта StringBuilder выделяется память по умолчанию для 16 символов, так как длина начальной строки меньше 16.</p> <p>Дальше применяется метод <code>Append</code> - этот метод добавляет к строке подстроку. Так как при объединении строк их общая длина - 22 символа -  превышает начальную емкость в 16 символов, то начальная емкость удваивается - до 32 символов.</p> <p>Если бы итоговая длина строки была бы больше 32 символов, то емкость расширялась бы до размера длины строки.</p> <p>Далее опять применяется метод Append, однако финальная длина уже будет 28 символов, что меньше 32 символов, и дополнительная память не будет выделяться.</p> <p>Используем остальные методы StringBuilder:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_34415""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">var sb = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">StringBuilder(</code><code class=""c# string"">""Привет мир""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">sb.Append(</code><code class=""c# string"">""!""</code><code class=""c# plain"">);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">sb.Insert(7, </code><code class=""c# string"">""компьютерный ""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(sb);  </code><code class=""c# comments"">// Привет компьютерный мир!</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# comments"">// заменяем слово</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">sb.Replace(</code><code class=""c# string"">""мир""</code><code class=""c# plain"">, </code><code class=""c# string"">""world""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine(sb);  </code><code class=""c# comments"">// Привет компьютерный world!</code></div><div class=""line number9 index8 alt2""> </div><div class=""line number10 index9 alt1""><code class=""c# comments"">// удаляем 13 символов, начиная с 7-го</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">sb.Remove(7, 13);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine(sb);  </code><code class=""c# comments"">// Привет world!</code></div><div class=""line number13 index12 alt2""> </div><div class=""line number14 index13 alt1""><code class=""c# comments"">// получаем строку из объекта StringBuilder</code></div><div class=""line number15 index14 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = sb.ToString();</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine(text);    </code><code class=""c# comments"">// Привет world!</code></div></div></td></tr></tbody></table></div></div> <p>Когда надо использовать класс String, а когда StringBuilder?</p> <p>Microsoft рекомендует использовать класс String в следующих случаях:</p> <ul> <li><p>При небольшом количестве операций и изменений над строками</p></li> <li><p>При выполнении фиксированного количества операций объединения. В этом случае компилятор может объединить все операции объединения в одну</p></li> <li><p>Когда надо выполнять масштабные операции поиска при построении строки, например IndexOf или StartsWith. Класс StringBuilder не имеет подобных методов.</p></li> </ul> <p>Класс StringBuilder рекомендуется использовать в следующих случаях:</p> <ul> <li><p>При неизвестном количестве операций и изменений над строками во время выполнения программы</p></li> <li><p>Когда предполагается, что приложению придется сделать множество подобных операций</p></li> </ul>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Регулярные выражения</h2>   <p>Классы StringBuilder и String предоставляют достаточную функциональность для работы со строками. Однако .NET предлагает еще один мощный инструмент -  регулярные выражения. Регулярные выражения представляют эффективный и гибкий метод по обработке больших текстов, позволяя в то же время существенно  уменьшить объемы кода по сравнению с использованием стандартных операций со строками.</p> <p>Основная функциональность регулярных выражений в .NET сосредоточена в пространстве имен <span class=""b"">System.Text.RegularExpressions</span>. А  центральным классом при работе с регулярными выражениями является класс <b>Regex</b>. Например, у нас есть некоторый текст и нам надо найти  в нем все словоформы какого-нибудь слова. С классом Regex это сделать очень просто:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_24619""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Text.RegularExpressions;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s = </code><code class=""c# string"">""Бык тупогуб, тупогубенький бычок, у быка губа бела была тупа""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""туп(\w*)""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">MatchCollection matches = regex.Matches(s);</code></div><div class=""line number6 index5 alt1""><code class=""c# keyword"">if</code> <code class=""c# plain"">(matches.Count &gt; 0)</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">{</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">foreach</code> <code class=""c# plain"">(Match match </code><code class=""c# keyword"">in</code> <code class=""c# plain"">matches)</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(match.Value);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">}</code></div><div class=""line number11 index10 alt2""><code class=""c# keyword"">else</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">{</code></div><div class=""line number13 index12 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Совпадений не найдено""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Здесь мы находим в искомой строке все словоформы слова ""туп"". В конструктор объекта Regex передается регулярное выражение для поиска.  Далее мы разберем некоторые элементы синтаксиса регулярных выражений, а пока достаточно знать, что выражение <code>туп(\w*)</code> обозначает, найти все слова,  которые имеют корень ""туп"" и после которого может стоять различное количество символов. Выражение <code>\w</code> означает алфавитно-цифровой символ,  а звездочка после выражения указывает на неопределенное их количество - их может быть один, два, три или вообще не быть.</p> <p>Метод <code>Matches</code> класса Regex принимает строку, к которой надо применить регулярные выражения, и возвращает коллекцию найденных совпадений.</p> <p>Каждый элемент такой коллекции представляет объект <span class=""b"">Match</span>. Его свойство <code>Value</code> возвращает найденное  совпадение.</p> <p>И в данном случае мы получим следующий консольный вывод</p> <div class=""console""> <pre class=""consoletext"">тупогуб тупогубенький тупа </pre> </div> <h3>Параметр RegexOptions</h3> <p>Класс Regex имеет ряд конструкторов, позволяющих выполнить начальную инициализацию объекта. Две версии конструкторов в качестве одного из  параметров принимают перечисление <code>RegexOptions</code>.  Некоторые из значений, принимаемых данным перечислением:</p> <ul> <li><p><span class=""b"">Compiled</span>: при установке этого значения регулярное выражение компилируется в сборку, что обеспечивает  более быстрое выполнение</p></li> <li><p><span class=""b"">CultureInvariant</span>: при установке этого значения будут игнорироваться региональные различия</p></li> <li><p><span class=""b"">IgnoreCase</span>: при установке этого значения будет игнорироваться регистр</p></li> <li><p><span class=""b"">IgnorePatternWhitespace</span>: удаляет из строки пробелы и разрешает комментарии, начинающиеся со знака #</p></li> <li><p><span class=""b"">Multiline</span>: указывает, что текст надо рассматривать в многострочном режиме. При таком режиме символы ""^"" и  ""$"" совпадают, соответственно, с началом и концом любой строки, а не с началом и концом всего текста</p></li> <li><p><span class=""b"">RightToLeft</span>: приписывает читать строку справа налево</p></li> <li><p><span class=""b"">Singleline</span>: при данном режиме символ ""."" соответствует любому символу, в том числе последовательности ""\n"",  которая осуществляет переход на следующую строку</p></li> </ul> <p>Например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_836601""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""туп(\w*)""</code><code class=""c# plain"">, RegexOptions.IgnoreCase);</code></div></div></td></tr></tbody></table></div></div> <p>При необходимости можно установить несколько параметров:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_732546""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""туп(\w*)""</code><code class=""c# plain"">, RegexOptions.Compiled | RegexOptions.IgnoreCase);</code></div></div></td></tr></tbody></table></div></div> <h3>Синтаксис регулярных выражений</h3> <p>Рассмотрим вкратце некоторые элементы синтаксиса регулярных выражений:</p> <ul> <li><p><span class=""b"">^</span>: соответствие должно начинаться в начале строки (например, выражение <code>@""^пр\w*""</code>  соответствует слову ""привет"" в строке ""привет мир"")</p></li> <li><p><span class=""b"">$</span>: конец строки (например, выражение <code>@""\w*ир$""</code> соответствует слову ""мир"" в строке ""привет мир"", так как часть ""ир"" находится в самом конце)</p></li> <li><p><span class=""b"">.</span>: знак точки определяет любой одиночный символ (например, выражение <code>""м.р""</code> соответствует  слову ""мир"" или ""мор"")</p></li> <li><p><span class=""b"">*</span>: предыдущий символ повторяется 0 и более раз</p></li> <li><p><span class=""b"">+</span>: предыдущий символ повторяется 1 и более раз</p></li> <li><p><span class=""b"">?</span>: предыдущий символ повторяется 0 или 1 раз</p></li> <li><p><span class=""b"">\s</span>: соответствует любому пробельному символу</p></li> <li><p><span class=""b"">\S</span>: соответствует любому символу, не являющемуся пробелом</p></li> <li><p><span class=""b"">\w</span>: соответствует любому алфавитно-цифровому символу</p></li> <li><p><span class=""b"">\W</span>: соответствует любому не алфавитно-цифровому символу</p></li> <li><p><span class=""b"">\d</span>: соответствует любой десятичной цифре</p></li> <li><p><span class=""b"">\D </span>: соответствует любому символу, не являющемуся десятичной цифрой</p></li> </ul> <p>Это только небольшая часть элементов. Более подробное описание синтаксиса регулярных выражений можно найти на msdn в статье </p> <p>Теперь посмотрим на некоторые примеры использования. Возьмем первый пример с скороговоркой ""Бык тупогуб, тупогубенький бычок, у быка губа бела была тупа"" и  найдем в ней все слова, где встречается корень ""губ"":</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_73994""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s = </code><code class=""c# string"">""Бык тупогуб, тупогубенький бычок, у быка губа бела была тупа""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""\w*губ\w*""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Так как выражение <code>\w*</code> соответствует любой последовательности алфавитно-цифровых символов любой длины, то данное выражение  найдет все слова, содержащие корень ""губ"".</p> <p>Второй простенький пример - нахождение телефонного номера в формате 111-111-1111:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_308410""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s = </code><code class=""c# string"">""456-435-2318""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""\d{3}-\d{3}-\d{4}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Если мы точно знаем, сколько определенных символов должно быть, то мы можем явным образом указать их количество в фигурных скобках:  <code>\d{3}</code> - то есть в данном случае три цифры.</p> <p>Мы можем не только задать поиск по определенным типам символов - пробелы, цифры, но и задать конкретные символы, которые должны входить в  регулярное выражение. Например, перепишем пример с номером телефона и явно укажем, какие символы там должны быть:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_410369""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">s = </code><code class=""c# string"">""456-435-2318""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">""[0-9]{3}-[0-9]{3}-[0-9]{4}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>В квадратных скобках задается диапазон символов, которые должны в данном месте встречаться. В итоге данный и предыдущий шаблоны телефонного номера  будут эквивалентны.</p> <p>Также можно задать диапазон для алфавитных символов: <code>Regex regex = new Regex(""[a-v]{5}"");</code> - данное выражение будет  соответствовать любому сочетанию пяти символов, в котором все символы находятся в диапазоне от a до v.</p> <p>Можно также указать отдельные значения: <code>Regex regex = new Regex(@""[2]*-[0-9]{3}-\d{4}"");</code>. Это выражение будет  соответствовать, например, такому номеру телефона ""222-222-2222"" (так как первые числа двойки)</p> <p>С помощью операции | можно задать альтернативные символы, например:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_261553""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""(2|3){3}-[0-9]{3}-\d{4}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>То есть первые три цифры могут содержать только двойки или тройки. Такой шаблон будет соответствовать, например, строкам ""222-222-2222"" и  ""323-435-2318"". А вот строка ""235-435-2318"" уже не подпадает под шаблон, так как одной из трех первых цифр является цифра 5.</p> <p>Итак, у нас такие символы, как <code>*, +</code> и ряд других используются в качестве специальных символов. И возникает вопрос, а что делать,  если нам надо найти, строки, где содержится точка, звездочка или какой-то другой специальный символ? В этом случае нам надо просто экранировать  эти символы слешем:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_354456""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(</code><code class=""c# string"">@""(2|3){3}\.[0-9]{3}\.\d{4}""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# comments"">// этому выражению будет соответствовать строка ""222.222.2222""</code></div></div></td></tr></tbody></table></div></div> <h3>Проверка на соответствие строки формату</h3> <p>Нередко возникает задача проверить корректность данных, введенных пользователем. Это может быть проверка электронного адреса, номера телефона,  Класс Regex предоставляет статический метод <span class=""b"">IsMatch</span>, который позволяет проверить входную строку с шаблоном на соответствие:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_652937""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div><div class=""line number19 index18 alt2"">19</div><div class=""line number20 index19 alt1"">20</div><div class=""line number21 index20 alt2"">21</div><div class=""line number22 index21 alt1"">22</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Text.RegularExpressions;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">pattern = </code><code class=""c# string"">@""^(?("""")(""""[^""""]+?""""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`\{\}\|~\w])*)(?&lt;=[0-9a-z])@))""</code> <code class=""c# plain"">+</code></div><div class=""line number4 index3 alt1""><code class=""c# spaces"">                </code><code class=""c# string"">@""(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$""</code><code class=""c# plain"">;</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">var data = </code><code class=""c# keyword"">new</code> <code class=""c# keyword"">string</code><code class=""c# plain"">[]</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">{</code></div><div class=""line number7 index6 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""tom@gmail.com""</code><code class=""c# plain"">,</code></div><div class=""line number8 index7 alt1""><code class=""c# spaces"">    </code><code class=""c# string"">""+12345678999""</code><code class=""c# plain"">,</code></div><div class=""line number9 index8 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""bob@yahoo.com""</code><code class=""c# plain"">,</code></div><div class=""line number10 index9 alt1""><code class=""c# spaces"">    </code><code class=""c# string"">""+13435465566""</code><code class=""c# plain"">,</code></div><div class=""line number11 index10 alt2""><code class=""c# spaces"">    </code><code class=""c# string"">""sam@yandex.ru""</code><code class=""c# plain"">,</code></div><div class=""line number12 index11 alt1""><code class=""c# spaces"">    </code><code class=""c# string"">""+43743989393""</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">};</code></div><div class=""line number14 index13 alt1""> </div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine(</code><code class=""c# string"">""Email List""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# keyword"">for</code><code class=""c# plain"">(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">i = 0; i &lt; data.Length; i++)</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">{</code></div><div class=""line number18 index17 alt1""><code class=""c# spaces"">    </code><code class=""c# keyword"">if</code> <code class=""c# plain"">(Regex.IsMatch(data[i], pattern, RegexOptions.IgnoreCase))</code></div><div class=""line number19 index18 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">{</code></div><div class=""line number20 index19 alt1""><code class=""c# spaces"">        </code><code class=""c# plain"">Console.WriteLine(data[i]);</code></div><div class=""line number21 index20 alt2""><code class=""c# spaces"">    </code><code class=""c# plain"">}</code></div><div class=""line number22 index21 alt1""><code class=""c# plain"">}</code></div></div></td></tr></tbody></table></div></div> <p>Переменная pattern задает регулярное выражение для проверки адреса электронной почты. Данное выражение предлагает нам Microsoft на страницах msdn.</p> <p>Далее в цикле мы проходим по массиву строк и определяем, какие строки соответствуют этому шаблону, то есть представляют валидный адрес электронной почты.  Для проверки соответствия строки шаблону используется метод IsMatch: <code>Regex.IsMatch(data[i], pattern, RegexOptions.IgnoreCase)</code>.  Последний параметр указывает, что регистр можно игнорировать. И если строка соответствует шаблону, то метод возвращает  <code>true</code>.</p> <h3>Замена и метод Replace</h3> <p>Класс Regex имеет метод Replace, который позволяет заменить строку, соответствующую регулярному выражению, другой строкой:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_449924""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">text = </code><code class=""c# string"">""Мама  мыла  раму. ""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">pattern = </code><code class=""c# string"">@""\s+""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">target = </code><code class=""c# string"">"" ""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(pattern);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = regex.Replace(text, target);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(result);</code></div></div></td></tr></tbody></table></div></div> <p>Данная версия метода Replace принимает два параметра: строку с текстом, где надо выполнить замену, и сама строка замены. Так как в качестве шаблона  выбрано выражение <code>""\s+</code> (то есть наличие одного и более пробелов), метод Replace проходит по всему тексту и заменяет несколько подряд идущих пробелов  ординарными.</p> <p>Другой пример - на вход подается номер телефона в произвольном формате, и мы хотим оставить в нем только цифры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_486348""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">phoneNumber = </code><code class=""c# string"">""+1(876)-234-12-98""</code><code class=""c# plain"">;</code></div><div class=""line number2 index1 alt1""><code class=""c# keyword"">string</code> <code class=""c# plain"">pattern = </code><code class=""c# string"">@""\D""</code><code class=""c# plain"">;</code></div><div class=""line number3 index2 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">target = </code><code class=""c# string"">""""</code><code class=""c# plain"">;</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Regex regex = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">Regex(pattern);</code></div><div class=""line number5 index4 alt2""><code class=""c# keyword"">string</code> <code class=""c# plain"">result = regex.Replace(phoneNumber, target);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(result);  </code><code class=""c# comments"">// 18762341298</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае шаблон ""\D"" представляет любой символ, который не является цифрой. Любой такой символ заменяется на пустую строку """", то есть в итоге из строки  ""+1(876)-234-12-98"" мы получим строку ""18762341298"".</p>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: Работа со строками\r\n //1. Создайте строку с использованием конструктора String, который принимает массив символов и указывает на начало и длину подстроки.",
                "//Задание 1: Операции со строками\r\n //1. Создайте несколько строк и объедините их с помощью оператора + и метода string.Concat(). Выведите результат на экран.",
                "//Задание 1: Форматирование и интерполяция строк\r\n //1. Напишите программу, которая использует метод string.Format для форматирования строки, выводя имя и возраст человека.",
                "//Задание 1: Класс StringBuilder\r\n //1. Создайте объект StringBuilder с начальной строкой \"Привет мир\" и выведите его длину и емкость на экран.\r\n //2. Добавьте в объект StringBuilder строку \"C#\" и выведите обновленную строку, длину и емкость.",
                "//Задание 1: Регулярные выражения в .NET\r\n//1. Напишите регулярное выражение для поиска телефонного номера в формате 111-111-1111. Объясните, что делает каждое выражение внутри регулярного шаблона.\r\n",
            };
            if (form1Instance != null && comboBox11.SelectedIndex >= 0 && comboBox11.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox11.SelectedIndex;
                selectCombobox = 11;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }

        private async void comboBox12_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] htmlContents = new string[]
            {
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h1>Работа с датами и временем</h1><h2>Структура DateTime</h2>   <p>Для работы с датами и временем в .NET предназначена структура <span class=""b"">DateTime</span>. Она представляет дату и время от 00:00:00 1 января 0001 года  до 23:59:59 31 декабря 9999 года.</p> <p>Для создания нового объекта DateTime также можно использовать конструктор. Пустой конструктор создает начальную дату:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_777071""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime dateTime = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(dateTime); </code><code class=""c# comments"">// 01.01.0001 0:00:00</code></div></div></td></tr></tbody></table></div></div> <p>То есть мы получим минимально возможное значение, которое также можно получить следующим образом:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_752235""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(DateTime.MinValue);</code></div></div></td></tr></tbody></table></div></div> <p>Чтобы задать конкретную дату, нужно использовать один из конструкторов, принимающих параметры:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_850566""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime date1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20); </code><code class=""c# comments"">// год - месяц - день</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(date1); </code><code class=""c# comments"">// 20.07.2015 0:00:00</code></div></div></td></tr></tbody></table></div></div> <p>Установка времени:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_60729""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime date1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20, 18, 30, 25); </code><code class=""c# comments"">// год - месяц - день - час - минута - секунда</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(date1); </code><code class=""c# comments"">// 20.07.2015 18:30:25</code></div></div></td></tr></tbody></table></div></div> <p>Если необходимо получить текущую время и дату, то можно использовать ряд свойств DateTime:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_103745""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">Console.WriteLine(DateTime.Now);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(DateTime.UtcNow);</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(DateTime.Today);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">20.07.2015 11:43:33 20.07.2015 8:43:33 20.07.2015 0:00:00 </pre> </div> <p>Свойство <code>DateTime.Now</code> берет текущую дату и время компьютера, <code>DateTime.UtcNow</code> - дата и время относительно времени по  Гринвичу (GMT) и <code>DateTime.Today</code> - только текущая дата.</p> <p>При работе с датами надо учитывать, что по умолчанию для представления дат применяется григорианский календарь. Но что будет, если мы захотим получить день недели для  5 октября 1582 года:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_993761""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime someDate = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(1582, 10, 5);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(someDate.DayOfWeek);</code></div></div></td></tr></tbody></table></div></div> <p>Консоль высветит значение Tuesday, то есть вторник. Однако, как может быть известно из истории, впервые переход с юлианского календаря на григорианский  состоялся в октябре 1582 года. Тогда после даты 4 октября (четверг) (еще по юлианскому календарю) сразу перешли к 15 октября (пятница)(уже по григорианскому календарю).  Таким образом, фактически выкинули 10 дней. То есть после 4 октября шло 15 октября.</p> <p>В большинстве случаев данный факт вряд ли как-то повлияет на вычисления, однако при работе с очень давними датами данный аспект следует учитывать.</p> <h3>Операции с DateTime</h3> <p>Основные операции со структурой DateTime связаны со сложением или вычитанием дат. Например, надо к некоторой дате прибавить или, наоборот,  отнять несколько дней.</p> <p>Для добавления дат используется ряд методов:</p> <ul> <li><p><code>Add(TimeSpan value)</code>: добавляет к дате значение TimeSpan</p><p></p></li> <li><p><code>AddDays(double value)</code>: добавляет к текущей дате несколько дней</p><p></p></li> <li><p><code>AddHours(double value)</code>: добавляет к текущей дате несколько часов</p><p></p></li> <li><p><code>AddMinutes(double value)</code>: добавляет к текущей дате несколько минут</p><p></p></li> <li><p><code>AddMonths(int value)</code>: добавляет к текущей дате несколько месяцев</p><p></p></li> <li><p><code>AddYears(int value)</code>: добавляет к текущей дате несколько лет</p><p></p></li> </ul> <p>Например, добавим к некоторой дате 3 часа:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_260080""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime date1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20, 18, 30, 25); </code><code class=""c# comments"">// 20.07.2015 18:30:25</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(date1.AddHours(3)); </code><code class=""c# comments"">// 20.07.2015 21:30:25</code></div></div></td></tr></tbody></table></div></div> <p>Для вычитания дат используется метод <span class=""b"">Subtract(DateTime date)</span>:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_159840""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime date1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20, 18, 30, 25); </code><code class=""c# comments"">// 20.07.2015 18:30:25</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">DateTime date2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20, 15, 30, 25); </code><code class=""c# comments"">// 20.07.2015 15:30:25</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(date1.Subtract(date2)); </code><code class=""c# comments"">// 03:00:00</code></div></div></td></tr></tbody></table></div></div> <p>Здесь даты различаются на три часа, поэтому результатом будет дата ""03:00:00"".</p> <p>Метод Substract не имеет возможностей для отдельного вычитания дней, часов и так далее. Но это и не надо, так как мы можем передавать в метод  AddDays() и другие методы добавления отрицательные значения:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_367568""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# comments"">// вычтем три часа</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">DateTime date1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20, 18, 30, 25);  </code><code class=""c# comments"">// 20.07.2015 18:30:25</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(date1.AddHours(-3)); </code><code class=""c# comments"">// 20.07.2015 15:30:25</code></div></div></td></tr></tbody></table></div></div> <p>Кроме операций сложения и вычитания еще есть ряд методов форматирования дат:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_898978""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime date1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateTime(2015, 7, 20, 18, 30, 25);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(date1.ToLocalTime()); </code><code class=""c# comments"">// 20.07.2015 21:30:25</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(date1.ToUniversalTime()); </code><code class=""c# comments"">// 20.07.2015 15:30:25</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(date1.ToLongDateString()); </code><code class=""c# comments"">// 20 июля 2015 г.</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(date1.ToShortDateString()); </code><code class=""c# comments"">// 20.07.2015</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(date1.ToLongTimeString()); </code><code class=""c# comments"">// 18:30:25</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(date1.ToShortTimeString()); </code><code class=""c# comments"">// 18:30</code></div></div></td></tr></tbody></table></div></div> <p>Метод <code>ToLocalTime()</code> преобразует время UTC в локальное время, добавляя смещение относительно времени по Гринвичу.  Метод <code>ToUniversalTime()</code>, наоборот, преобразует локальное время во время UTC, то есть вычитает смещение относительно времени по Гринвичу.  Остальные методы преобразуют дату к определенному формату.</p>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>Форматирование дат и времени</h2>   <p>Для форматирования вывода дат и времени применяется ряд строковых форматов:</p> <table class=""tab""> <tbody><tr class=""tabhead""><td><p>Описатель</p></td><td><p>Описание</p></td></tr> <tr><td><p>D</p></td><td><p>Полный формат даты. Например, 17 июля 2015 г.</p></td></tr> <tr><td><p>d</p></td><td><p>Краткий формат даты. Например, 17.07.2015</p></td></tr> <tr><td><p>F</p></td><td><p>Полный формат даты и времени. Например, 17 июля 2015 г. 17:04:43</p></td></tr> <tr><td><p>f</p></td><td><p>Полный формат даты и краткий формат времени. Например, 17 июля 2015 г. 17:04</p></td></tr> <tr><td><p>G</p></td><td><p>Краткий формат даты и полный формат времени. Например, 17.07.2015 17:04:43</p></td></tr> <tr><td><p>g</p></td><td><p>Краткий формат даты и времени. Например, 17.07.2015 17:04</p></td></tr> <tr><td><p>M, m</p></td><td><p>Формат дней месяца. Например, 17 июля</p></td></tr> <tr><td><p>O, o</p></td><td><p>Формат обратного преобразования даты и времени. Вывод даты и времени в соответствии со стандартом ISO 8601 в формате  ""yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffzzz"". Например, 2015-07-17T17:04:43.4092892+03:00</p></td></tr> <tr><td><p>R, r</p></td><td><p>Время по Гринвичу. Например, Fri, 17 Jul 2015 17:04:43 GMT</p></td></tr> <tr><td><p>s</p></td><td><p>Сортируемый формат даты и времени. Например, 2015-07-17T17:04:43</p></td></tr> <tr><td><p>T</p></td><td><p>Полный формат времени. Например, 17:04:43</p></td></tr> <tr><td><p>t</p></td><td><p>Краткий формат времени. Например, 17:04</p></td></tr> <tr><td><p>U</p></td><td><p>Полный универсальный полный формат даты и времени. Например, 17 июля 2015 г. 17:04:43</p></td></tr> <tr><td><p>u</p></td><td><p>Краткий универсальный полный формат даты и времени. Например, 2015-07-17 17:04:43Z</p></td></tr> <tr><td><p>Y, y</p></td><td><p>Формат года. Например, Июль 2015</p></td></tr> </tbody></table> <p>Выведем текущею дату и время во всех форматах:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_643766""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div><div class=""line number8 index7 alt1"">8</div><div class=""line number9 index8 alt2"">9</div><div class=""line number10 index9 alt1"">10</div><div class=""line number11 index10 alt2"">11</div><div class=""line number12 index11 alt1"">12</div><div class=""line number13 index12 alt2"">13</div><div class=""line number14 index13 alt1"">14</div><div class=""line number15 index14 alt2"">15</div><div class=""line number16 index15 alt1"">16</div><div class=""line number17 index16 alt2"">17</div><div class=""line number18 index17 alt1"">18</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime now = DateTime.Now;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""D: {now.ToString(""</code><code class=""c# plain"">D</code><code class=""c# string"">"")}""</code><code class=""c# plain"">);</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""d: {now.ToString(""</code><code class=""c# plain"">d</code><code class=""c# string"">"")}""</code><code class=""c# plain"">);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""F: {now.ToString(""</code><code class=""c# plain"">F</code><code class=""c# string"">"")}""</code><code class=""c# plain"">);</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""f: {now:f}""</code><code class=""c# plain"">);</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""G: {now:G}""</code><code class=""c# plain"">);</code></div><div class=""line number8 index7 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""g: {now:g}""</code><code class=""c# plain"">);</code></div><div class=""line number9 index8 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""M: {now:M}""</code><code class=""c# plain"">);</code></div><div class=""line number10 index9 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""O: {now:O}""</code><code class=""c# plain"">);</code></div><div class=""line number11 index10 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""o: {now:o}""</code><code class=""c# plain"">);</code></div><div class=""line number12 index11 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""R: {now:R}""</code><code class=""c# plain"">);</code></div><div class=""line number13 index12 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""s: {now:s}""</code><code class=""c# plain"">);</code></div><div class=""line number14 index13 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""T: {now:T}""</code><code class=""c# plain"">);</code></div><div class=""line number15 index14 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""t: {now:t}""</code><code class=""c# plain"">);</code></div><div class=""line number16 index15 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""U: {now:U}""</code><code class=""c# plain"">);</code></div><div class=""line number17 index16 alt2""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""u: {now:u}""</code><code class=""c# plain"">);</code></div><div class=""line number18 index17 alt1""><code class=""c# plain"">Console.WriteLine($</code><code class=""c# string"">""Y: {now:Y}""</code><code class=""c# plain"">);</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">D: 6 января 2022 г. <br>d: 06.01.2022 <br>F: 6 января 2022 г. 14:45:20 <br>f: 6 января 2022 г. 14:45 <br>G: 06.01.2022 14:45:20 <br>g: 06.01.2022 14:45 <br>M: 6 января <br>O: 2022-01-06T14:45:20.3942344+04:00 <br>o: 2022-01-06T14:45:20.3942344+04:00 <br>R: Thu, 06 Jan 2022 14:45:20 GMT <br>s: 2022-01-06T14:45:20 <br>T: 14:45:20 <br>t: 14:45 <br>U: 6 января 2022 г. 10:45:20 <br>u: 2022-01-06 14:45:20Z <br>Y: январь 2022 г.</pre> </div> <h3>Настройка формата времени и даты</h3> <p>Не всегда удобно использование встроенных форматов даты и времени. Иногда бывает необходимо задать сообственную форму отображения объекта DateTime.  В этом случае мы можем составить свой формат из описателей:</p> <table class=""tab""> <tbody><tr class=""tabhead""><td><p>Описатель</p></td><td><p>Описание</p></td></tr> <tr><td><p>d</p></td><td><p>Представляет день месяца от 1 до 31. Одноразрядные числа используются без нуля в начале</p></td></tr> <tr><td><p>dd</p></td><td><p>Представляет день месяца от 1 до 31. К одноразрядным числам в начале добавляется ноль</p></td></tr> <tr><td><p>ddd</p></td><td><p>Сокращенное название дня недели</p></td></tr> <tr><td><p>dddd</p></td><td><p>Полное название дня недели</p></td></tr> <tr><td><p>f / fffffff</p></td><td><p>Представляет миллисекунды. Количество символов f указывает на число разрядов в миллисекундах</p></td></tr> <tr><td><p>g</p></td><td><p>Представляет период или эру (например, ""н. э."")</p></td></tr> <tr><td><p>h</p></td><td><p>Часы в виде от 1 до 12. Часы с одной цифрой не дополняются нулем</p></td></tr> <tr><td><p>hh</p></td><td><p>Часы в виде от 01 до 12. Часы с одной цифрой дополняются нулем</p></td></tr> <tr><td><p>H</p></td><td><p>Часы в виде от 0 до 23. Часы с одной цифрой не дополняются нулем</p></td></tr> <tr><td><p>HH</p></td><td><p>Часы в виде от 0 до 23. Часы с одной цифрой дополняются нулем</p></td></tr> <tr><td><p>K</p></td><td><p>Часовой пояс</p></td></tr> <tr><td><p>m</p></td><td><p>Минуты от 0 до 59. Минуты с одной цифрой не дополняются начальным нулем</p></td></tr> <tr><td><p>mm</p></td><td><p>Минуты от 0 до 59. Минуты с одной цифрой дополняются начальным нулем</p></td></tr> <tr><td><p>M</p></td><td><p>Месяц в виде от 1 до 12</p></td></tr> <tr><td><p>MM</p></td><td><p>Месяц в виде от 1 до 12. Месяц с одной цифрой дополняется начальным нулем</p></td></tr> <tr><td><p>MMM</p></td><td><p>Сокращенное название месяца</p></td></tr> <tr><td><p>MMMM</p></td><td><p>Полное название месяца</p></td></tr> <tr><td><p>s</p></td><td><p>Секунды в виде числа от 0 до 59. Секунды с одной цифрой не дополняются начальным нулем</p></td></tr> <tr><td><p>ss</p></td><td><p>Секунды в виде числа от 0 до 59. Секунды с одной цифрой дополняются начальным нулем</p></td></tr> <tr><td><p>t</p></td><td><p>Первые символы в обозначениях AM и PM</p></td></tr> <tr><td><p>tt</p></td><td><p>AM или PM</p></td></tr> <tr><td><p>y</p></td><td><p>Представляет год как число из одной или двух цифр. Если год имеет более двух цифр, то в результате отображаются только две младшие цифры</p></td></tr> <tr><td><p>yy</p></td><td><p>Представляет год как число из одной или двух цифр. Если год имеет более двух цифр, то в результате отображаются только две младшие цифры.  Если год имеет одну цифру, то он дополняется начальным нулем</p></td></tr> <tr><td><p>yyy</p></td><td><p>Год из трех цифр</p></td></tr> <tr><td><p>yyyy</p></td><td><p>Год из четырех цифр</p></td></tr> <tr><td><p>yyyyy</p></td><td><p>Год из пяти цифр. Если в году меньше пяти цифр, то он дополняется начальными нулями</p></td></tr> <tr><td><p>z</p></td><td><p>Представляет смещение в часах относительно времени UTC</p></td></tr> <tr><td><p>zz</p></td><td><p>Представляет смещение в часах относительно времени UTC. Если смещение представляет одну цифру, то она дополняется начальным нулем.</p></td></tr> </tbody></table> <p>Создадим пару своих форматов:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_736784""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateTime now = DateTime.Now;</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(now.ToString(</code><code class=""c# string"">""hh:mm:ss""</code><code class=""c# plain"">));</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(now.ToString(</code><code class=""c# string"">""dd.MM.yyyy""</code><code class=""c# plain"">));</code></div></div></td></tr></tbody></table></div></div> <p>Консольный вывод:</p> <div class=""console""> <pre class=""consoletext"">02:46:38 06.01.2022 </pre> </div>     </div></body></html>",
                @"<!DOCTYPE html> <html lang=""ru""> <head>     <meta charset=""UTF-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Структура программы C#</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             background-color: #f4f4f4;             color: #333;             padding: 20px;         }          h2 {             font-size: 24px;             color: #4CAF50;             margin-bottom: 10px;         }          h3 {             font-size: 20px;             color: #333;             margin-bottom: 10px;         }          p {             font-size: 16px;             margin-bottom: 10px;         }          span.b {             font-weight: bold;             color: #333;         }          .syntaxhighlighter {             background-color: #f9f9f9;             border: 1px solid #ddd;             padding: 10px;             margin-bottom: 20px;             overflow-x: auto;         }          .syntaxhighlighter .toolbar {             display: none;         }          .syntaxhighlighter code {             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .syntaxhighlighter .gutter {             background-color: #f0f0f0;             text-align: right;             padding-right: 10px;             border-right: 1px solid #ddd;             user-select: none;         }          .syntaxhighlighter .gutter .line {             color: #888;         }          .syntaxhighlighter .container .line {             display: block;         }          .syntaxhighlighter .container code {             color: #333;         }          .syntaxhighlighter .c# .comments {             color: #006400;         }          .syntaxhighlighter .c# .plain {             color: #000;         }          .syntaxhighlighter .c# .string {             color: #a31515;         }          .console {             background-color: #2d2d2d;             color: #ffffff;             padding: 10px;             border-radius: 4px;             font-family: Consolas, ""Courier New"", monospace;             font-size: 14px;         }          .consoletext {             white-space: pre;             color: #00ff00;         }          img {             max-width: 100%;             height: auto;         }     </style> </head> <body><div class=""item center menC""> <h2>DateOnly и TimeOnly</h2>   <p>Для упрощения работы с датами и временем в .NET 6 были добавлены две дополнительные структуры - <span class=""b"">DateOnly</span> и  <span class=""b"">TimeOnly</span>.</p> <h3>DateOnly</h3> <p>Структура <span class=""b"">DateOnly</span> представляет дату. Для создания структуры можно использовать ряд ее конструкторов.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_834863""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateOnly()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">DateOnly(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">year, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">month, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">day)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">DateOnly(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">year, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">month, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">day, System.Globalization.Calendar calendar)</code></div></div></td></tr></tbody></table></div></div> <p>При использовании конструктора без параметров структура инициализируется датой 01.01.0001:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_604501""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateOnly someDate = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateOnly();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(someDate); </code><code class=""c# comments"">// 01.01.0001</code></div></div></td></tr></tbody></table></div></div> <p>Вторая версия конструктора принимает год, месяц и число, которыми инициализируется структура:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_497435""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateOnly someDate = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateOnly(2022,1,6); </code><code class=""c# comments"">// 6 января 2022 года</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(someDate); </code><code class=""c# comments"">// 06.01.2022</code></div></div></td></tr></tbody></table></div></div> <p>Третья версия конструктора в дополнение к году, месяцу и числу, также принимает объект календаря - объект <span class=""b"">System.Globalization.Calendar</span>,  относительно которого будет расcчитываться дата. Класс Calendar является абстрактным, но .NET предоставляет ряд встроенных типов календарей.  Например, расcчитаем дату относительно юлианского календаря:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_411032""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# keyword"">using</code> <code class=""c# plain"">System.Globalization;</code></div><div class=""line number2 index1 alt1""> </div><div class=""line number3 index2 alt2""><code class=""c# plain"">DateOnly julianDate = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateOnly(2022,1,6, </code><code class=""c# keyword"">new</code> <code class=""c# plain"">JulianCalendar());</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(julianDate); </code><code class=""c# comments"">// 19.01.2022</code></div></div></td></tr></tbody></table></div></div> <p>В данном случае для .NET переданная в конструктор дата - 06.01.2022 расценивается как дата юлианского календаря. При выводе на консоль мы видим тот же день  только относительно григорианского календаря.</p> <h4>Свойства DateOnly</h4> <p>С помощью свойств структуры можно получить отдельные составляющие даты:</p> <ul> <li><p><span class=""b"">Day</span>: возвращает день даты</p></li> <li><p><span class=""b"">DayNumber</span>: возвращает количество прошедших дней с 1 января 0001 года относительно григорианского календаря</p></li> <li><p><span class=""b"">DayOfWeek</span>: возвращает день недели</p></li> <li><p><span class=""b"">DayOfYear</span>: возвращает день года</p></li> <li><p><span class=""b"">MaxValue</span>: возвращает максимально возможную дату (статическое свойство)</p></li> <li><p><span class=""b"">MinValue</span>: возвращает самую раннюю возможную дату (статическое свойство)</p></li> <li><p><span class=""b"">Month</span>: возвращает месяц</p></li> <li><p><span class=""b"">Year</span>: возвращает год</p></li> </ul> <p>Применение свойств:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_345277""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateOnly now = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">DateOnly(2022,1,6);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(now.Day);         </code><code class=""c# comments"">// 6</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(now.DayNumber);   </code><code class=""c# comments"">// 738160</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(now.DayOfWeek);   </code><code class=""c# comments"">// Thursday</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(now.DayOfYear);   </code><code class=""c# comments"">// 6</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(now.Month);       </code><code class=""c# comments"">// 1</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(now.Year);        </code><code class=""c# comments"">// 2022</code></div></div></td></tr></tbody></table></div></div> <h4>Методы DateOnly</h4> <p>С помощью методов DateOnly можно производить некоторые операции с датами. Некоторые из них:</p> <ul> <li><p><span class=""b"">AddDays(int days)</span>: добавляет к дате некоторое количество дней</p></li> <li><p><span class=""b"">AddMonths(int months)</span>: добавляет к дате некоторое количество месяцев</p></li> <li><p><span class=""b"">AddYears(int years)</span>: добавляет к дате некоторое количество лет</p></li> <li><p><span class=""b"">ToDateTime(TimeOnly)</span>: возвращает объект <code>DateTime</code>,  который в качестве даты исппользует текущий объект DateOnly, а в качестве времени - значение параметра в виде TimeOnly</p></li> <li><p><span class=""b"">ToLongDateString()</span>: выводит текущий объект DateOnly в виде подробной даты</p></li> <li><p><span class=""b"">ToShortDateString()</span>: выводит текущий объект DateOnly в виде сжатой даты</p></li> </ul> <p>Также в классе есть ряд статических методов. Некоторые из них:</p> <ul> <li><p><span class=""b"">FromDateTime(DateTime dateTime)</span>: на основе значения DateTime, переданного через параметр, создает и возвращает объект DateOnly</p></li> <li><p><span class=""b"">FromDayNumber(int days)</span>: на основе количества дней создает и возвращает объект DateOnly</p></li> <li><p><span class=""b"">Parse(string date)</span>: конвертирует строковое представление даты в объект DateOnly</p></li> <li><p><span class=""b"">ParseExact(string date, string format)</span>: конвертирует строковое представление даты в объект DateOnly, применяя определенный формат</p></li> <li><p><span class=""b"">TryParse(String, DateOnly)</span>: конвертирует строковое представление даты в объект DateOnly. При успешной конвертации возвращает true, а параметр типа DateOnly содержит созданную дату</p></li> <li><p><span class=""b"">TryParseExact(String, String, DateOnly)</span>: конвертирует строковое представление даты в объект DateOnly, применяя определенный формат. При успешной конвертации возвращает true, а параметр типа DateOnly содержит созданную дату</p></li> </ul> <p>Пример некоторых операций:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_395779""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">DateOnly now = DateOnly.Parse(</code><code class=""c# string"">""06.01.2022""</code><code class=""c# plain"">);    </code><code class=""c# comments"">// на русскоязычной локализованной ОС</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(now); </code><code class=""c# comments"">// 06.01.2022</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">now = now.AddDays(1);   </code><code class=""c# comments"">// 07.01.2022</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">now = now.AddMonths(4); </code><code class=""c# comments"">// 07.05.2022</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">now = now.AddYears(-1); </code><code class=""c# comments"">// 07.05.2021</code></div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(now.ToShortDateString());  </code><code class=""c# comments"">// 07.05.2021</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(now.ToLongDateString());   </code><code class=""c# comments"">// 7 мая 2021 г.</code></div></div></td></tr></tbody></table></div></div> <h3>TimeOnly</h3> <p>Структура <span class=""b"">TimeOnly</span> представляет время в диапазоне от 00:00:00 до 23:59:59.9999999. Для создания структуры можно использовать ряд ее конструкторов.</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_823012""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">TimeOnly()</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">TimeOnly(</code><code class=""c# keyword"">long</code> <code class=""c# plain"">ticks)</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">TimeOnly(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">hour, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">minute)</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">TimeOnly(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">hour, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">minute, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">second)</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">TimeOnly(</code><code class=""c# keyword"">int</code> <code class=""c# plain"">hour, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">minute, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">second, </code><code class=""c# keyword"">int</code> <code class=""c# plain"">millisecond)</code></div></div></td></tr></tbody></table></div></div> <p>При использовании конструктора без параметров структура инициализируется временем 0.00:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_542867""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">TimeOnly time = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">TimeOnly();</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(time); </code><code class=""c# comments"">// 0:00</code></div></div></td></tr></tbody></table></div></div> <p>Дополнительно с помощью других версий конструктора можно установить количество часов, минут, секунд и миллисекунд:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_837358""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">TimeOnly time1 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">TimeOnly(4, 30);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(time1);   </code><code class=""c# comments"">// 4: 30</code></div><div class=""line number3 index2 alt2""> </div><div class=""line number4 index3 alt1""><code class=""c# plain"">TimeOnly time2 = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">TimeOnly(14, 23, 30);</code></div><div class=""line number5 index4 alt2""><code class=""c# plain"">Console.WriteLine(time2);   </code><code class=""c# comments"">// 14: 23</code></div></div></td></tr></tbody></table></div></div> <h4>Свойства TimeOnly</h4> <p>С помощью свойств структуры можно получить отдельные составляющие времени:</p> <ul> <li><p><span class=""b"">Hour</span>: возвращает количество часов</p></li> <li><p><span class=""b"">Minute</span>: возвращает количество минут</p></li> <li><p><span class=""b"">Second</span>: возвращает количество секунд</p></li> <li><p><span class=""b"">Millisecond</span>: возвращает количество миллисекунд</p></li> <li><p><span class=""b"">Ticks</span>: возвращает количество тиков</p></li> <li><p><span class=""b"">MaxValue</span>: возвращает максимально возможное время (статическое свойство)</p></li> <li><p><span class=""b"">MinValue</span>: возвращает минимально возможное время (статическое свойство)</p></li> </ul> <p>Применение свойств:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_2007""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">TimeOnly time = </code><code class=""c# keyword"">new</code> <code class=""c# plain"">TimeOnly(14, 23, 30);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(time.Hour);       </code><code class=""c# comments"">// 14</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">Console.WriteLine(time.Minute);     </code><code class=""c# comments"">// 23</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">Console.WriteLine(time.Second);     </code><code class=""c# comments"">// 30</code></div></div></td></tr></tbody></table></div></div> <h4>Методы TimeOnly</h4> <p>С помощью методов TimeOnly можно производить некоторые операции с временем. Некоторые из них:</p> <ul> <li><p><span class=""b"">AddHours(double hours)</span>: добавляет к времени некоторое количество часов</p></li> <li><p><span class=""b"">AddMinutes(double minutes)</span>: добавляет к времени некоторое количество минут</p></li> <li><p><span class=""b"">Add(TimeSpan value)</span>: добавляет время из объекта TimeSpan</p></li> <li><p><span class=""b"">ToLongTimeString()</span>: выводит текущий объект TimeOnly в виде подробного времени</p></li> <li><p><span class=""b"">ToShortTimeString()</span>: выводит текущий объект TimeOnly в виде сжатого времени</p></li> </ul> <p>Также в классе есть ряд статических методов. Некоторые из них:</p> <ul> <li><p><span class=""b"">FromDateTime(DateTime dateTime)</span>: на основе значения DateTime, переданного через параметр, создает и возвращает объект TimeOnly</p></li> <li><p><span class=""b"">FromTimeSpan(TimeSpan value)</span>: на основе объекта TimeSpan создает и возвращает объект TimeOnly</p></li> <li><p><span class=""b"">Parse(string time)</span>: конвертирует строковое представление времени в объект TimeOnly</p></li> <li><p><span class=""b"">ParseExact(string timee, string format)</span>: конвертирует строковое представление времени в объект TimeOnly, применяя определенный формат</p></li> <li><p><span class=""b"">TryParse(string time, TimeOnly result)</span>: конвертирует строковое представление времени в объект TimeOnly. При успешной конвертации возвращает true, а параметр типа TimeOnly содержит  сконвертированное время</p></li> <li><p><span class=""b"">TryParseExact(string time, string format, TimeOnly result)</span>: конвертирует строковое представление времени в объект TimeOnly, применяя определенный формат. При успешной конвертации возвращает true, а параметр типа TimeOnly содержит сконвертированное время</p></li> </ul> <p>Пример некоторых операций:</p> <div><div class=""syntaxhighlighter c#"" id=""highlighter_986405""><div class=""toolbar""><span><a class=""toolbar_item command_help help"" href=""#"">?</a></span></div><table border=""0"" cellpadding=""0"" cellspacing=""0""><tbody><tr><td class=""gutter""><div class=""line number1 index0 alt2"">1</div><div class=""line number2 index1 alt1"">2</div><div class=""line number3 index2 alt2"">3</div><div class=""line number4 index3 alt1"">4</div><div class=""line number5 index4 alt2"">5</div><div class=""line number6 index5 alt1"">6</div><div class=""line number7 index6 alt2"">7</div></td><td class=""code""><div class=""container""><div class=""line number1 index0 alt2""><code class=""c# plain"">TimeOnly time = TimeOnly.Parse(</code><code class=""c# string"">""06:33:22""</code><code class=""c# plain"">);</code></div><div class=""line number2 index1 alt1""><code class=""c# plain"">Console.WriteLine(time);        </code><code class=""c# comments"">// 6:33</code></div><div class=""line number3 index2 alt2""><code class=""c# plain"">time = time.AddHours(1);        </code><code class=""c# comments"">// 7:33</code></div><div class=""line number4 index3 alt1""><code class=""c# plain"">time = time.AddMinutes(-23);   </code><code class=""c# comments"">// 7:10</code></div><div class=""line number5 index4 alt2""> </div><div class=""line number6 index5 alt1""><code class=""c# plain"">Console.WriteLine(time.ToShortTimeString());  </code><code class=""c# comments"">// 7:10</code></div><div class=""line number7 index6 alt2""><code class=""c# plain"">Console.WriteLine(time.ToLongTimeString());   </code><code class=""c# comments"">// 7:10:22</code></div></div></td></tr></tbody></table></div></div>     </div></body></html>",

            };
            string[] tasks = new string[]
            {
                "//Задание 1: Работа с датами и временем\r\n //1. Создайте новый объект DateTime с помощью пустого конструктора и выведите его значение на консоль.\r\n",
                "//Задание 1: Форматирование дат и времени\r\n //1. Используйте стандартные строки формата для вывода текущей даты и времени в консоль для форматов D, F, T и Y.\r\n",
                "//Задание 1: Разработка кода, работающего с типами DateOnly и TimeOnly\r\n //1. Создайте переменную типа DateOnly и инициализируйте её с помощью конструктора, передав конкретную дату (например, 15 марта 2023 года). Выведите результат на экран.",

            };
            if (form1Instance != null && comboBox12.SelectedIndex >= 0 && comboBox12.SelectedIndex < htmlContents.Length)
            {
                string login = UserAuthenticator.Login; // Укажите текущий идентификатор пользователя
                selectIndex = comboBox12.SelectedIndex;
                selectCombobox = 12;

                if (await UpdateProgressIfNewSelection(login, selectIndex, selectCombobox))
                {
                    // Обновление `progress` прошло успешно
                    string htmlContent = htmlContents[selectIndex];
                    string task = tasks[selectIndex];

                    _ = form1Instance.LoadHtmlContentAsync(htmlContent, 0);
                    form1Instance.LoadTasks(task);
                    form1Instance.Show();
                    this.Hide();
                }
            }
        }


        private void progressBar1_Click_1(object sender, EventArgs e)
        {

        }

        private async void guna2Button1_Click(object sender, EventArgs e)
        {
            guna2CustomGradientPanel1.Visible = true;

        }

        private void guna2ProgressBar1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void guna2CustomGradientPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void guna2ControlBox1_Click(object sender, EventArgs e)
        {
            guna2CustomGradientPanel1.Visible = false;
        }

        private async void guna2Button2_Click(object sender, EventArgs e)
        {

            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Image Files|*.jpg;*.jpeg;*.png;*.bmp";
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string filePath = openFileDialog.FileName;
                    Image image = Image.FromFile(filePath);

                    // Показать изображение в PictureBox
                    pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
                    pictureBox1.Image = image;

                    string connectionString = "Server=188.235.162.32;Database=csharp_tutorial;User ID=csTutorial;Password=cstutorial;";
                    using (var connection = new MySqlConnection(connectionString))
                    {
                        try
                        {
                            await connection.OpenAsync(); // Открываем соединение сразу
                        }
                        catch
                        {
                            MessageBox.Show("Не удалось подключиться к базе данных.");
                            return;
                        }

                        // Обновление фото
                        using (var command = new MySqlCommand("UPDATE users SET Photo = @Photo WHERE login = @login", connection))
                        {
                            using (var memoryStream = new MemoryStream())
                            {
                                // Сжать изображение перед сохранением, если возможно
                                image = CompressImage(image);

                                // Сохранить изображение в поток памяти
                                image.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Jpeg);

                                // Добавить параметры
                                command.Parameters.AddWithValue("@Photo", memoryStream.ToArray());
                                command.Parameters.AddWithValue("@login", UserAuthenticator.Login);

                                // Выполнить запрос
                                var rowsAffected = await command.ExecuteNonQueryAsync();

                                // Проверка, были ли затронуты строки
                                if (rowsAffected > 0)
                                {
                                    MessageBox.Show(
                                        $"Фото успешно обновлено в базе данных.",
                                        "Обновление профиля",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Information);
                                    
                                }
                                else
                                {
                                    MessageBox.Show(
                                        $"Не удалось обновить фото.",
                                        "Обновление профиля",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                                }
                            }
                        }
                    }
                }
            }
        }

        private Image CompressImage(Image originalImage)
        {
            // Пример сжатия изображения (можно настроить параметры)
            var width = originalImage.Width;
            var height = originalImage.Height;
            var compressedImage = new Bitmap(originalImage, new Size(width, height));
            return compressedImage;
        }
        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void guna2Button3_Click(object sender, EventArgs e)
        {
            guna2CustomGradientPanel1.Visible = false;
        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void guna2Button4_Click(object sender, EventArgs e)
        {
            
            // Запрос к базе данных, чтобы найти имя пользователя и логин по MachineGuid
            using (var connection = new MySqlConnection(UserAuthenticator.connectionString))
            {
                connection.Open();
                string query = "UPDATE users SET MachineGuid = NULL WHERE login = @login";
                using (var command = new MySqlCommand(query, connection))
                {
                    // Пример значения для удаления
                    command.Parameters.AddWithValue("@login", UserAuthenticator.Login);

                    int rowsAffected = command.ExecuteNonQuery();

                    if (rowsAffected > 0)
                    {
                        UserAuthenticator.Login = null;
                        UserAuthenticator.UserName = null;
                        MessageBox.Show(
                            $"Вы успешно вышли из аккаунта!",
                            "Выход из аккаунта",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                        Autorization form = new Autorization();
                        form.Show();
                        this.Hide();
                    }
                }
            }
        }
        public class Snowflake
        {
            public int X { get; set; }
            public int Y { get; set; }
            public int Size { get; set; }
            public int Speed { get; set; }

            public Snowflake(int x, int y, int speed)
            {
                X = x;
                Y = y;
                Size = rand.Next(5, 15);
                Speed = speed;
            }
        }
    }
}